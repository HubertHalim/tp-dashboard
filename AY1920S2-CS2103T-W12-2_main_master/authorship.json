[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    compile group: \u0027org.jfxtras\u0027, name: \u0027jfxtras-agenda\u0027, version: \u002710.0-r2-SNAPSHOT\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    compile group: \u0027org.jfxtras\u0027, name: \u0027jfxtras-icalendaragenda\u0027, version: \u002710.0-r2-SNAPSHOT\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    compile group: \u0027org.jfxtras\u0027, name: \u0027jfxtras-icalendarfx\u0027, version: \u002710.0-r2-SNAPSHOT\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    compile \u0027org.apache.commons:commons-math3:3.6.1\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 5,
      "-": 155
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Academics;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.ReadOnlyAcademics;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Admin;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.ReadOnlyAdmin;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.EventHistory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.ReadOnlyEvents;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.NotesManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.ReadOnlyNotes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.storage.academics.AcademicsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.storage.academics.JsonAcademicsStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.storage.admin.AdminStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.storage.admin.JsonAdminStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.storage.event.EventStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.storage.event.JsonEventStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.storage.notes.JsonNotesManagerStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.storage.notes.NotesManagerStorage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        AcademicsStorage academicsStorage \u003d new JsonAcademicsStorage(userPrefs.getAcademicsFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EventStorage eventStorage \u003d new JsonEventStorage(userPrefs.getEventHistoryFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        NotesManagerStorage notesManagerStorage \u003d new JsonNotesManagerStorage(userPrefs.getNotesFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        AdminStorage adminStorage \u003d new JsonAdminStorage(userPrefs.getAdminFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, adminStorage, academicsStorage,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                 userPrefsStorage, eventStorage, notesManagerStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        File file \u003d new File(\"images\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            new File(\"images\").mkdir();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Optional\u003cReadOnlyAcademics\u003e academicsOptional;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Optional\u003cReadOnlyEvents\u003e eventsOptional;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Optional\u003cReadOnlyNotes\u003e notesManagerOptional;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Optional\u003cReadOnlyAdmin\u003e adminOptional;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        ReadOnlyAcademics initialAcademics;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        ReadOnlyAdmin initialAdmin;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        ReadOnlyEvents initialEvents;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        ReadOnlyNotes initialNotesManager;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            academicsOptional \u003d storage.readAcademics();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            adminOptional \u003d storage.readAdmin();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            eventsOptional \u003d storage.readEvents();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            notesManagerOptional \u003d storage.readNotesManager();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new File(\"data\").mkdir();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            if (!academicsOptional.isPresent()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                logger.info(\"Academics file not found. Will be starting with a sample Academics.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            if (!adminOptional.isPresent()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                logger.info(\"Admin file not found.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            initialAcademics \u003d academicsOptional.orElseGet(SampleDataUtil::getSampleAcademics);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            initialAdmin \u003d adminOptional.orElseGet(SampleDataUtil::getSampleAdmin);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            if (!eventsOptional.isPresent()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                logger.info(\"Events file not found, Will be starting with a sample Events file\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            initialAcademics \u003d academicsOptional.orElseGet(SampleDataUtil::getSampleAcademics);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            initialEvents \u003d eventsOptional.orElseGet(SampleDataUtil::getSampleEvents);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            initialNotesManager \u003d notesManagerOptional.orElseGet(SampleDataUtil::getSampleNotesManager);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            initialAcademics \u003d new Academics();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            initialAdmin \u003d new Admin();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            initialEvents \u003d new EventHistory();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            initialNotesManager \u003d new NotesManager();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            initialAcademics \u003d new Academics();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            initialAdmin \u003d new Admin();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            initialNotesManager \u003d new NotesManager();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            initialEvents \u003d new EventHistory();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            initialNotesManager \u003d new NotesManager();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return new ModelManager(initialData, initialAcademics, initialAdmin, initialNotesManager, userPrefs,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                initialEvents);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 11,
      "Yuanyu97": 19,
      "TheElectricBlender": 26,
      "-": 182,
      "tingalinga": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX \u003d \"The student index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_STUDENTS_LISTED_OVERVIEW \u003d \"%1$d students listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final String MESSAGE_INVALID_ASSESSMENT_TYPE \u003d \"Invalid assessment type!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_ADMIN \u003d \"Date provided is not in database!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_MISSING_EVENT_NAME \u003d \"Missing event name!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_INVALID_EVENT_DATETIME_RANGE \u003d \"Invalid date range!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_INVALID_RECURRENCE_TYPE \u003d \"Invalid recurrence type.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            + \" Input either none, daily or weekly.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_INVALID_COLOR_STRING \u003d \"Invalid color input.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            + \" Color code must be from 0 to 23 inclusive.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Invalid date input passed. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            + \"The formate should be YYYY-MM-DD and should be a valid date.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String MESSGAE_INVALID_NOTES_DISPLAYED_INDEX \u003d \"The note index provided is invalid\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NOTES \u003d \"This same note already exists\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String MESSAGE_UNAVAILABLE_NOTES \u003d \"This note is unavailable\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 3,
      "Yuanyu97": 1,
      "TheElectricBlender": 11,
      "-": 10,
      "tingalinga": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/EventUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import org.apache.commons.math3.util.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import jfxtras.icalendarfx.properties.component.recurrence.RecurrenceRule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.EventScheduleView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.RecurrenceType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Utility methods for events"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class EventUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String DAILY_RECUR_RULE \u003d \"FREQ\u003dDAILY;INTERVAL\u003d1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String WEEKLY_RECUR_RULE \u003d \"FREQ\u003dWEEKLY;INTERVAL\u003d1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String NO_RECUR_RULE \u003d \"FREQ\u003dYEARLY;COUNT\u003d1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .appendPattern(\"yyyy-MM-dd[ HH:mm:ss]\").parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0).parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .toFormatter();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String INVALID_RECUR_TYPE \u003d \"Invalid recurrence type!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String BAD_DATE_FORMAT \u003d \"Invalid DateTime format.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static boolean validateDateTime(LocalDateTime startDateTime, LocalDateTime endDateTime) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return startDateTime.compareTo(endDateTime) \u003c 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Maps local event to iCalendar APIs VEvent"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static VEvent eventToVEventMapper(Event event) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        VEvent mappedVEvent \u003d new VEvent();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        mappedVEvent.setDateTimeEnd(event.getEndDateTime());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        mappedVEvent.setDateTimeStart(event.getStartDateTime());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        mappedVEvent.setUniqueIdentifier(event.getUniqueIdentifier());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        mappedVEvent.setSummary(event.getEventName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (event.getRecurrenceType() \u003d\u003d RecurrenceType.DAILY) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            mappedVEvent.setRecurrenceRule(DAILY_RECUR_RULE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else if (event.getRecurrenceType() \u003d\u003d RecurrenceType.WEEKLY) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            mappedVEvent.setRecurrenceRule(WEEKLY_RECUR_RULE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else if (event.getRecurrenceType() \u003d\u003d RecurrenceType.NONE) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            mappedVEvent.setRecurrenceRule(NO_RECUR_RULE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        mappedVEvent.withCategories(event.getColorCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return mappedVEvent;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Maps iCalendar APIs VEvent to local event class"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static Event vEventToEventMapper(VEvent vEvent) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Event mappedEvent \u003d new Event();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        mappedEvent.setEndTime(LocalDateTime.parse(vEvent.getDateTimeEnd().getValue().toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        mappedEvent.setStartTime(LocalDateTime.parse(vEvent.getDateTimeStart().getValue().toString()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        mappedEvent.setUniqueIdentifier(vEvent.getUniqueIdentifier().getValue());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        mappedEvent.setEventName(vEvent.getSummary().getValue());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        RecurrenceRule vEventRule \u003d vEvent.getRecurrenceRule();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (vEventRule.toString().contains(\"DAILY\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            mappedEvent.setRecurrenceType(RecurrenceType.DAILY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else if (vEventRule.toString().contains(\"WEEKLY\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            mappedEvent.setRecurrenceType(RecurrenceType.WEEKLY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            mappedEvent.setRecurrenceType(RecurrenceType.NONE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        mappedEvent.setColorCode(vEvent.getCategories().get(0).getValue().get(0));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return mappedEvent;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Makes a unique identifier with current date time and these parameters"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param eventName event name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param startDateTime start date time of event"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param endDateTime end date time of event"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @return unique identifier based on current date time"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static String makeUniqueIdentifier(String eventName, String startDateTime, String endDateTime) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        builder.append(LocalDateTime.now().toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        builder.append(\"-\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        builder.append(eventName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        builder.append(\"-\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        builder.append(startDateTime);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        builder.append(\"-\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        builder.append(endDateTime);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        builder.append(\".teapethelper\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Converts date time to LocalDateTime object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param date must be of formate yyyy-mm-dd"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static LocalDateTime dateTimeToLocalDateTimeFormatter(String date) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return LocalDateTime.parse(date, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Converts string value to EventScheduleView class object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static EventScheduleView stringToEventScheduleViewMapper(String eventScheduleViewString)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (eventScheduleViewString.equalsIgnoreCase(EventScheduleView.DAILY.name())) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return EventScheduleView.DAILY;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else if (eventScheduleViewString.equalsIgnoreCase(EventScheduleView.WEEKLY.name())) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return EventScheduleView.WEEKLY;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new IllegalValueException(\"Schedule view is not valid. Input passed: \" + eventScheduleViewString);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Converts VEvent to string"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static String vEventToString(VEvent vEvent) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return String.format(\"event name: %s , start dateime: %s , end datetime: %s\\n\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                vEvent.getSummary().getValue().toString(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                vEvent.getDateTimeStart().getValue().toString(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                vEvent.getDateTimeEnd().getValue().toString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Presents the index, VEvent pair to user"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static String formatIndexVEventPair(Pair\u003cIndex, VEvent\u003e indexVEventPair) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Index index \u003d indexVEventPair.getKey();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        VEvent vEvent \u003d indexVEventPair.getValue();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return String.format(\"Index: %d , event name: %s , start datetime: %s , end datetime: %s\\n\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                index.getOneBased(), vEvent.getSummary().getValue().toString(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                vEvent.getDateTimeStart().getValue().toString(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                vEvent.getDateTimeEnd().getValue().toString());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Checks if 2 VEvents are equal. They are equal if the attributes eventName, start and end date time are the same"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param vEvent1 first vevent"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param vEvent2 second vevent"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @return true if equal"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static boolean isEqual(VEvent vEvent1, VEvent vEvent2) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return vEvent1.getSummary().equals(vEvent2.getSummary())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u0026\u0026 vEvent1.getDateTimeStart().equals(vEvent2.getDateTimeEnd())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u0026\u0026 vEvent2.getDateTimeEnd().equals(vEvent2.getDateTimeEnd());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 157
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Creates parent directories of file if it has a parent directory."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Assumes file exists."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 2,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Assessment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.ReadOnlyAcademics;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.ReadOnlyAdmin;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.EventScheduleView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.ReadOnlyNotes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ADDRESS BOOK START \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @see Model#getAddressBook()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of students */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ADDRESS BOOK END \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ACADEMICS START \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the Academics."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @see Model#getAcademics()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ReadOnlyAcademics getAcademics();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of assessments */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ObservableList\u003cAssessment\u003e getFilteredAcademicsList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the user prefs\u0027 academics file path."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    Path getAcademicsFilePath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ACADEMICS END \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ADMIN START \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the Admin page."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @see Model#getAdmin()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ReadOnlyAdmin getAdmin();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of admin list */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ObservableList\u003cDate\u003e getFilteredDateList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the user prefs\u0027 admin file path."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    Path getAdminFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ADMIN END \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d NOTES START \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Returns the Academics."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @see Model#getAcademics()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    ReadOnlyNotes getNotesManager();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of assessments */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    ObservableList\u003cNotes\u003e getFilteredNotesList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Returns the user prefs\u0027 academics file path."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    Path getNotesManagerFilePath();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ACADEMICS END \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    ObservableList\u003cVEvent\u003e getVEvents();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    LocalDateTime getEventScheduleLocalDateTime();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    EventScheduleView getEventScheduleView();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 18,
      "Yuanyu97": 21,
      "TheElectricBlender": 14,
      "-": 48,
      "tingalinga": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.logic.parser.TeaPetParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Assessment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.ReadOnlyAcademics;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.ReadOnlyAdmin;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.EventScheduleView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.ReadOnlyNotes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final TeaPetParser teaPetParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        teaPetParser \u003d new TeaPetParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Command command \u003d teaPetParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            storage.saveAcademics(model.getAcademics());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            storage.saveAdmin(model.getAdmin());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            storage.saveEvents(model.getEventHistory());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            storage.saveNotesManager(model.getNotesManager());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ADDRESS BOOK START \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return model.getFilteredStudentList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ADDRESS BOOK END \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ACADEMICS START \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public ReadOnlyAcademics getAcademics() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return model.getAcademics();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public ObservableList\u003cAssessment\u003e getFilteredAcademicsList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return model.getFilteredAcademicsList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Path getAcademicsFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return model.getAcademicsFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ACADEMICS END \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ADMIN START \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public ReadOnlyAdmin getAdmin() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return model.getAdmin();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public ObservableList\u003cDate\u003e getFilteredDateList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return model.getFilteredDateList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Path getAdminFilePath() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return model.getAdminFilePath();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ADMIN END \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d NOTES START \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public ReadOnlyNotes getNotesManager() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return model.getNotesManager();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public ObservableList\u003cNotes\u003e getFilteredNotesList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return model.getFilteredNotesList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public Path getNotesManagerFilePath() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return model.getNotesFilePath();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d NOTES END \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public ObservableList\u003cVEvent\u003e getVEvents() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return model.getVEvents();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public LocalDateTime getEventScheduleLocalDateTime() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return model.getEventScheduleLocalDateTime();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EventScheduleView getEventScheduleView() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return model.getEventScheduleView();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 19,
      "Yuanyu97": 20,
      "TheElectricBlender": 29,
      "-": 71,
      "tingalinga": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AcademicsAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Assessment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Exam;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Homework;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Adds an academic progress report to address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class AcademicsAddCommand extends AcademicsCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": creates a new assessment\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            + \"desc/[DESCRIPTION]\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            + \"type/[TYPE: homework/exam]\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            + \"date/[DATE]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            + \"Example: academics name/CS2103T assignment 1 type/homework date/2020-03-04\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Added assessment:\\n%1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSESSMENT \u003d \"This assessment already exists in the academics list\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private final Assessment toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public AcademicsAddCommand(String description, String type, String date) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"homework\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            toAdd \u003d new Homework(description, date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"exam\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            toAdd \u003d new Exam(description, date);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ASSESSMENT_TYPE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (model.hasAssessment(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ASSESSMENT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        toAdd.setStudents(lastShownList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        model.addAssessment(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                || (other instanceof AcademicsAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AcademicsAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 3,
      "tingalinga": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AcademicsCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Adds an academic report to the address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public abstract class AcademicsCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"academics\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Commands: \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            + COMMAND_WORD + \" add - adds new assessment.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 3,
      "tingalinga": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEMPERATURE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Adds a student to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"This command adds a student to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            + PREFIX_TEMPERATURE + \"TEMPERATURE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            + PREFIX_ATTENDANCE + \"ATTENDANCE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New student added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the address book\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final Student toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Student}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public AddCommand(Student student) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        toAdd \u003d student;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (model.hasStudent(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        model.addStudent(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 2,
      "Yuanyu97": 4,
      "TheElectricBlender": 12,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 1,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Deletes a student identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            + \": Deletes the student identified by the index number used in the displayed student list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_DELETE_STUDENT_SUCCESS \u003d \"Deleted Student: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student studentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        model.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 9,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEMPERATURE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.NextOfKin;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Remark;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Temperature;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Edits the details of an existing student in the address book."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"This Command edits the details of the student identified. \\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"Parameters: [STUDENT INDEX] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            + \"[\" + PREFIX_TEMPERATURE + \"TEMPERATURE] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            + \"[\" + PREFIX_ATTENDANCE + \"ATTENDANCE] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_EDIT_STUDENT_SUCCESS \u003d \"Edited Student: %1$s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists in the address book.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final EditStudentDescriptor editStudentDescriptor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param index of the student in the filtered student list to edit"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param editStudentDescriptor details to edit the student with"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EditCommand(Index index, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(editStudentDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.editStudentDescriptor \u003d new EditStudentDescriptor(editStudentDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student editedStudent \u003d createEditedStudent(studentToEdit, editStudentDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!studentToEdit.isSameStudent(editedStudent) \u0026\u0026 model.hasStudent(editedStudent)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Creates and returns a {@code Student} with the details of {@code studentToEdit}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * edited with {@code editStudentDescriptor}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private static Student createEditedStudent(Student studentToEdit, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assert studentToEdit !\u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Name updatedName \u003d editStudentDescriptor.getName().orElse(studentToEdit.getName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Phone updatedPhone \u003d editStudentDescriptor.getPhone().orElse(studentToEdit.getPhone());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Email updatedEmail \u003d editStudentDescriptor.getEmail().orElse(studentToEdit.getEmail());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Address updatedAddress \u003d editStudentDescriptor.getAddress().orElse(studentToEdit.getAddress());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Temperature updatedTemperature \u003d editStudentDescriptor.getTemperature().orElse(studentToEdit.getTemperature());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Attendance updatedAttendance \u003d editStudentDescriptor.getAttendance().orElse(studentToEdit.getAttendance());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        ArrayList\u003cNotes\u003e updatedNotes \u003d editStudentDescriptor.getNotes().orElse(studentToEdit.getNotes());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Remark updatedRemark \u003d studentToEdit.getRemark(); // edit command does not allow editing remarks"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editStudentDescriptor.getTags().orElse(studentToEdit.getTags());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        NextOfKin updatedNok \u003d studentToEdit.getNok();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return new Student(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTemperature,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                updatedAttendance, updatedNok, updatedNotes, updatedRemark, updatedTags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u0026\u0026 editStudentDescriptor.equals(e.editStudentDescriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Stores the details to edit the student with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * corresponding field value of the student."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static class EditStudentDescriptor {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        private Temperature temperature;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        private Attendance attendance;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        private ArrayList\u003cNotes\u003e notes;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public EditStudentDescriptor() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public EditStudentDescriptor(EditStudentDescriptor toCopy) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            setTemperature(toCopy.temperature);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            setAttendance(toCopy.attendance);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            setNotes(toCopy.notes);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, temperature, attendance, tags);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        public void setNotes(ArrayList\u003cNotes\u003e notes) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            this.notes \u003d notes;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        public Optional\u003cArrayList\u003cNotes\u003e\u003e getNotes() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            return (notes !\u003d null)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                    ? Optional.of((ArrayList\u003cNotes\u003e) Collections.unmodifiableList(notes)) : Optional.empty();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        public void setTemperature(Temperature temperature) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            this.temperature \u003d temperature;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        public Optional\u003cTemperature\u003e getTemperature() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return Optional.ofNullable(temperature);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        public void setAttendance(Attendance attendance) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        public Optional\u003cAttendance\u003e getAttendance() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return Optional.ofNullable(attendance);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            if (!(other instanceof EditStudentDescriptor)) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            EditStudentDescriptor e \u003d (EditStudentDescriptor) other;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    \u0026\u0026 getTemperature().equals(e.getTemperature())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    \u0026\u0026 getAttendance().equals(e.getAttendance())"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                    \u0026\u0026 getNotes().equals(e.getNotes())"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 21,
      "Yuanyu97": 33,
      "TheElectricBlender": 45,
      "-": 175
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Finds and lists all students in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all students whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        model.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                String.format(Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW, model.getFilteredStudentList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 5,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RefreshCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Lists all students in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class RefreshCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"refresh\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Refreshed students panel and updated all photos! \\n \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            + \"Please take note your file must be: \\n 1. In png format \\n 2. All lower case \\n 3. No whitespace \\n \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            + \"For example, Student Name: Simon Lam, File Name: simonlam.png \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        model.updateFilteredNotesList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 2,
      "TheElectricBlender": 9,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Changes the remark of an existing student in the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the student identified \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            + \"by the index number used in the last student listing. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            + PREFIX_REMARK + \"[REMARK]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            + PREFIX_REMARK + \"Likes to swim.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Student: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Student: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param index of the student in the filtered student list to edit the remark"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param remark of the student to be updated to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public RemarkCommand(Index index, Remark remark) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student editedStudent \u003d new Student(studentToEdit.getName(), studentToEdit.getPhone(), studentToEdit.getEmail(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                studentToEdit.getAddress(), studentToEdit.getTemperature(), studentToEdit.getAttendance(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                studentToEdit.getNok(), studentToEdit.getNotes(), remark, studentToEdit.getTags());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedStudent));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * {@code studentToEdit}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private String generateSuccessMessage(Student studentToEdit) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return String.format(message, studentToEdit);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 73,
      "TheElectricBlender": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/admin/AdminCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.logic.commands.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Represents an admin command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public abstract class AdminCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"admin\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String ADMIN_DISPLAY \u003d \"display\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String ADMIN_FETCH \u003d \"fetch\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String ADMIN_SAVE \u003d \"save\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String ADMIN_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"These are the various admin commands: \" + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            + COMMAND_WORD + \" \" + ADMIN_DISPLAY + \": displays the last updated admin list of the class \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            + COMMAND_WORD + \" \" + ADMIN_SAVE + \": saves the last updated admin list of class as today\u0027s date \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            + COMMAND_WORD + \" \" + ADMIN_FETCH + \" YYYY-MM-DD: fetches the admin details of class at specified date\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            + COMMAND_WORD + \" \" + ADMIN_DELETE + \" YYYY-MM-DD: deletes the admin details of class at specified date\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public abstract boolean equals(Object other);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/admin/AdminDeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.logic.commands.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.DateContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.exceptions.DateNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Deletes the administrative details of the students list on a specific date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class AdminDeleteCommand extends AdminCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + ADMIN_DELETE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            + \"YYYY-MM-DD: to delete the class admin details at the specified date.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            + \"For example: admin delete 2020-04-23\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Admin list has been deleted for %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private final DateContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public AdminDeleteCommand(DateContainsKeywordsPredicate predicate) { //predicate here is a LocalDate object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public CommandResult execute(Model model) throws DateNotFoundException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        model.updateFilteredDateList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (model.getFilteredDateList().size() \u003d\u003d 0) { //no match"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new DateNotFoundException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            Date dateToDelete \u003d model.getFilteredDateList().get(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            String fullDate \u003d dateToDelete.getDate().getMonth().getDisplayName(TextStyle.SHORT, Locale.ENGLISH) + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    + dateToDelete.getDate().getDayOfMonth() + \" \" + dateToDelete.getDate().getYear();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            model.deleteDate(dateToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, fullDate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                || (other instanceof AdminDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u0026\u0026 predicate.equals(((AdminDeleteCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/admin/AdminDisplayCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.logic.commands.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Displays the last updated administrative version of the students list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class AdminDisplayCommand extends AdminCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + ADMIN_DISPLAY"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            + \": to display the last updated class admin details.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The Student list now displays last updated ADMIN details\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Creates an AdminDisplayCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public AdminDisplayCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean equals(Object other) { //dummy method here"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/admin/AdminFetchCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.logic.commands.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.DateContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.exceptions.DateNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Fetches the administrative details of the students list on a specific date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class AdminFetchCommand extends AdminCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + ADMIN_FETCH"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            + \" YYYY-MM-DD: to display the class admin details.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Class admin details for %1$s listed!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private final DateContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public AdminFetchCommand(DateContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public CommandResult execute(Model model) throws DateNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        model.updateFilteredDateList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (model.getFilteredDateList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new DateNotFoundException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            LocalDate date \u003d model.getFilteredDateList().get(0).getDate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            String fullDate \u003d date.getMonth().getDisplayName(TextStyle.SHORT, Locale.ENGLISH) + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    + date.getDayOfMonth() + \" \" + date.getYear();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    String.format(MESSAGE_SUCCESS, fullDate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                || (other instanceof AdminFetchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u0026\u0026 predicate.equals(((AdminFetchCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/admin/AdminSaveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.logic.commands.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Saves the current most updated administrative list as today\u0027s date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class AdminSaveCommand extends AdminCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + ADMIN_SAVE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            + \": to save the most updated admin list as today\u0027s date.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"This admin list has been saved for %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private final LocalDate toAdd;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public AdminSaveCommand(LocalDate date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        toAdd \u003d date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Date date \u003d new Date(toAdd, model.getFilteredStudentList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        model.addDate(date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String fullDate \u003d toAdd.getMonth().getDisplayName(TextStyle.SHORT, Locale.ENGLISH) + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + toAdd.getDayOfMonth() + \" \" + toAdd.getYear();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, fullDate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                || (other instanceof AdminSaveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AdminSaveCommand) other).toAdd));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/event/EventAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.logic.commands.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_EVENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Class to add new events"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class EventAddCommand extends EventCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new event to the scheduler. \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            + \"eventName/[EVENTNAME]\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            + \"startDateTime/[STARTDATETIME]\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            + \"endDateTime/[ENDDATETIME]\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            + \"recurrence/[DAILY/WEEKLY/NONE]\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            + \"color/[0-23]\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            + \"Example: event eventName/Consultation startDateTime/2020-03-30T08:00 endDateTime/2020-03-30T10:00 \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            + \"recurrence/none color/3\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Added event: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final VEvent vEventToAdd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Constructor for add event command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param vEventToAdd event to be added"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EventAddCommand(VEvent vEventToAdd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(vEventToAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.vEventToAdd \u003d vEventToAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (model.hasVEvent(vEventToAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            model.addVEvent(vEventToAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            String successMessage \u003d makeSuccessMessage(vEventToAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return new CommandResult(successMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Success message builder"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public String makeSuccessMessage(VEvent vEvent) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return String.format(MESSAGE_SUCCESS, vEvent.getSummary().getValue());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!(other instanceof EventAddCommand)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EventAddCommand eventAddCommand \u003d (EventAddCommand) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return vEventToAdd.equals(eventAddCommand.vEventToAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/event/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.logic.commands.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Adds an event to the scheduler"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public abstract class EventCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/notes/NotesAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.logic.commands.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_NOTES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * Represents NotesAddCommand class which adds Note to a Student."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesAddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"notesa\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + PREFIX_NAME + \" [Name of Student] \" + PREFIX_CONTENT + \" [Content of Sticky Note]\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Student Note added! Yay!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final String content;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final Notes note;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Creates a NotesCommand to add note to a student."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param name of the student which the note belongs to"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param content of the note"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public NotesAddCommand(String name, String content) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireNonNull(name, content);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.note \u003d new Notes(name, content);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Getter of String name."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Getter of String content."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public String getContent() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * The execute() function which returns to the model an updated student with the new note added."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @return CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @throws CommandException if student cannot be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        if (model.hasNote(note)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_NOTES);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        model.addNote(note);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, note));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        if (!(other instanceof NotesAddCommand)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        NotesAddCommand s \u003d (NotesAddCommand) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return name.equals(((NotesAddCommand) other).getName())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                \u0026\u0026 content.equals(((NotesAddCommand) other).getContent());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/notes/NotesDeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.logic.commands.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " *  Represents NotesDeleteCommand which deletes a note from storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesDeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"notesd\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" Index of Note to be deleted.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Student Note deleted.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public NotesDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Overriden execute method which deletes a specified note from a student, and returning the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * updated student to the model."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @return CommandResult"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        List\u003cNotes\u003e lastShownList \u003d model.getFilteredNotesList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new CommandException(Messages.MESSGAE_INVALID_NOTES_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        Notes toBeDeleted \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        model.deleteNote(toBeDeleted);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                || (other instanceof NotesDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((NotesDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/notes/NotesExportCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.logic.commands.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * Represents a NotesExportCommand which exports currently stored notes, into a .txt file format."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesExportCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"notese\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" [with no other parameters]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Notes are exported to studentNotes.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Overriden execute command which returns CommandResult containing success message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @return CommandResult"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/notes/NotesFilterCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.logic.commands.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.NotesContainKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * Represents a NotesFilterCommand which filters the notes displayed based on input keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesFilterCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"notesf\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all notes which contains any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        + \"the specified keywords (case-insensitive) and displays them as a list with index numbers. \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" late asleep disappointed\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Displaying Notes with Keywords: \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final NotesContainKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Constructor of NotesFilterCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public NotesFilterCommand(NotesContainKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Overriden execute method which returns a CommandResult with success message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @return CommandResult"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        model.updateFilteredNotesList(predicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + predicate.getKeywords().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/studentdisplay/DefaultStudentDisplayCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.logic.commands.studentdisplay;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * Represents a command which displays a concise version of students\u0027 list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class DefaultStudentDisplayCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"default\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The Student list now displays DEFAULT details\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Creates an DefaultStudentDisplayCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public DefaultStudentDisplayCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Overriden execute command which returns a new CommandResult containing success message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @return CommandResult"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 40,
      "Yuanyu97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/studentdisplay/DetailedStudentDisplayCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.logic.commands.studentdisplay;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * Represents a command which displays a comprehensive version of students\u0027 list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class DetailedStudentDisplayCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"detailed\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The Student list now displays ALL details\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Creates an DetailedStudentDisplayCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public DetailedStudentDisplayCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Overriden execute command which returns a new CommandResult containing success message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @return CommandResult"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AcademicsCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSESSMENT_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSESSMENT_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ASSESSMENT_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.logic.commands.AcademicsAddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.logic.commands.AcademicsCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Parses the given {@code String} of arguments in the context of the AcademicsCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * and returns an AcademicsCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class AcademicsCommandParser implements Parser\u003cAcademicsCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Academics command has to include an action.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            + AcademicsCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public AcademicsCommand parse(String args) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ADD, PREFIX_ASSESSMENT_DESCRIPTION,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                        PREFIX_ASSESSMENT_TYPE, PREFIX_ASSESSMENT_DATE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADD).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return addCommand(argMultimap);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HELP_MESSAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Adds the given assessment details to academic report."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private AcademicsAddCommand addCommand(ArgumentMultimap argMultimap) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ASSESSMENT_DESCRIPTION, PREFIX_ASSESSMENT_DATE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AcademicsAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String description \u003d argMultimap.getValue(PREFIX_ASSESSMENT_DESCRIPTION).get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String type \u003d argMultimap.getValue(PREFIX_ASSESSMENT_TYPE).get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String date \u003d argMultimap.getValue(PREFIX_ASSESSMENT_DATE).get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return new AcademicsAddCommand(description, type, date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 18,
      "tingalinga": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEMPERATURE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.NextOfKin;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Remark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Temperature;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        PREFIX_NOK, PREFIX_TEMPERATURE, PREFIX_ATTENDANCE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        NextOfKin nok \u003d ParserUtil.parseNok(argMultimap.getValue(PREFIX_NOK).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Temperature temperature \u003d ParserUtil.parseTemperature(argMultimap.getValue(PREFIX_TEMPERATURE).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Attendance attendance \u003d ParserUtil.parseAttendance(argMultimap.getValue(PREFIX_ATTENDANCE).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        ArrayList\u003cNotes\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Remark remark \u003d new Remark(\"\"); // add command does not allow adding remarks straight away"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Student student \u003d new Student(name, phone, email, address, temperature, attendance, nok, notes, remark,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                tagList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return new AddCommand(student);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 3,
      "Yuanyu97": 11,
      "TheElectricBlender": 14,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AdminCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.logic.commands.admin.AdminCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.logic.commands.admin.AdminDeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.logic.commands.admin.AdminDisplayCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.logic.commands.admin.AdminFetchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.logic.commands.admin.AdminSaveCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.DateContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Parses input argument and creates a new AdminCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class AdminCommandParser implements Parser\u003cAdminCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Parses the given {@code String} of argument in the context of the AdminCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * and returns an AdminCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public AdminCommand parse(String arg) throws ParseException, DateTimeParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        arg.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String[] inputs \u003d arg.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (inputs.length \u003c 2) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    AdminCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        switch (inputs[1]) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        case AdminCommand.ADMIN_DISPLAY:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            if (inputs.length \u003e 2) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        AdminDisplayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                return new AdminDisplayCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        case AdminCommand.ADMIN_FETCH:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            if (inputs.length \u003e 3 || inputs.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        AdminFetchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                return new AdminFetchCommand(new DateContainsKeywordsPredicate(LocalDate.parse(inputs[2])));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        case AdminCommand.ADMIN_SAVE:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            if (inputs.length \u003e 2) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        AdminSaveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                return new AdminSaveCommand(LocalDate.now());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        case AdminCommand.ADMIN_DELETE:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            if (inputs.length \u003e 3 || inputs.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        AdminDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                return new AdminDeleteCommand(new DateContainsKeywordsPredicate(LocalDate.parse(inputs[2])));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AdminCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final String NOT_SINGULAR \u003d \"Can only have one argument in the prefix \\\"%1$s\\\".\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * If value does not exist, returns insert comment"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            switch (prefix.getPrefix()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            case \"a/\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                Optional\u003cString\u003e missingAddressString \u003d Optional.of(\"Insert address here!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                return missingAddressString;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            case \"p/\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                Optional\u003cString\u003e missingPhoneNumberString \u003d Optional.of(\"Insert phone number here!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                return missingPhoneNumberString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            case \"e/\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                Optional\u003cString\u003e missingEmailString \u003d Optional.of(\"Insert email here!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                return missingEmailString;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            case \"nok/\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                Optional\u003cString\u003e missingNokString \u003d Optional.of(\"Insert NOK details here!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                return missingNokString;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            case (\"temp/\"):"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                Optional\u003cString\u003e missingTemperatureString \u003d Optional.of(\"Insert temperature here!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                return missingTemperatureString;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            case (\"att/\"):"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                Optional\u003cString\u003e missingAttendanceString \u003d Optional.of(\"Present\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                return missingAttendanceString;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Optional\u003cString\u003e getSingleValue(Prefix prefix) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (values.size() \u003e 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new ParseException(String.format(NOT_SINGULAR, prefix.getPrefix()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(0));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * If value does not exist, returns null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Optional\u003cString\u003e getValueOptional(Prefix prefix) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 19,
      "TheElectricBlender": 24,
      "-": 59,
      "tingalinga": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Prefix PREFIX_NOK \u003d new Prefix(\"nok/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final Prefix PREFIX_TEMPERATURE \u003d new Prefix(\"temp/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final Prefix PREFIX_ATTENDANCE \u003d new Prefix(\"att/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final Prefix PREFIX_CONTENT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /* Assessment Prefixes */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final Prefix PREFIX_ADD \u003d new Prefix(\"add\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final Prefix PREFIX_ASSESSMENT_DESCRIPTION \u003d new Prefix(\"desc/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final Prefix PREFIX_ASSESSMENT_TYPE \u003d new Prefix(\"type/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final Prefix PREFIX_ASSESSMENT_DATE \u003d new Prefix(\"date/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /* Event Prefixes */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Prefix PREFIX_EVENT_NAME \u003d new Prefix(\"eventName/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Prefix PREFIX_START_DATETIME \u003d new Prefix(\"startDateTime/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Prefix PREFIX_END_DATETIME \u003d new Prefix(\"endDateTime/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Prefix PREFIX_VIEW_DATE \u003d new Prefix(\"targetDate/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Prefix PREFIX_VIEW \u003d new Prefix(\"view\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Prefix PREFIX_RECUR \u003d new Prefix(\"recur/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Prefix PREFIX_COLOR \u003d new Prefix(\"color/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Prefix PREFIX_GET_INDEX \u003d new Prefix(\"index/\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Prefix PREFIX_VIEW_MODE \u003d new Prefix(\"scheduleMode/\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Prefix PREFIX_DELETE \u003d new Prefix(\"delete\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 2,
      "Yuanyu97": 3,
      "TheElectricBlender": 13,
      "-": 16,
      "tingalinga": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEMPERATURE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        PREFIX_ATTENDANCE, PREFIX_TEMPERATURE, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (argMultimap.getValueOptional(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            editStudentDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (argMultimap.getValueOptional(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            editStudentDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (argMultimap.getValueOptional(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            editStudentDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (argMultimap.getValueOptional(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            editStudentDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (argMultimap.getValueOptional(PREFIX_TEMPERATURE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            editStudentDescriptor.setTemperature(ParserUtil.parseTemperature(argMultimap.getValue(PREFIX_TEMPERATURE)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (argMultimap.getValueOptional(PREFIX_ATTENDANCE).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            editStudentDescriptor.setAttendance(ParserUtil.parseAttendance(argMultimap.getValue(PREFIX_ATTENDANCE)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editStudentDescriptor::setTags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!editStudentDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return new EditCommand(index, editStudentDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 16,
      "TheElectricBlender": 9,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EventCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EVENT_DATETIME_RANGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.util.EventUtil.makeUniqueIdentifier;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.util.EventUtil.validateDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATETIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GET_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECUR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATETIME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VIEW;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VIEW_DATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VIEW_MODE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseColorCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseEventName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseLocalDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseRecurrenceType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import jfxtras.icalendarfx.properties.component.descriptive.Categories;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import jfxtras.icalendarfx.properties.component.recurrence.RecurrenceRule;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.logic.commands.event.EventAddCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.logic.commands.event.EventCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Parses input arguments and creates a new event command object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class EventCommandParser implements Parser\u003cEventCommand\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EventCommandParser.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AcademicsCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * and returns an EventCommand object for execution."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                PREFIX_EVENT_NAME,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                PREFIX_START_DATETIME,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                PREFIX_END_DATETIME,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                PREFIX_VIEW,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                PREFIX_COLOR,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                PREFIX_RECUR,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                PREFIX_GET_INDEX,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                PREFIX_VIEW_MODE,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                PREFIX_VIEW_DATE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        boolean isEdit \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            if (!preamble.isBlank()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                index \u003d ParserUtil.parseIndex(preamble);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                isEdit \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            logger.info(\"Parser unable to parse preamble index.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new ParseException(\"LOL\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        /*if (argMultimap.getValue(PREFIX_VIEW).isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return viewCommand(argMultimap);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_DELETE).isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return deleteCommand(argMultimap);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_GET_INDEX).isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return indexOfCommand(argMultimap);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else if (isEdit) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return editCommand(index, argMultimap);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else {*/"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return addCommand(argMultimap);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Adds the given assessment details to academic report."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EventAddCommand addCommand(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EVENT_NAME, PREFIX_START_DATETIME, PREFIX_END_DATETIME,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                PREFIX_RECUR, PREFIX_COLOR) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EventAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String eventName \u003d argMultimap.getValue(PREFIX_EVENT_NAME).orElse(\"\").trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String startDateTimeString \u003d argMultimap.getValue(PREFIX_START_DATETIME).orElse(\"\").trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String endDateTimeString \u003d argMultimap.getValue(PREFIX_END_DATETIME).orElse(\"\").trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String recurType \u003d argMultimap.getValue(PREFIX_RECUR).orElse(\"\").trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String colorNumber \u003d argMultimap.getValue(PREFIX_COLOR).orElse(\"\").trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (eventName.isBlank() || startDateTimeString.isBlank() || endDateTimeString.isBlank() || recurType.isBlank()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                || colorNumber.isBlank()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EventAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        eventName \u003d parseEventName(eventName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        LocalDateTime startDateTime \u003d parseLocalDateTime(startDateTimeString);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        LocalDateTime endDateTime \u003d parseLocalDateTime(endDateTimeString);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        RecurrenceRule recurrenceRule \u003d parseRecurrenceType(recurType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        List\u003cCategories\u003e colorCategory \u003d parseColorCode(colorNumber);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String uniqueIdentifier \u003d makeUniqueIdentifier(eventName, startDateTimeString, endDateTimeString);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!validateDateTime(startDateTime, endDateTime)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_EVENT_DATETIME_RANGE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        VEvent vEvent \u003d new VEvent().withSummary(eventName).withDateTimeStart(startDateTime)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                .withDateTimeEnd(endDateTime).withRecurrenceRule(recurrenceRule).withCategories(colorCategory)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                .withUniqueIdentifier(uniqueIdentifier);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return new EventAddCommand(vEvent);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    T parse(String userInput) throws ParseException, CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "tingalinga": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COLOR_STRING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECURRENCE_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.util.EventUtil.BAD_DATE_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.util.EventUtil.DAILY_RECUR_RULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.util.EventUtil.NO_RECUR_RULE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.util.EventUtil.WEEKLY_RECUR_RULE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.util.EventUtil.dateTimeToLocalDateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import jfxtras.icalendarfx.properties.component.descriptive.Categories;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import jfxtras.icalendarfx.properties.component.recurrence.RecurrenceRule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.RecurrenceType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.NextOfKin;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Temperature;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Parses a {@code String temperature} into an {@code Temperature}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws ParseException if the given {@code temperature} is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static Temperature parseTemperature(String temperature) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(temperature);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String trimmedTemperature \u003d temperature.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (!Temperature.isValidTemperatureFirst(trimmedTemperature)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new ParseException(Temperature.MESSAGE_CONSTRAINTS_1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (!Temperature.isValidTemperatureSecond(trimmedTemperature)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new ParseException(Temperature.MESSAGE_CONSTRAINTS_2);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return new Temperature(trimmedTemperature);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Parses a {@code String attendance} into an {@code Attendance}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws ParseException if the given {@code attendance} is invalid."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static Attendance parseAttendance(String attendance) throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(attendance);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String trimmedAttendance \u003d attendance.trim();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (!Attendance.isValidAttendance(trimmedAttendance)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new ParseException(Attendance.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return new Attendance(trimmedAttendance);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Parses a {@code String nok} into an {@code Nok}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @throws ParseException if the given {@code Nok} is invalid."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static NextOfKin parseNok(String nok) throws ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(nok);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String trimmedNok \u003d nok.trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        boolean bool \u003d NextOfKin.isValidNok(trimmedNok);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        System.out.println(bool);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!NextOfKin.isValidNok(trimmedNok)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new ParseException(NextOfKin.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return new NextOfKin(trimmedNok);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Parses a {@code String eventName} into a {@code eventName}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static String parseEventName(String eventName) throws ParseException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return eventName.trim();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Parses {@code String localDateTimeString} into a {@code LocalDateTime}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static LocalDateTime parseLocalDateTime(String localDateTimeString) throws ParseException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        LocalDateTime result;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            result \u003d LocalDateTime.parse(localDateTimeString);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new ParseException(BAD_DATE_FORMAT, e);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Parses {@code String localDateString} into a {@code LocalDate}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static LocalDateTime parseLocalDate(String localDateString) throws ParseException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            LocalDateTime targetDateTime \u003d dateTimeToLocalDateTimeFormatter(localDateString);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return targetDateTime;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Parses {@code String recurrenceTypeString} into a {@code RecurrenceType}."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static RecurrenceRule parseRecurrenceType(String recurrenceTypeString) throws ParseException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!validateRecurType(recurrenceTypeString)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_RECURRENCE_TYPE);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        RecurrenceRule result;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            result \u003d stringToRecurrenceRuleMapper(recurrenceTypeString);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } catch (IllegalValueException ex) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new ParseException(ex.getMessage(), ex);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Validates if recur type is valid"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static boolean validateRecurType(String recurTypeString) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (recurTypeString.equalsIgnoreCase(RecurrenceType.WEEKLY.name())) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else if (recurTypeString.equalsIgnoreCase(RecurrenceType.DAILY.name())) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else if (recurTypeString.equalsIgnoreCase(RecurrenceType.NONE.name())) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Maps recurrence string into RecurrenceRule class"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static RecurrenceRule stringToRecurrenceRuleMapper(String recurrenceString) throws IllegalValueException {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (recurrenceString.equalsIgnoreCase(\"weekly\")) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return RecurrenceRule.parse(WEEKLY_RECUR_RULE);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else if (recurrenceString.equalsIgnoreCase(\"daily\")) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return RecurrenceRule.parse(DAILY_RECUR_RULE);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else if (recurrenceString.equalsIgnoreCase(\"none\")) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return RecurrenceRule.parse(NO_RECUR_RULE);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new IllegalValueException(\"recurrence type is  invalid. Input passed: \" + recurrenceString);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Parses {@code String colorCode} into a {@code colorCategoryList}."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param colorCode"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static ArrayList\u003cCategories\u003e parseColorCode(String colorCode) throws ParseException {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!validateColorCode(colorCode)) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_COLOR_STRING);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String colorCategoryString \u003d \"group\" + (Integer.parseInt(colorCode) \u003c 10 ? \"0\" : \"\") + colorCode;;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Categories colorCategory \u003d new Categories(colorCategoryString);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        ArrayList\u003cCategories\u003e colorCategoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        colorCategoryList.add(colorCategory);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return colorCategoryList;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Validates if color code is valid"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * valid from 0 to 23 inclusive"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static boolean validateColorCode(String colorCode) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        // to check if the color code is in range"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            Integer colorNumberInt \u003d Integer.parseInt(colorCode);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            boolean result \u003d colorNumberInt \u003c\u003d 23 \u0026\u0026 colorNumberInt \u003e\u003d 0;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 35,
      "TheElectricBlender": 150,
      "-": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Parses input arguments and creates a new {@code RemarkCommand} object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code RemarkCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * and returns a {@code RemarkCommand} object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REMARK);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return new RemarkCommand(index, new Remark(remark));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 37,
      "TheElectricBlender": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TeaPetParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.logic.commands.AcademicsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.logic.commands.RefreshCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.logic.commands.admin.AdminCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.logic.commands.event.EventCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.notes.NotesAddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.notes.NotesDeleteCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.notes.NotesExportCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.notes.NotesFilterCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.studentdisplay.DefaultStudentDisplayCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.studentdisplay.DetailedStudentDisplayCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.parser.notes.NotesAddCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.parser.notes.NotesDeleteCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.parser.notes.NotesFilterCommandParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class TeaPetParser {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(TeaPetParser.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        case RemarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return new RemarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        case RefreshCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return new RefreshCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        case NotesAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            return new NotesAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        case NotesDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            return new NotesDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        case NotesExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            return new NotesExportCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        case NotesFilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            return new NotesFilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case AcademicsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return new AcademicsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        case DetailedStudentDisplayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            return new DetailedStudentDisplayCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        case AdminCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return new AdminCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        case DefaultStudentDisplayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            return new DefaultStudentDisplayCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        case EventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return new EventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            logger.info(\"unknown input\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 28,
      "Yuanyu97": 7,
      "TheElectricBlender": 12,
      "-": 71,
      "tingalinga": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/notes/NotesAddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.logic.parser.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.notes.NotesAddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * Representing a Parser for NotesCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesAddCommandParser implements Parser\u003cNotesAddCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Parsing of input arguments"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @return a NotesCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @throws ParseException user input is in invalid format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public NotesAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_CONTENT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME) || !arePrefixesPresent(argMultimap, PREFIX_CONTENT)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NotesAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        String name \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        String content \u003d argMultimap.getValue(PREFIX_CONTENT).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return new NotesAddCommand(name, content);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jerrenss": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/notes/NotesDeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.logic.parser.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.notes.NotesDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * Represents a Parser for NotesDeleteCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesDeleteCommandParser implements Parser\u003cNotesDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NotesDeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * and returns a NotesDeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public NotesDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            return new NotesDeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, NotesDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/notes/NotesFilterCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.logic.parser.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.commands.notes.NotesFilterCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.NotesContainKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " *  Represents a Parser for NotesFilterCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesFilterCommandParser implements Parser\u003cNotesFilterCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Parses the given arguments in the context of NotesFilterCommand and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * returns a NotesFilterCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public NotesFilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                    NotesFilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return new NotesFilterCommand(new NotesContainKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Duplicates are not allowed (by .isSameStudent comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final UniqueStudentList students;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Creates an AddressBook using the Students in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Replaces the contents of the student list with {@code students}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.students.setStudents(students);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        setStudents(newData.getStudentList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    //// student-level operations"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return students.contains(student);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Adds a student to the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * The student must not already exist in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void addStudent(Student p) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        students.add(p);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Replaces the given student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(editedStudent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        students.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void removeStudent(Student key) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        students.remove(key);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return students.asUnmodifiableObservableList().size() + \" students\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u0026\u0026 students.equals(((AddressBook) other).students));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return students.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 33,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Assessment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.ReadOnlyAcademics;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.ReadOnlyAdmin;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.EventScheduleView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.ReadOnlyEvents;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.ReadOnlyVEvents;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.ReadOnlyNotes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    Predicate\u003cStudent\u003e PREDICATE_SHOW_ALL_STUDENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    Predicate\u003cAssessment\u003e PREDICATE_SHOW_ALL_ASSESSMENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    Predicate\u003cDate\u003e PREDICATE_SHOW_ALL_DATES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    Predicate\u003cNotes\u003e PREDICATE_SHOW_ALL_NOTES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ADDRESS BOOK START \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    boolean hasStudent(Student student);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Deletes the given student."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * The student must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    void deleteStudent(Student target);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Adds the given student."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * {@code student} must not already exist in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    void addStudent(Student student);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Replaces the given student {@code target} with {@code editedStudent}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    void setStudent(Student target, Student editedStudent);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /** Returns an unmodifiable view of the filtered student list */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Updates the filter of the filtered student list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ADDRESS BOOK END \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ACADEMICS START \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the user prefs\u0027 academics file path."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    Path getAcademicsFilePath();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Sets the user prefs\u0027 academics file path."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    void setAcademicsFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    void setAcademics(ReadOnlyAcademics academics);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /** Returns the Academics */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ReadOnlyAcademics getAcademics();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns true if an assessment with the same identity as {@code assessment} exists in the Academics"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * record."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    boolean hasAssessment(Assessment assessment);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the assessment that has been deleted based on the index."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    void deleteAssessment(Assessment target);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Adds the given assessment. {@code assessment} must not exist in the assessment list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    void addAssessment(Assessment assessment);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Replaces the assessment at the specified index."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    void setAssessment(Assessment target, Assessment assessment);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /** Returns an unmodifiable view of the filtered academics list */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ObservableList\u003cAssessment\u003e getFilteredAcademicsList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Updates the filter of the filtered academics list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    void updateFilteredAcademicsList(Predicate\u003cAssessment\u003e predicate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ACADEMICS END \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ADMIN START \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the user prefs\u0027 admin file path."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    Path getAdminFilePath();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Sets the user prefs\u0027 admin file path."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    void setAdminFilePath(Path adminBookFilePath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Replaces admin data with the data in {@code admin}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    void setAdmin(ReadOnlyAdmin admin);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /** Returns the Admin */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ReadOnlyAdmin getAdmin();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns true if an date with the same identity as {@code date} exists in the admin"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * record."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    boolean hasDate(Date date);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the date that has been deleted based on the index."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    void deleteDate(Date target);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Adds the given date. {@code date} must not exist in the date list."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    void addDate(Date date);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Replaces the date at the specified index."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    void setDate(Date target, Date date);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered date list */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ObservableList\u003cDate\u003e getFilteredDateList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Updates the filter of the filtered date list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    void updateFilteredDateList(Predicate\u003cDate\u003e predicate);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ADMIN END \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EVENTS START \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    boolean hasVEvent(VEvent vEvent);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    void addVEvent(VEvent vEvent);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    void delete(Index index);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    void setVEvent(Index index, VEvent vEvent);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    VEvent getVEvent(Index index);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    ObservableList\u003cVEvent\u003e getVEvents();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    void setEventHistory(ReadOnlyEvents events);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    void setEventHistory(Path eventHistoryFilePath);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    ReadOnlyEvents getEventHistory();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    ReadOnlyVEvents getVEventHistory();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    void setEventScheduleLocalDateTime(LocalDateTime localDateTime);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    String getEventSchedulePref();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    LocalDateTime getEventScheduleLocalDateTime();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    EventScheduleView getEventScheduleView();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    void setEventScheduleView(EventScheduleView eventScheduleView);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EVENTS END \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d NOTES START \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Returns the user prefs\u0027 notes file path."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    Path getNotesFilePath();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Sets the user prefs\u0027 notes file path."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    void setNotesFilePath(Path notesFilePath);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    void setNotesManager(ReadOnlyNotes notes);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /** Returns the NotesManager */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    ReadOnlyNotes getNotesManager();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Returns true if a note with the same identity as {@code note} exists in the Notes"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * record."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    boolean hasNote(Notes note);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Returns the note that has been deleted based on the index."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    void deleteNote(Notes toBeDeleted);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Adds the given note. {@code note} must not exist in the notes list."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    void addNote(Notes note);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Replaces the note at the specified index."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    void setNote(Notes toBeChanged, Notes editedNote);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /** Returns an unmodifiable view of the filtered notes list */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    ObservableList\u003cNotes\u003e getFilteredNotesList();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Updates the filter of the filtered academics list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    void updateFilteredNotesList(Predicate\u003cNotes\u003e predicate);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d NOTES END \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 46,
      "Yuanyu97": 54,
      "TheElectricBlender": 61,
      "-": 76,
      "tingalinga": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Academics;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Assessment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.ReadOnlyAcademics;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Admin;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.ReadOnlyAdmin;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.EventHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.EventSchedulePrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.EventScheduleView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.ReadOnlyEvents;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.ReadOnlyVEvents;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.NotesManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.ReadOnlyNotes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final FilteredList\u003cStudent\u003e filteredStudents;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private final Academics academics;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private final FilteredList\u003cAssessment\u003e filteredAssessments;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private final Admin admin;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private final FilteredList\u003cDate\u003e filteredDates;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final EventHistory eventHistory;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final EventSchedulePrefs eventSchedulePrefs;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final NotesManager notesManager;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final FilteredList\u003cNotes\u003e filteredNotes;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                        ReadOnlyAcademics academics,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        ReadOnlyAdmin admin,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                        ReadOnlyNotes notes,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        ReadOnlyEvents events) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireAllNonNull(addressBook, academics, admin, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.academics \u003d new Academics(academics);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.admin \u003d new Admin(admin);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        filteredStudents \u003d new FilteredList\u003c\u003e(this.addressBook.getStudentList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        filteredAssessments \u003d new FilteredList\u003c\u003e(this.academics.getAcademicsList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        filteredDates \u003d new FilteredList\u003c\u003e(this.admin.getDateList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.notesManager \u003d new NotesManager(notes);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.eventHistory \u003d new EventHistory(events);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.eventSchedulePrefs \u003d new EventSchedulePrefs(EventScheduleView.WEEKLY, LocalDateTime.now());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        filteredNotes \u003d new FilteredList\u003c\u003e(this.notesManager.getNotesList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this(new AddressBook(), new Academics(), new Admin(), new NotesManager(), new UserPrefs(), new EventHistory());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook START \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return addressBook.hasStudent(student);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        addressBook.removeStudent(target);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        addressBook.addStudent(student);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        addressBook.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Student} backed by the internal list of"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return filteredStudents;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        filteredStudents.setPredicate(predicate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook END \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Academics START \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Path getAcademicsFilePath() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return userPrefs.getAcademicsFilePath();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void setAcademicsFilePath(Path academicsFilePath) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        requireNonNull(academicsFilePath);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        userPrefs.setAcademicsFilePath(academicsFilePath);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void setAcademics(ReadOnlyAcademics academics) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.academics.resetData(academics);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public ReadOnlyAcademics getAcademics() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return academics;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public boolean hasAssessment(Assessment assessment) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        requireNonNull(assessment);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return academics.hasAssessment(assessment);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void deleteAssessment(Assessment target) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        academics.removeAssessment(target);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void addAssessment(Assessment assessment) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        academics.addAssessment(assessment);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        updateFilteredAcademicsList(PREDICATE_SHOW_ALL_ASSESSMENTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void setAssessment(Assessment target, Assessment editedAssessment) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        requireAllNonNull(target, editedAssessment);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        academics.setAssessment(target, editedAssessment);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public ObservableList\u003cAssessment\u003e getFilteredAcademicsList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return filteredAssessments;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void updateFilteredAcademicsList(Predicate\u003cAssessment\u003e predicate) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        filteredAssessments.setPredicate(predicate);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Academics END \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes START \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public Path getNotesFilePath() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return userPrefs.getNotesFilePath();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void setNotesFilePath(Path notesFilePath) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireNonNull(notesFilePath);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        userPrefs.setNotesFilePath(notesFilePath);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void setNotesManager(ReadOnlyNotes notes) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.notesManager.resetData(notes);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public ReadOnlyNotes getNotesManager() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return notesManager;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public boolean hasNote(Notes note) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return notesManager.hasNote(note);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void deleteNote(Notes target) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        notesManager.removeNote(target);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void addNote(Notes note) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        notesManager.addNote(note);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        updateFilteredNotesList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void setNote(Notes toBeChanged, Notes editedNote) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireAllNonNull(toBeChanged, editedNote);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        notesManager.setNote(toBeChanged, editedNote);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public ObservableList\u003cNotes\u003e getFilteredNotesList() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return filteredNotes;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void updateFilteredNotesList(Predicate\u003cNotes\u003e predicate) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        filteredNotes.setPredicate(predicate);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setEventHistory(Path eventHistoryFilePath) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        userPrefs.setEventHistoryFilePath(eventHistoryFilePath);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setEventHistory(ReadOnlyEvents events) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.eventHistory.resetDataWithReadOnlyEvents(events);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public ReadOnlyVEvents getVEventHistory() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return eventHistory;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public ReadOnlyEvents getEventHistory() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return eventHistory;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public LocalDateTime getEventScheduleLocalDateTime() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return eventSchedulePrefs.getLocalDateTime();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setEventScheduleLocalDateTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.eventSchedulePrefs.setLocalDateTime(localDateTime);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public String getEventSchedulePref() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return eventSchedulePrefs.toString();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EventScheduleView getEventScheduleView() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return eventSchedulePrefs.getEventScheduleView();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setEventScheduleView(EventScheduleView eventScheduleView) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        eventSchedulePrefs.setEventScheduleView(eventScheduleView);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public boolean hasVEvent(VEvent vEvent) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return eventHistory.contains(vEvent);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void addVEvent(VEvent vEvent) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        eventHistory.addVEvent(vEvent);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void delete(Index index) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        eventHistory.deleteVEvent(index);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setVEvent(Index index, VEvent vEvent) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        eventHistory.setVEvent(index, vEvent);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public VEvent getVEvent(Index index) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return eventHistory.getVEvent(index);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public ObservableList\u003cVEvent\u003e getVEvents() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return eventHistory.getVEvents();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                \u0026\u0026 filteredStudents.equals(other.filteredStudents)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                \u0026\u0026 academics.equals(other.academics)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                \u0026\u0026 filteredAssessments.equals(other.filteredAssessments)"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u0026\u0026 eventHistory.equals(other.eventHistory)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                \u0026\u0026 filteredNotes.equals(other.filteredNotes);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Academics END \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Admin START \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Path getAdminFilePath() {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return userPrefs.getAdminFilePath();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void setAdminFilePath(Path adminBookFilePath) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.admin.resetData(admin);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void setAdmin(ReadOnlyAdmin admin) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.admin.resetData(admin);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public ReadOnlyAdmin getAdmin() {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return admin;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean hasDate(Date date) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return admin.hasDate(date);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void deleteDate(Date target) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        admin.removeDate(target);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void addDate(Date date) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        admin.addDate(date);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        updateFilteredDateList(PREDICATE_SHOW_ALL_DATES);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void setDate(Date target, Date editedDate) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireAllNonNull(target, editedDate);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        admin.setDate(target, editedDate);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Date} backed by the internal list of"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * {@code versionedDate}"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public ObservableList\u003cDate\u003e getFilteredDateList() {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return filteredDates;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void updateFilteredDateList(Predicate\u003cDate\u003e predicate) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        filteredDates.setPredicate(predicate);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 69,
      "Yuanyu97": 71,
      "TheElectricBlender": 104,
      "-": 130,
      "tingalinga": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns an unmodifiable view of the students list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * This list will not contain any duplicate students."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 4,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    Path getAdminFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    Path getAcademicsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    Path getNotesFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 2,
      "Yuanyu97": 2,
      "-": 16,
      "tingalinga": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private Path academicsFilePath \u003d Paths.get(\"data\" , \"academics.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Path adminFilePath \u003d Paths.get(\"data\", \"admin.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private Path eventHistoryFilePath \u003d Paths.get(\"data\", \"events.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private Path notesFilePath \u003d Paths.get(\"data\", \"notes.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        setAdminFilePath(newUserPrefs.getAdminFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        setAcademicsFilePath(newUserPrefs.getAcademicsFilePath());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Path getAcademicsFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return academicsFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void setAcademicsFilePath(Path academicsFilePath) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        requireNonNull(academicsFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.academicsFilePath \u003d academicsFilePath;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Path getAdminFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return adminFilePath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void setAdminFilePath(Path adminFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(adminFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.adminFilePath \u003d adminFilePath;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public Path getEventHistoryFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return eventHistoryFilePath;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setEventHistoryFilePath(Path eventHistoryFilePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.eventHistoryFilePath \u003d eventHistoryFilePath;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public Path getNotesFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return notesFilePath;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void setNotesFilePath(Path notesFilePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireNonNull(notesFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.notesFilePath \u003d notesFilePath;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u0026\u0026 academicsFilePath.equals(o.academicsFilePath)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u0026\u0026 adminFilePath.equals(o.adminFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, academicsFilePath, adminFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        sb.append(\"\\nLocal data addressbook file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        sb.append(\"\\nLocal data ad,om file location : \" + adminFilePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        sb.append(\"\\nLocal data academics file location : \" + academicsFilePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        sb.append(\"\\nAcademics data file location : \" + academicsFilePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        sb.append(\"\\nNotes data file location : \" + notesFilePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 12,
      "Yuanyu97": 18,
      "TheElectricBlender": 10,
      "-": 85,
      "tingalinga": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/academics/Academics.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "package seedu.address.model.academics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Represents the save academic report of the class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class Academics implements ReadOnlyAcademics {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private final UniqueAssessmentList assessments;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        assessments \u003d new UniqueAssessmentList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Academics() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Creates a list of SavedAssessments using the assessments in {@code toBeCopied}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param toBeCopied list of assessments."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Academics(ReadOnlyAcademics toBeCopied) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Replaces the contents of the academic assessments with {@Code Assessments}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * {@code Assessments} must not contain duplicate assessments."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param assessments academic list of assessments."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void setAssessments(List\u003cAssessment\u003e assessments) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.assessments.setAssessments(assessments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Resets the existing data of this {@code Academics} with {@code newData}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void resetData(ReadOnlyAcademics newData) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        setAssessments(newData.getAcademicsList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns true if an assessment with the same identity as {@code assessment} exists in the academics list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public boolean hasAssessment(Assessment assessment) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        requireNonNull(assessment);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return assessments.contains(assessment);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Adds an assessment to the list of current assessments."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void addAssessment(Assessment toAdd) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        assessments.add(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Replaces the given Assessment {@code target} in the list with {@code editedAssessment}. {@code"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * target} must exist in saved academics. The Assessment identity of {@code editedAssessment} must"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * not be the same as another existing Assessment in the saved academics."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void setAssessment(Assessment target, Assessment editedAssessment) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        requireNonNull(editedAssessment);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        assessments.setAssessment(target, editedAssessment);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Removes {@code key} from this {@code Academics}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * {@code key} must exist in the assessment list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void removeAssessment(Assessment key) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        assessments.remove(key);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return assessments.asUnmodifiableObservableList().size() + \" students\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public ObservableList\u003cAssessment\u003e getAcademicsList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return assessments.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                || (other instanceof Academics // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                \u0026\u0026 assessments.equals(((Academics) other).assessments));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return assessments.hashCode();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 12,
      "tingalinga": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/academics/Assessment.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "package seedu.address.model.academics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Represents an Assessment given to the class to complete."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public abstract class Assessment {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    // Assessment properties"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    // Tracking submissions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private List\u003cSubmission\u003e submissionTracker \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Every entry field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param description description of assessment."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param date date of assessment."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Assessment(String description, String date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the description of the assessment."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return description of assessment."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the date of the assessment."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return date of assessment."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String getDateString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the submission tracker of the assessment."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return submission tracker of assessment."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public List\u003cSubmission\u003e getSubmissionTracker() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return submissionTracker;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Set the submission of each student to not submitted and unmarked."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param students list of students assigned with the assessment."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (Student student: students) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            submissionTracker.add(new Submission(student.getName().fullName));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Edit the description of the assessment."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param newDescription new description of the assessment."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void changeDescription(String newDescription) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.description \u003d newDescription;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Submits the submission of the student."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param studentName student submitting his/her assessment."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void setSingleSubmitted(String studentName) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (Submission submission: submissionTracker) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            if (submission.getStudentName().equals(studentName)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                submission.markAsSubmitted();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Submits multiple students\u0027 assessments."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param studentList list of students who have completed their assessment."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void setMultipleSubmitted(String ...studentList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (String studentName: studentList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            for (Submission submission: submissionTracker) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                if (submission.getStudentName().equals(studentName)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                    submission.markAsSubmitted();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Marks student\u0027s submission and assigns a score to the student\u0027s submission."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param student student submitting his/her assessment."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param score score given to the student\u0027s submission."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void mark(String student, int score) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (Submission submission: submissionTracker) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            if (submission.getStudentName().equals(student)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                submission.markAssessment(score);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns a list of students who have yet to submit their assessment."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public ArrayList\u003cString\u003e checkUnsubmittedStudents() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        ArrayList\u003cString\u003e unsubmitted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (Submission submission: submissionTracker) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            if (!submission.hasSubmitted()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                unsubmitted.add(submission.getStudentName());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return unsubmitted;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the number of students who have yet to submit their assessment."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public int noOfUnsubmittedStudents() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        int unsubmitted \u003d 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (Submission submission: submissionTracker) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            if (!submission.hasSubmitted()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                unsubmitted++;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return unsubmitted;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the number of students who have submitted their assessment."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public int noOfSubmittedStudents() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        int submitted \u003d 0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (Submission submission: submissionTracker) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            if (submission.hasSubmitted()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                submitted++;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return submitted;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns a list of students whose submissions have not been marked."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public ArrayList\u003cString\u003e checkUnmarkedSubmissions() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        ArrayList\u003cString\u003e unmarked \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (Submission submission: submissionTracker) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            if (!submission.isMarked()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                unmarked.add(submission.getStudentName());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return unmarked;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the number of students whose submissions have not been marked."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public int noOfUnmarkedSubmissions() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        int unmarked \u003d 0;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (Submission submission: submissionTracker) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            if (!submission.isMarked()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                unmarked++;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return unmarked;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns true if both assessments have the same description."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public boolean isSameAssessment(Assessment otherAssessment) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (otherAssessment \u003d\u003d this) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return otherAssessment.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the average score scored by the class for this assessment."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public int averageScore() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        int totalScore \u003d 0;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (Submission submission: submissionTracker) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            totalScore +\u003d submission.getScore();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return totalScore / submissionTracker.size();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the median score scored by the class for this assessment."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public int medianScore() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        ArrayList\u003cInteger\u003e scores \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (Submission submission: submissionTracker) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            scores.add(submission.getScore());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Collections.sort(scores);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        int median \u003d (scores.size() % 2) \u003d\u003d 0 ? scores.get(scores.size() / 2) : scores.get((scores.size() / 2) + 1);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return median;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return \"Assessment: \" + this.description + \"\\n\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                + \"Submitted: \" + noOfSubmittedStudents()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                + \"Unsubmitted: \" + noOfUnsubmittedStudents();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 12,
      "tingalinga": 207
    }
  },
  {
    "path": "src/main/java/seedu/address/model/academics/DescriptionContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "package seedu.address.model.academics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Tests that an {@code Assessment}\u0027s {@code description} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cAssessment\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public boolean test(Assessment assessment) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(assessment.getDescription(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/academics/Exam.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "package seedu.address.model.academics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Represents an Exam assigned to the class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class Exam extends Assessment {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private ObservableList\u003cStudent\u003e students;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private List\u003cSubmission\u003e submissionTracker \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Every entry field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param description description of exam."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param date date of examination."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Exam(String description, String date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        super(description, date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Every entry field must be present and not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param description description of exam."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param date date of examination."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Exam(String description, LocalDate date) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        super(description, date.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Sets the submission tracker to the new submission tracker."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param newSubmissionTracker new submission tracker."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void setSubmissionTracker(List\u003cSubmission\u003e newSubmissionTracker) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (Submission submission: newSubmissionTracker) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            this.submissionTracker.add(submission);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            submissionTracker.add(submission);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the type of assessment."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return String assessment type"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return \"exam\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the date of exam."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return LocalDate exam date."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public LocalDate getExamDate() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the deadline of homework as a string."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return String deadline of homework."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String getDateString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Edit the date of the exam."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param examDate exam date."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void setExamDate(String examDate) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.date \u003d LocalDate.parse(examDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the number of students who have yet to submit their assessment."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public int noOfUnsubmittedStudents() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        int unsubmitted \u003d 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (Submission submission: submissionTracker) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            if (!submission.hasSubmitted()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                unsubmitted++;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return unsubmitted;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the number of students who have submitted their assessment."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public int noOfSubmittedStudents() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        int submitted \u003d 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (Submission submission: submissionTracker) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            if (submission.hasSubmitted()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                submitted++;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return submitted;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return \"Exam: \" + this.description + \"\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                + \"At: \" + this.date + \"\\n\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/academics/Homework.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "package seedu.address.model.academics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Represents a Homework assigned to the class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class Homework extends Assessment {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private ObservableList\u003cStudent\u003e students;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private List\u003cSubmission\u003e submissionTracker \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Every entry field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param description description of homework."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param date deadline of homework."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Homework(String description, String date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        super(description, date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Every entry field must be present and not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param description description of homework."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param date deadline of homework."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Homework(String description, LocalDate date) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        super(description, date.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Sets the submission tracker to the new submission tracker."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param newSubmissionTracker new submission tracker."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void setSubmissionTracker(List\u003cSubmission\u003e newSubmissionTracker) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (Submission submission: newSubmissionTracker) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            submissionTracker.add(submission);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the type of assessment."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return String assessment type"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return \"homework\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the deadline of homework."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return LocalDate deadline of homework."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public LocalDate getDeadline() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the deadline of homework as a string."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return String deadline of homework."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String getDateString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Edit the deadline of the homework."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param date homework deadline."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void setDeadline(String date) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the number of students who have yet to submit their assessment."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public int noOfUnsubmittedStudents() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        int unsubmitted \u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (Submission submission: submissionTracker) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            if (!submission.hasSubmitted()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                unsubmitted++;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return unsubmitted;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the number of students who have submitted their assessment."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public int noOfSubmittedStudents() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        int submitted \u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (Submission submission: submissionTracker) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            if (submission.hasSubmitted()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                submitted++;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return submitted;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return \"Homework: \" + this.description + \"\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                + \"Due by: \" + this.date + \"\\n\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/academics/ReadOnlyAcademics.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "package seedu.address.model.academics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public interface ReadOnlyAcademics {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns an unmodifiable view of the assessment list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * This list will not contain any duplicate assessment."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    ObservableList\u003cAssessment\u003e getAcademicsList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/academics/Submission.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "package seedu.address.model.academics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Represents a students submission for an assessment."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class Submission implements Comparable\u003cSubmission\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private String studentName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private boolean submitted;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private boolean marked;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private int score;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Submission(String studentName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.studentName \u003d studentName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.submitted \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.marked \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.score \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Submission(String studentName, boolean submitted, boolean marked, int score) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.studentName \u003d studentName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.submitted \u003d submitted;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.marked \u003d marked;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns student name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return String student name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String getStudentName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return studentName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns a boolean that indicates if assessment has been submitted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return boolean showing whether assessment is submitted by the student."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public boolean hasSubmitted() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return this.submitted;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns a boolean that indicates if assessment is marked."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return boolean showing whether assessment is marked."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public boolean isMarked() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return this.marked;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public int getScore() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return this.score;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Submits current assessment."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void markAsSubmitted() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.submitted \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Assigns a mark to the the assessment."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void markAssessment(int score) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.marked \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public int compareTo(Submission s) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 3,
      "tingalinga": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/academics/UniqueAssessmentList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "package seedu.address.model.academics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.exceptions.AssessmentNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.exceptions.DuplicateAssessmentException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * A list of assessments that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * A student is considered unique by comparing using {@code Assessment#isSameAssessment(Assessment)}. As such, adding"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * and updating of assessments uses Assessment#isSameAssessment(Assessment) for equality so as to ensure that the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * assessment being added or updated is unique in terms of identity in the UniqueAssessmentList. However, the removal"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * of an assessment uses Assessment#equals(Object) so as to ensure that the student with exactly the same fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * @see Assessment#isSameAssessment(Assessment)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class UniqueAssessmentList implements Iterable\u003cAssessment\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private final ObservableList\u003cAssessment\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private final ObservableList\u003cAssessment\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns true if the list contains an equivalent assessment as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public boolean contains(Assessment toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAssessment);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Adds an assessment to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * The assessment must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void add(Assessment toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new DuplicateAssessmentException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Replaces the assessment {@code target} in the list with {@code editedAssessment}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * The assessment identity of {@code editedAssessment} must not be the same as another existing assessment in"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void setAssessment(Assessment target, Assessment editedAssessment) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        requireAllNonNull(target, editedAssessment);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new AssessmentNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (!target.isSameAssessment(editedAssessment) \u0026\u0026 contains(editedAssessment)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new DuplicateAssessmentException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        internalList.set(index, editedAssessment);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Removes the equivalent assessment from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * The assessment must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void remove(Assessment toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new AssessmentNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void setAssessments(UniqueAssessmentList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Replaces the contents of this list with {@code assessments}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * {@code assessments} must not contain duplicate assessments."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void setAssessments(List\u003cAssessment\u003e assessments) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        requireAllNonNull(assessments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (!assessmentsAreUnique(assessments)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new DuplicateAssessmentException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        internalList.setAll(assessments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public ObservableList\u003cAssessment\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Iterator\u003cAssessment\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                || (other instanceof UniqueAssessmentList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueAssessmentList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns true if {@code students} contains only unique students."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private boolean assessmentsAreUnique(List\u003cAssessment\u003e assessments) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (int i \u003d 0; i \u003c assessments.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            for (int j \u003d i + 1; j \u003c assessments.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                if (assessments.get(i).isSameAssessment(assessments.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/academics/exceptions/AssessmentNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "package seedu.address.model.academics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Signals that the operation is unable to find the specified assessment."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class AssessmentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/academics/exceptions/DuplicateAssessmentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "package seedu.address.model.academics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Signals that the operation will result in duplicate Assessment (Assessment are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * have the same description name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class DuplicateAssessmentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public DuplicateAssessmentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        super(\"Operation would result in duplicate assessments\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/admin/Admin.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.model.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Wraps all data at the TeaPet level"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Duplicates are not allowed (by .isSameDate comparison)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class Admin implements ReadOnlyAdmin {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private final UniqueDateList dates;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        dates \u003d new UniqueDateList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Admin() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Creates an admin list using the dates in the {@code toBeCopied}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Admin(ReadOnlyAdmin toBeCopied) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Replaces the contents of the date list with {@code dates}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * {@code dates} must not contain duplicate dates."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void setDates(List\u003cDate\u003e dates) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.dates.setDates(dates);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Resets the existing data of this {@code Admin} with {@code newData}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void resetData(ReadOnlyAdmin newData) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        setDates(newData.getDateList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    //// admin-level operations"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns true if a date with the same identity as {@code date} exists in the admin list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean hasDate(Date date) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return dates.contains(date);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Adds a date to the admin list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void addDate(Date p) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        dates.add(p);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Replaces the given date {@code target} in the list with {@code editedDate}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * {@code target} must exist in the admin list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * The date identity of {@code editedDate} must not be the same as another existing date in"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * the admin list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void setDate(Date target, Date editedDate) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(editedDate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        dates.setDate(target, editedDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Removes {@code key} from this {@code Admin}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * {@code key} must exist in the admin list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void removeDate(Date key) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        dates.remove(key);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return dates.asUnmodifiableObservableList().size() + \" dates\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public ObservableList\u003cDate\u003e getDateList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return dates.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                || (other instanceof Admin // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u0026\u0026 dates.equals(((Admin) other).dates));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return dates.hashCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/model/admin/Date.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.model.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Represents a Date of the admin details of the class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            \"Date should be in YYYY-MM-DD format\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private List\u003cStudent\u003e students;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Every entry field must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param date description of assessment."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Date(LocalDate date, List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.students \u003d students;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the date of the admin detail."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @return date of admin detail;."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public List\u003cStudent\u003e getStudents() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return students;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns true if both dates have the same date."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * This defines a weaker notion of equality between two dates."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean isSameDate(Date otherDate) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (otherDate \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return otherDate !\u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u0026\u0026 otherDate.getDate().equals(this.getDate());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String fullDate \u003d date.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String studentString \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        for (Student student : students) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            studentString +\u003d \"Name: \";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            studentString +\u003d student.toString() + \" \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        studentString.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String dateString \u003d fullDate + \" \" + studentString;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        builder.append(dateString);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/admin/DateContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.model.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Tests that a {@code Date}\u0027s {@code Date} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class DateContainsKeywordsPredicate implements Predicate\u003cDate\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private final LocalDate thisDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public DateContainsKeywordsPredicate(LocalDate date) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        thisDate \u003d date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean test(Date date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return thisDate.equals(date.getDate());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                || (other instanceof DateContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u0026\u0026 thisDate.equals(((DateContainsKeywordsPredicate) other).thisDate)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/admin/ReadOnlyAdmin.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.model.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Unmodifiable view of an admin list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public interface ReadOnlyAdmin {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns an unmodifiable view of the admin list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * This list will not contain any duplicate dates."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    ObservableList\u003cDate\u003e getDateList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/admin/UniqueDateList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.model.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.exceptions.DateNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.exceptions.DuplicateDateException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * A list of dates that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * The UniqueDateList cannot be modified after it has been added to prevent unnecessary edits to the admin list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class UniqueDateList implements Iterable\u003cDate\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private final ObservableList\u003cDate\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private final ObservableList\u003cDate\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns true if the list contains an equivalent date as the given argument."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean contains(Date toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Adds a date to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * The date must not already exist in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void add(Date toAdd) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new DuplicateDateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Replaces the date {@code target} in the list with {@code editedDate}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * The date identity of {@code editedDate} must not be the same as another existing Date in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void setDate(Date target, Date editedDate) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireAllNonNull(target, editedDate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new DateNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (!target.isSameDate(editedDate) \u0026\u0026 contains(editedDate)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new DuplicateDateException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        internalList.set(index, editedDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Removes the equivalent date from the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * The date must exist in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void remove(Date toRemove) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new DateNotFoundException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void setDates(UniqueDateList replacement) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Replaces the contents of this list with {@code dates}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * {@code dates} must not contain duplicate dates."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void setDates(List\u003cDate\u003e dates) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireAllNonNull(dates);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (!datesAreUnique(dates)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new DuplicateDateException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        internalList.setAll(dates);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public ObservableList\u003cDate\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Iterator\u003cDate\u003e iterator() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                || (other instanceof UniqueDateList // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueDateList) other).internalList));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns true if {@code dates} contains only unique dates."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private boolean datesAreUnique(List\u003cDate\u003e dates) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        for (int i \u003d 0; i \u003c dates.size() - 1; i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            for (int j \u003d i + 1; j \u003c dates.size(); j++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                if (dates.get(i).isSameDate(dates.get(j))) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/model/admin/exceptions/DateNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.model.admin.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Signals that the operation is unable to find the specified date."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class DateNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/admin/exceptions/DuplicateDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.model.admin.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Signals that the operation will result in duplicate Dates (Dates are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * have the same date)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class DuplicateDateException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public DuplicateDateException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        super(\"Operation would result in duplicate dates\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MISSING_EVENT_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.util.EventUtil.validateDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Represents an event of the scheduler"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String COLOR_CATEGORY_VALIDATION_REGEX \u003d \"group[0-2][0-9]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String INVALID_COLOR_CATEGORY \u003d \"Invalid color category.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private String eventName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private String colorCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private String uniqueIdentifier;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private RecurrenceType recurrenceType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Event constructor"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param eventName represents the eventName"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param startDateTime represents the startDateTime"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param endDateTime represents the endDateTime"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param colorCode represents the color code of the event"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param uniqueIdentifier represents the uniqueid"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param recurrenceType represents the recurrence type daily none or weekly"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public Event(String eventName, LocalDateTime startDateTime, LocalDateTime endDateTime, String colorCode,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                 String uniqueIdentifier, RecurrenceType recurrenceType) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireAllNonNull(eventName, startDateTime, endDateTime, colorCode, uniqueIdentifier, recurrenceType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        checkArgument(validateDateTime(startDateTime, endDateTime));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        checkArgument(isValidEventName(eventName), MESSAGE_MISSING_EVENT_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        checkArgument(isValidColorCode(colorCode), INVALID_COLOR_CATEGORY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.colorCode \u003d colorCode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.uniqueIdentifier \u003d uniqueIdentifier;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.recurrenceType \u003d recurrenceType;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public Event() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Validates the event name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public boolean isValidEventName(String eventName) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (eventName.isBlank()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Validates the color codesss"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public boolean isValidColorCode(String colorCode) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!colorCode.matches(COLOR_CATEGORY_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public RecurrenceType getRecurrenceType() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return recurrenceType;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setRecurrenceType(RecurrenceType recurrenceType) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.recurrenceType \u003d recurrenceType;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public LocalDateTime getEndDateTime() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return endDateTime;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public String getColorCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return colorCode;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public String getEventName() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public String getUniqueIdentifier() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return uniqueIdentifier;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setColorCode(String colorCode) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.colorCode \u003d colorCode;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public LocalDateTime getStartDateTime() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setEventName(String eventName) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setStartTime(LocalDateTime startDateTime) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setUniqueIdentifier(String uniqueIdentifier) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.uniqueIdentifier \u003d uniqueIdentifier;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setEndTime(LocalDateTime endDateTime) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return otherEvent.getEventName().equals(getEventName())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u0026\u0026 otherEvent.getUniqueIdentifier().equals(getUniqueIdentifier())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u0026\u0026 otherEvent.getStartDateTime().equals(getStartDateTime())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u0026\u0026 otherEvent.getEndDateTime().equals(getEndDateTime())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u0026\u0026 otherEvent.getColorCode().equals(getColorCode())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u0026\u0026 otherEvent.getRecurrenceType().equals(getRecurrenceType());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return Objects.hash(eventName, startDateTime, endDateTime, colorCode, uniqueIdentifier, recurrenceType);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 144
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventHistory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.util.EventUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateVEventException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Event history stores the history of events and provides mappings from events to vevents."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class EventHistory extends EventUtil implements ReadOnlyEvents, ReadOnlyVEvents, Iterable\u003cVEvent\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final ObservableList\u003cVEvent\u003e vEvents \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final ObservableList\u003cVEvent\u003e vEventsUnmodifiableList \u003d FXCollections.unmodifiableObservableList(vEvents);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EventHistory(){}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Creates a new list of VEvents using readOnlyEvents in {@code readOnlyEvents}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EventHistory(ReadOnlyEvents readOnlyEvents) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        resetDataWithReadOnlyEvents(readOnlyEvents);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Creates a new list of VEvents using events in {@code events}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EventHistory(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        resetDataWithEvents(events);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Retruns all Events from VEvents observable list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public List\u003cEvent\u003e getEvents() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return vEventsToEventsMapper(this.vEvents);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Maps VEvents to events list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public List\u003cEvent\u003e vEventsToEventsMapper(List\u003cVEvent\u003e vEvents) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        ArrayList\u003cEvent\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        for (VEvent vEvent : vEvents) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            list.add(vEventToEventMapper(vEvent));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Maps events to list of VEvents"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public ArrayList\u003cVEvent\u003e eventsToVEventsMapper(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        ArrayList\u003cVEvent\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        for (Event e : events) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            VEvent vEvent \u003d eventToVEventMapper(e);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            list.add(vEvent);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Maps readOnlyEvents to list of VEvents"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public List\u003cVEvent\u003e readOnlyEventsToVEventsMapper(ReadOnlyEvents readOnlyEvents) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return eventsToVEventsMapper(readOnlyEvents.getEvents());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Resets the data of {@code EventHistory} with {@code data} that are read only"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void resetDataWithReadOnlyEvents(ReadOnlyEvents data) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        setVEvents(readOnlyEventsToVEventsMapper(data));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Resets the data of {@code EventHistory} with {@code data}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void resetDataWithEvents(List\u003cEvent\u003e data) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        setVEvents(eventsToVEventsMapper(data));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Sets the data of EventHistory"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setVEvents(List\u003cVEvent\u003e vEvents) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(vEvents);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!isVEventsUnique(vEvents)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new DuplicateVEventException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.vEvents.setAll(vEvents);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Checks if the vEvent list have all unique vEvent."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public boolean isVEventsUnique(List\u003cVEvent\u003e vEvents) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Set\u003cVEvent\u003e set \u003d new HashSet\u003cVEvent\u003e(vEvents);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        int listSize \u003d vEvents.size();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        int setSize \u003d set.size();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (setSize \u003c listSize) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Adds a new VEvnet to the VEvent list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void addVEvent(VEvent vEvent) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(vEvent);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (contains(vEvent)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new DuplicateVEventException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            vEvents.add(vEvent);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Deletes the VEvent at the {@code index} of the list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public VEvent deleteVEvent(Index index) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return vEvents.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns the VEvent object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public VEvent getVEvent(Index index) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return vEvents.get(index.getZeroBased());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Replaces the VEvent at {@param index}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setVEvent(Index index, VEvent vEvent) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        VEvent selectedVEvent \u003d vEvents.get(index.getZeroBased());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!isEqual(selectedVEvent, vEvent) \u0026\u0026 contains(vEvent)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new DuplicateVEventException();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            vEvents.set(index.getZeroBased(), vEvent);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns the unmodifiable list"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public ObservableList\u003cVEvent\u003e getVEvents() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this.vEventsUnmodifiableList;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns true if list contains the VEvent of {@code vEvent}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public boolean contains(VEvent vEventCheck) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return vEvents.stream().anyMatch(vEvent -\u003e isEqual(vEvent, vEventCheck));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns true if both students have the same identity and data fields."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * This defines a stronger notion of equality between two students."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public boolean equals (Object other) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!(other instanceof EventHistory)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EventHistory otherEventHistory \u003d (EventHistory) other;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        ObservableList\u003cVEvent\u003e myVEventList \u003d this.getVEvents();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        ObservableList\u003cVEvent\u003e otherVEventList \u003d otherEventHistory.getVEvents();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (myVEventList.size() !\u003d otherVEventList.size()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        for (int i \u003d 0; i \u003c myVEventList.size(); i++) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            VEvent myVEvent \u003d myVEventList.get(i);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            VEvent otherVEvent \u003d otherVEventList.get(i);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            if (!myVEvent.getSummary().equals(otherVEvent.getSummary())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                    || !myVEvent.getDateTimeStart().equals(otherVEvent.getDateTimeStart())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                    || !myVEvent.getDateTimeEnd().equals(otherVEvent.getDateTimeEnd())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                    || !myVEvent.getCategories().equals(otherVEvent.getCategories())) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public Iterator\u003cVEvent\u003e iterator() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return vEvents.iterator();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 220
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventSchedulePrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Preferences and settings of scheduler"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class EventSchedulePrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private EventScheduleView eventScheduleView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EventSchedulePrefs(EventScheduleView eventScheduleView, LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(eventScheduleView);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(localDateTime);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.eventScheduleView \u003d eventScheduleView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.localDateTime \u003d localDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EventScheduleView getEventScheduleView() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return eventScheduleView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setEventScheduleView(EventScheduleView eventScheduleView) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.eventScheduleView \u003d eventScheduleView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public LocalDateTime getLocalDateTime() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return localDateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setLocalDateTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.localDateTime \u003d localDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!(other instanceof EventSchedulePrefs)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EventSchedulePrefs otherPrefs \u003d (EventSchedulePrefs) other;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return otherPrefs.getLocalDateTime().equals(getLocalDateTime())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u0026\u0026 otherPrefs.getEventScheduleView().equals(getEventScheduleView());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return eventScheduleView.name() + \" \" + localDateTime.toLocalDate().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventScheduleView.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Shows the 2 view options"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public enum EventScheduleView {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    DAILY, WEEKLY"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/ReadOnlyEvents.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public interface ReadOnlyEvents {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns an unmodifiable view of the students list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * This list will not contain any duplicate students."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    List\u003cEvent\u003e getEvents();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/ReadOnlyVEvents.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public interface ReadOnlyVEvents {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns an unmodifiable view of the students list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * This list will not contain any duplicate students."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    ObservableList\u003cVEvent\u003e getVEvents();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/RecurrenceType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * The 3 recurrence types of the icalendar"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public enum RecurrenceType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    DAILY, WEEKLY, NONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/DuplicateVEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Signals that the operation will result in duplicate VEvents (VEvents are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * have the startDateTime, endDateTime and eventName)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class DuplicateVEventException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public DuplicateVEventException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        super(\"Operation would result in duplicate VEvents\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/notes/Notes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * Represents Notes of a student."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class Notes {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            \"Student\u0027s name should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final String student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final String content;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final String dateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Notes constructor"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param student, representing the name of student."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param content, representing the content to be stored in the note."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public Notes(String student, String content) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireAllNonNull(student, content);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        checkArgument(isValidName(student), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.dateTime \u003d formatter.format(date).toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Overloaded Notes constructor which is used when Json data is drawn from addressbook.json"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * This allows initial timestamp to be immutable"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param student"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param content"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param dateTime"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public Notes(String student, String content, String dateTime) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireAllNonNull(student, content, dateTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        checkArgument(isValidName(student), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Getter of String student"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @return the student\u0027s name."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public String getStudent() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return this.student;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Getter of String content"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @return the note\u0027s content."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public String getContent() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return this.content;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Getter of Note\u0027s timestamp"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @return note\u0027s timestamp."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return this.dateTime;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Setter of String student"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param newStudent"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @return a new Notes object with updated student."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public Notes setStudent(String newStudent) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return new Notes(newStudent, this.getContent());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Setter of String content"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param newContent"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @return a new Notes object with updated note content."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public Notes setContent(String newContent) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return new Notes(this.getStudent(), newContent);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Method which checks the validity of a Student\u0027s name."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return \"[Notes]\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                + \" Student:\u0027\" + getStudent() + \u0027\\\u0027\u0027"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                + \", Content: \u0027\" + getContent() + \u0027\\\u0027\u0027;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        Notes notes \u003d (Notes) o;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return Objects.equals(student, notes.student)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                \u0026\u0026 Objects.equals(content, notes.content)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                \u0026\u0026 Objects.equals(dateTime, notes.dateTime);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Returns true if both notes have the same information."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public boolean isSameNote(Notes otherNotes) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return this.equals(otherNotes);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Driver function to test the functionality of StickyNotes"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        Notes s1 \u003d new Notes(\"Alex Yeoh\", \"Late for class today\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        System.out.println(s1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/model/notes/NotesContainKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesContainKeywordsPredicate implements Predicate\u003cNotes\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public NotesContainKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public List\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public boolean test(Notes notes) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(notes.getContent(), keyword)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                || StringUtil.containsWordIgnoreCase(notes.getDateTime(), keyword)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                || StringUtil.containsWordIgnoreCase(notes.getStudent(), keyword));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                || (other instanceof NotesContainKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                \u0026\u0026 keywords.equals(((NotesContainKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/notes/NotesManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * Represents the Notes Manager, which keeps track of all the notes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesManager implements ReadOnlyNotes {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final UniqueNotesList notes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        notes \u003d new UniqueNotesList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public NotesManager() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Creates a list of Saved Notes using the notes in {@code toBeCopied}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param toBeCopied list of assessments."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public NotesManager(ReadOnlyNotes toBeCopied) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Replaces the contents of the notes."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Must not contain duplicate notes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param notes refers to the list of notes."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void setNotes(List\u003cNotes\u003e notes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.notes.setNotes(notes);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Resets the existing data of this {@code notes} with {@code newData}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param newData"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void resetData(ReadOnlyNotes newData) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        setNotes(newData.getNotesList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Returns true if a note with the same identity as {@code note} exists in the list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param note"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public boolean hasNote(Notes note) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return notes.contains(note);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Adds a note to the list of current notes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param note"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void addNote(Notes note) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        notes.add(note);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Replaces the given Notes {@code toBeChanged} in the list with {@code editedNote}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void setNote(Notes toBeChanged, Notes editedNote) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireNonNull(editedNote);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        notes.setNote(toBeChanged, editedNote);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Removes a note from the list of notes"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param note"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void removeNote(Notes note) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        notes.remove(note);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return notes.asUnmodifiableObservableList().size() + \"students\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public ObservableList\u003cNotes\u003e getNotesList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return notes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                || (other instanceof NotesManager)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                \u0026\u0026 notes.equals(((NotesManager) other).notes);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return notes.hashCode();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/model/notes/ReadOnlyNotes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " *  Unmodifiable view of Notes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public interface ReadOnlyNotes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Returns an unmodifiable view of the all the Notes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * This list will not contain any duplicate assessment."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    ObservableList\u003cNotes\u003e getNotesList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/notes/UniqueNotesList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.exceptions.DuplicateNotesException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.exceptions.NotesUnavailableException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * A list of notes that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * A note is considered unique by comparing using {@code Note#isSameNote(Note)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * notes uses Note#isSameNote(Note) for equality so as to ensure that the note being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * unique in terms of identity in the UniqueNotesList. However, the removal of a note uses Note#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * as to ensure that the note with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * @see Notes#isSameNote(Notes)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class UniqueNotesList implements Iterable\u003cNotes\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final ObservableList\u003cNotes\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final ObservableList\u003cNotes\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Returns true if the list contains an equivalent note as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public boolean contains(Notes toBeChecked) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireNonNull(toBeChecked);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return internalList.stream().anyMatch((toBeChecked::isSameNote));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Adds a note to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * The note must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void add(Notes toBeAdded) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireNonNull(toBeAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        if (contains(toBeAdded)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new DuplicateNotesException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        internalList.add(toBeAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Replaces the note {@code target} in the list with {@code editedNote}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * The note identity of {@code editedNote} must not be the same as another existing note in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void setNote(Notes toBeChanged, Notes editedNote) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireAllNonNull(toBeChanged, editedNote);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        int index \u003d internalList.indexOf(toBeChanged);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new NotesUnavailableException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        if (!toBeChanged.isSameNote(editedNote) \u0026\u0026 contains(editedNote)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new DuplicateNotesException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        internalList.set(index, editedNote);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Removes the equivalent note from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * The note must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void remove(Notes toBeRemoved) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireNonNull(toBeRemoved);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        if (!internalList.remove(toBeRemoved)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new NotesUnavailableException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void setNotes(UniqueNotesList replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Replaces the contents of this list with {@code notes}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * {@code notes} must not contain duplicate notes."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void setNotes(List\u003cNotes\u003e notes) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireNonNull(notes);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        if (!notesAreUnique(notes)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new DuplicateNotesException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        internalList.setAll(notes);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public ObservableList\u003cNotes\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public Iterator\u003cNotes\u003e iterator() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                || (other instanceof UniqueNotesList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueNotesList) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Returns true if {@code notes} contains only unique notes."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private boolean notesAreUnique(List\u003cNotes\u003e notes) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            for (int j \u003d i + 1; j \u003c notes.size(); j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                if (notes.get(i).isSameNote(notes.get(j))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    //    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    //    public String toString() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    //        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    //        for (Notes note : internalList) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    //            sb.append(note + \"\\n\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    //        return sb.toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/model/notes/exceptions/DuplicateNotesException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.model.notes.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_NOTES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * Represents an Exception handling scenario of duplicated notes."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class DuplicateNotesException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public DuplicateNotesException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        super(MESSAGE_DUPLICATE_NOTES);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/notes/exceptions/NotesUnavailableException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.model.notes.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNAVAILABLE_NOTES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * Represents an Exception handling scenario of invalid notes."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesUnavailableException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public NotesUnavailableException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        super(MESSAGE_UNAVAILABLE_NOTES);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Address.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Represents a Student\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Attendance.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Represents a Student\u0027s attendance in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class Attendance {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            \"Attendance should either be \\\"Present\\\", \\\"Absent\\\", \\\"Late\\\" or \\\"Sick\\\".\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String VALIDATION_REGEX_PRESENT \u003d \"Present\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String VALIDATION_REGEX_ABSENT \u003d \"Absent\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String VALIDATION_REGEX_LATE \u003d \"Late\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String VALIDATION_REGEX_SICK \u003d \"Sick\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Constructs a {@code Attendance}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param state A valid attendance state."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Attendance(String state) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(state);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        checkArgument(isValidAttendance(state), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        value \u003d state;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns true if a given string is a valid attendance."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static boolean isValidAttendance(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return test.matches(VALIDATION_REGEX_ABSENT)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                || test.matches(VALIDATION_REGEX_PRESENT) || test.matches(VALIDATION_REGEX_LATE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                || test.matches(VALIDATION_REGEX_SICK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                || (other instanceof Attendance // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u0026\u0026 value.equals(((Attendance) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return value.toString().hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Email.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Represents a Student\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (test.equals(\"Insert email here!\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 5,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Represents a Student\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/NameContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(student.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 5,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/NextOfKin.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " *  Class representing Next of kin details of students."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class NextOfKin {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            \"NOK should be in this format: [name]-[relationship]-[contact] e.g, Jim-Father-93259589 \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                    + \"\\n 1. Names should only contain alphanumeric characters and spaces, and it should not be blank \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                    + \"\\n 2. Relationship of NOK should be family members only \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                    + \"\\n 3. Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private static final String VALIDATION_REGEX_NOKNAME \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private static final String VALIDATION_REGEX_NOKCONTACT \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final String detailsOfNok;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final String nameOfNok;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final String relationshipOfNok;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final String contactOfNok;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public NextOfKin(String detailsOfNok) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        checkArgument(isValidNok(detailsOfNok), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (detailsOfNok.equals(\"Insert NOK details here!\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            this.detailsOfNok \u003d detailsOfNok;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            this.nameOfNok \u003d \"Insert NOK name here!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            this.relationshipOfNok \u003d \"Insert NOK relationship here!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            this.contactOfNok \u003d \"Insert NOK contact here!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            value \u003d detailsOfNok;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            this.detailsOfNok \u003d detailsOfNok;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            this.nameOfNok \u003d this.detailsOfNok.split(\"-\")[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            this.relationshipOfNok \u003d this.detailsOfNok.split(\"-\")[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            this.contactOfNok \u003d this.detailsOfNok.split(\"-\")[2];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            value \u003d detailsOfNok;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public String getNameOfNok() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this.nameOfNok.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public String getRelationshipOfNok() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this.relationshipOfNok.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public String getContactOfNok() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this.contactOfNok.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns true if Nok name is valid"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param test String of Nok name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @return true or false depending on validation"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static boolean isValidNokName(String test) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (test.equals(\"Insert NOK details here!\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return test.matches(VALIDATION_REGEX_NOKNAME);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns true if Nok relationship is valid"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param test String of Nok relationship eg, father/mother"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @return true or false depending on validation"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static boolean isValidNokRelationship(String test) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String lowerCaseTest \u003d test.trim().toLowerCase();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        switch (lowerCaseTest) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        case \"Insert NOK details here!\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        case \"father\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        case \"mother\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        case \"sister\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        case \"brother\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        case \"grandfather\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        case \"grandmother\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns true if Nok contact is valid"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param test String of Nok contact"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @return true or false depending on validation"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static boolean isValidNokContact(String test) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (test.equals(\"Insert NOK details here!\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return test.trim().matches(VALIDATION_REGEX_NOKCONTACT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns true if Nok details are valid"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param test String of Nok details eg, jim-father-94342983"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @return true or false depending on validation"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static boolean isValidNok(String test) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (test.equals(\"Insert NOK details here!\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            if (!test.contains(\"-\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            } else if (test.split(\"-\").length !\u003d 3) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                String nameOfNok \u003d test.split(\"-\")[0];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                String relationshipOfNok \u003d test.split(\"-\")[1];"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                String contactOfNok \u003d test.split(\"-\")[2];"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                return isValidNokName(nameOfNok) \u0026\u0026 isValidNokContact(contactOfNok)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                        \u0026\u0026 isValidNokRelationship(relationshipOfNok);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Phone.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Represents a Student\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (test.equals(\"Insert phone number here!\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 5,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Remark.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Represents a Student\u0027s remark in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 31,
      "TheElectricBlender": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Student.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Represents a Student in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private final Temperature temperature;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private final Attendance attendance;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private ArrayList\u003cNotes\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final NextOfKin nok;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Student(Name name, Phone phone, Email email, Address address, Temperature temperature, Attendance attendance,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                   NextOfKin nok, ArrayList\u003cNotes\u003e notes, Remark remark, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireAllNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.temperature \u003d temperature;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.notes.addAll(notes);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.nok \u003d nok;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Temperature getTemperature() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return temperature;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Attendance getAttendance() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return attendance;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void addNotes(Notes note) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.notes.add(note);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Returns an immutable Notes ArrayList"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public ArrayList\u003cNotes\u003e getNotes() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return notes;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public NextOfKin getNok () {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return nok;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags () {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns true if both students of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * This defines a weaker notion of equality between two students."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public boolean isSameStudent (Student otherStudent) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (otherStudent \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return otherStudent !\u003d null"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u0026\u0026 otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u0026\u0026 (otherStudent.getPhone().equals(getPhone()) || otherStudent.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns true if both students have the same identity and data fields."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * This defines a stronger notion of equality between two students."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals (Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u0026\u0026 otherStudent.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u0026\u0026 otherStudent.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u0026\u0026 otherStudent.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u0026\u0026 otherStudent.getTemperature().equals(getTemperature())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u0026\u0026 otherStudent.getAttendance().equals(getAttendance())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                \u0026\u0026 otherStudent.getNotes().equals(getNotes())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u0026\u0026 otherStudent.getTags().equals(getTags());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode () {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return Objects.hash(name, phone, email, address, temperature, attendance, remark, notes, tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString () {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                .append(\" Temperature: \")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                .append(getTemperature())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                .append(\" Attendance: \")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                .append(getAttendance())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                .append(\"Notes: \")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                .append(notes.size())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                .append(\" Remark: \")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                .append(getRemark())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 25,
      "Yuanyu97": 29,
      "TheElectricBlender": 25,
      "-": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Temperature.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Represents a Student\u0027s temperature in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class Temperature {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_1 \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            \"Temperature should only contain a 2 digits number followed by 1 decimal place.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_2 \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            \"Temperature should be between 25.0°C and 41.0°C\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{2}\" + \"\\\\.\" + \"\\\\d\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Constructs a {@code Temperature}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param temperature A valid temperature."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Temperature(String temperature) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(temperature);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        checkArgument(isValidTemperatureFirst(temperature), MESSAGE_CONSTRAINTS_1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        checkArgument(isValidTemperatureSecond(temperature), MESSAGE_CONSTRAINTS_2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        value \u003d temperature;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns true if a given temperature is in the correct format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static boolean isValidTemperatureFirst(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (test.equals(\"Insert temperature here!\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns true if a given temperature is in the given range."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static boolean isValidTemperatureSecond(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (test.equals(\"Insert temperature here!\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            Double value \u003d Double.valueOf(test);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return 25.0 \u003c\u003d value \u0026\u0026 value \u003c\u003d 41.0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                || (other instanceof Temperature // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u0026\u0026 value.equals(((Temperature) other).value)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/UniqueStudentList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * A list of students that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * A student is considered unique by comparing using {@code Student#isSameStudent(Student)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * updating of students uses Student#isSameStudent(Student) for equality so as to ensure that the student"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * being added or updated is unique in terms of identity in the UniqueStudentList. However, the removal of a student"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * uses Student#equals(Object) so as to ensure that the student with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * @see Student#isSameStudent(Student)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class UniqueStudentList implements Iterable\u003cStudent\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns true if the list contains an equivalent student as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameStudent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Adds a student to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * The student must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void add(Student toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Replaces the student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!target.isSameStudent(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Removes the equivalent student from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * The student must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void remove(Student toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setStudents(UniqueStudentList replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Replaces the contents of this list with {@code students}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireAllNonNull(students);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!studentsAreUnique(students)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        internalList.setAll(students);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                || (other instanceof UniqueStudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueStudentList) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns true if {@code students} contains only unique students."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private boolean studentsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                if (students.get(i).isSameStudent(students.get(j))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/exceptions/DuplicateStudentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Signals that the operation will result in duplicate Students (Students are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class DuplicateStudentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public DuplicateStudentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        super(\"Operation would result in duplicate students\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/exceptions/StudentNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Signals that the operation is unable to find the specified student."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class StudentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Academics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Assessment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Exam;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Homework;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.ReadOnlyAcademics;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Admin;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.ReadOnlyAdmin;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.EventHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.ReadOnlyEvents;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.RecurrenceType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.NotesManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.ReadOnlyNotes;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.NextOfKin;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Remark;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Temperature;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final Remark EMPTY_REMARK \u003d new Remark(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final ArrayList\u003cNotes\u003e EMPTY_NOTES \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static Student[] getSampleStudents() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return new Student[] {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            new Student(new Name(\"Simon Lam\"), new Phone(\"87438807\"), new Email(\"simonlam@example.com\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                    new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Temperature(\"36.5\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                    new Attendance(\"Sick\"), new NextOfKin(\"Joseph Lam - father - 99999999\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    EMPTY_NOTES, EMPTY_REMARK,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                    getTagSet(\"Sheares\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            new Student(new Name(\"Gerren Seow\"), new Phone(\"99272758\"), new Email(\"gerrenseow@example.com\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Temperature(\"37.0\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                    new Attendance(\"Present\"), new NextOfKin(\"Joseph Seow - father - 99999999\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    EMPTY_NOTES, EMPTY_REMARK,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                    getTagSet(\"Temasek\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            new Student(new Name(\"Lee Hui Ting\"), new Phone(\"93210283\"), new Email(\"huiting@example.com\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Temperature(\"36.9\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                    new Attendance(\"Present\"), new NextOfKin(\"Joseph Lee - father - 99999999\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    EMPTY_NOTES, EMPTY_REMARK,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                    getTagSet(\"CAPT\")),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            new Student(new Name(\"Gary Syndromes\"), new Phone(\"91031282\"), new Email(\"leegary@example.com\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Temperature(\"36.4\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                    new Attendance(\"Present\"), new NextOfKin(\"Joseph Syndromes - father - 99999999\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    EMPTY_NOTES, EMPTY_REMARK,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                    getTagSet(\"Home\")),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            new Student(new Name(\"Freddy Zhang\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                    new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Temperature(\"37.4\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                    new Attendance(\"Present\"), new NextOfKin(\"Joseph Zhang - father - 99999999\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    EMPTY_NOTES, EMPTY_REMARK,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                    getTagSet(\"classmates\"))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        for (Student sampleStudent : getSampleStudents()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            sampleAb.addStudent(sampleStudent);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static ReadOnlyEvents getSampleEvents() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String eventName \u003d \"Sample event\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String colorCode \u003d \"group01\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String uniqueIdentifier \u003d \"teapethelper\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        LocalDateTime startDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        LocalDateTime endDateTime \u003d LocalDateTime.now().plusHours(2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Event event \u003d new Event(eventName, startDateTime, endDateTime, colorCode, uniqueIdentifier,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                RecurrenceType.NONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EventHistory sampleEventHistory \u003d new EventHistory(events);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return sampleEventHistory;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static Assessment[] getSampleAssessments() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return new Assessment[] {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            new Homework(\"CS3230 Assignment 2\", \"2020-03-23\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            new Homework(\"CS3240 I2 Presentation Slides\", \"2020-03-23\"),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            new Homework(\"CS3240 Paper Prototype\", \"2020-03-25\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            new Exam(\"CS2103 Finals\", \"2020-05-25\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            new Exam(\"CS3230 Finals\", \"2020-05-25\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        };"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static ReadOnlyAcademics getSampleAcademics() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Academics sampleAcademics \u003d new Academics();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (Assessment sampleAssessment : getSampleAssessments()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            sampleAssessment.setStudents(Arrays.asList(getSampleStudents()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            sampleAcademics.addAssessment(sampleAssessment);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return sampleAcademics;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static Notes[] getSampleNotes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return new Notes[] {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            new Notes(\"Simon Lam\", \"He has bad behaviour\", \"29/03/2020 22:31\"),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            new Notes(\"Gerren Seow\", \"He has good behaviour\", \"29/03/2020 22:40\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        };"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static ReadOnlyNotes getSampleNotesManager() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        NotesManager sampleNotesManager \u003d new NotesManager();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        sampleNotesManager.setNotes(Arrays.asList(getSampleNotes()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return sampleNotesManager;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static Date[] getSampleDates() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return new Date[] {new Date(LocalDate.now(), Arrays.asList(getSampleStudents()))};"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static ReadOnlyAdmin getSampleAdmin() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Admin sampleAd \u003d new Admin();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        for (Date sampleDate : getSampleDates()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            sampleAd.addDate(sampleDate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return sampleAd;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 25,
      "Yuanyu97": 26,
      "TheElectricBlender": 46,
      "-": 33,
      "tingalinga": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedNotes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * Jackson-friendly version of Notes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "class JsonAdaptedNotes {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final String student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final String content;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final String dateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Constructs a JsonAdaptedNotes"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public JsonAdaptedNotes(@JsonProperty(\"student\") String student, @JsonProperty(\"content\") String content,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                            @JsonProperty(\"dateTime\") String dateTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Converts a given Notes object into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public JsonAdaptedNotes(Notes source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.student \u003d source.getStudent();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.content \u003d source.getContent();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.dateTime \u003d source.getDateTime();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Converts this Jackson-friendly adapted notes object into the model\u0027s Notes object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted notes."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public Notes toModelType() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return new Notes(student, content, dateTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jerrenss": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedStudent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.NextOfKin;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Remark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Temperature;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Jackson-friendly version of {@link Student}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class JsonAdaptedStudent {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private final String temperature;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private final String attendance;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final List\u003cJsonAdaptedNotes\u003e noted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final String nok;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudent} with the given student details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public JsonAdaptedStudent(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                              @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                              @JsonProperty(\"temperature\") String temperature,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                              @JsonProperty(\"attendance\") String attendance, @JsonProperty(\"nok\") String nok,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                              @JsonProperty(\"noted\") List\u003cJsonAdaptedNotes\u003e noted,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                              @JsonProperty(\"remark\") String remark,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.temperature \u003d temperature;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        if (noted !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            this.noted.addAll(noted);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.nok \u003d nok;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Converts a given {@code Student} into this class for Jackson use."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public JsonAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        temperature \u003d source.getTemperature().value;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        attendance \u003d source.getAttendance().value;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        ArrayList\u003cNotes\u003e allNotes \u003d source.getNotes();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        for (Notes n : allNotes) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            noted.add(new JsonAdaptedNotes(n));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        nok \u003d source.getNok().value;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Converts this Jackson-friendly adapted student object into the model\u0027s {@code Student} object."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        final List\u003cNotes\u003e studentNotes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        for (JsonAdaptedNotes note : noted) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            studentNotes.add(note.toModelType());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        final List\u003cTag\u003e studentTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            studentTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (temperature \u003d\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new IllegalValueException((String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    Temperature.class.getSimpleName())));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (!Temperature.isValidTemperatureFirst(temperature)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new IllegalValueException(Temperature.MESSAGE_CONSTRAINTS_1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (!Temperature.isValidTemperatureSecond(temperature)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new IllegalValueException(Temperature.MESSAGE_CONSTRAINTS_2);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        final Temperature modelTemperature \u003d new Temperature(temperature);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (attendance \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new IllegalValueException((String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    Attendance.class.getSimpleName())));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (!Attendance.isValidAttendance(attendance)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new IllegalValueException(Attendance.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        final Attendance modelAttendance \u003d new Attendance(attendance);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (nok \u003d\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                    NextOfKin.class.getSimpleName()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!NextOfKin.isValidNok(nok)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new IllegalValueException(NextOfKin.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        final NextOfKin modelNok \u003d new NextOfKin(nok);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        final ArrayList\u003cNotes\u003e modelNotes \u003d new ArrayList\u003c\u003e(studentNotes);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(studentTags);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return new Student(modelName, modelPhone, modelEmail, modelAddress, modelTemperature, modelAttendance,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                modelNok, modelNotes, modelRemark, modelTags);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 19,
      "Yuanyu97": 42,
      "TheElectricBlender": 33,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"Students list contains duplicate student(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given students."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"students\") List\u003cJsonAdaptedStudent\u003e students) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.students.addAll(students);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        students.addAll(source.getStudentList().stream().map(JsonAdaptedStudent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        for (JsonAdaptedStudent jsonAdaptedStudent : students) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            Student student \u003d jsonAdaptedStudent.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            if (addressBook.hasStudent(student)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            addressBook.addStudent(student);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 12,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.ReadOnlyAcademics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.ReadOnlyAdmin;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.ReadOnlyEvents;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.ReadOnlyNotes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.storage.academics.AcademicsStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.storage.admin.AdminStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.storage.event.EventStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.storage.notes.NotesManagerStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public interface Storage extends AddressBookStorage, AcademicsStorage, NotesManagerStorage,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        UserPrefsStorage, AdminStorage, EventStorage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    Path getSavedAcademicsFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    Optional\u003cReadOnlyAcademics\u003e readAcademics() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    void saveAcademics(ReadOnlyAcademics academics) throws IOException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    Optional\u003cReadOnlyEvents\u003e readEvents() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    Path getEventHistoryFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    void saveEvents(ReadOnlyEvents readOnlyEvents) throws IOException;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    Path getAdminFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    Optional\u003cReadOnlyNotes\u003e readNotesManager() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    void saveNotesManager(ReadOnlyNotes notes) throws IOException;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    Path getNotesManagerFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    Optional\u003cReadOnlyAdmin\u003e readAdmin() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    void saveAdmin(ReadOnlyAdmin admin) throws IOException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 8,
      "Yuanyu97": 12,
      "TheElectricBlender": 12,
      "-": 32,
      "tingalinga": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.ReadOnlyAcademics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.ReadOnlyAdmin;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.ReadOnlyEvents;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.ReadOnlyNotes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.storage.academics.AcademicsStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.storage.admin.AdminStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.storage.event.EventStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.storage.notes.NotesManagerStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private AdminStorage adminStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private AcademicsStorage academicsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private NotesManagerStorage notesManagerStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private EventStorage eventStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                          AdminStorage adminStorage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                          AcademicsStorage academicsStorage,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                          UserPrefsStorage userPrefsStorage, EventStorage eventStorage,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                          NotesManagerStorage notesManagerStorage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.adminStorage \u003d adminStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.academicsStorage \u003d academicsStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.notesManagerStorage \u003d notesManagerStorage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.eventStorage \u003d eventStorage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Academics methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Path getSavedAcademicsFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return academicsStorage.getSavedAcademicsFilePath();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Optional\u003cReadOnlyAcademics\u003e readAcademics() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return readAcademics(getSavedAcademicsFilePath());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Optional\u003cReadOnlyAcademics\u003e readAcademics(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return academicsStorage.readAcademics(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void saveAcademics(ReadOnlyAcademics academics) throws IOException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        saveAcademics(academics, academicsStorage.getSavedAcademicsFilePath());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void saveAcademics(ReadOnlyAcademics academics, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        academicsStorage.saveAcademics(academics, filePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public Path getEventHistoryFilePath() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return eventStorage.getEventHistoryFilePath();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public Optional\u003cReadOnlyEvents\u003e readEvents() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return readEvents(eventStorage.getEventHistoryFilePath());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public Optional\u003cReadOnlyEvents\u003e readEvents(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        logger.fine(\"Reading events from event file: \" + filePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return eventStorage.readEvents(filePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void saveEvents(ReadOnlyEvents readOnlyEvents) throws IOException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        saveEvents(readOnlyEvents, eventStorage.getEventHistoryFilePath());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void saveEvents(ReadOnlyEvents events, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        logger.fine(\"Writing events into event file :\" + filePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        eventStorage.saveEvents(events, filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Path getAdminFilePath() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return adminStorage.getAdminFilePath();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Optional\u003cReadOnlyAdmin\u003e readAdmin() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return readAdmin(adminStorage.getAdminFilePath());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Optional\u003cReadOnlyAdmin\u003e readAdmin(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return adminStorage.readAdmin(filePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void saveAdmin(ReadOnlyAdmin admin) throws IOException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        saveAdmin(admin, adminStorage.getAdminFilePath());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void saveAdmin(ReadOnlyAdmin admin, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        adminStorage.saveAdmin(admin, filePath);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public Path getNotesManagerFilePath() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return notesManagerStorage.getNotesManagerFilePath();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public Optional\u003cReadOnlyNotes\u003e readNotesManager() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return readNotesManager(getNotesManagerFilePath());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public Optional\u003cReadOnlyNotes\u003e readNotesManager(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return notesManagerStorage.readNotesManager(filePath);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void saveNotesManager(ReadOnlyNotes notes) throws IOException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        saveNotesManager(notes, notesManagerStorage.getNotesManagerFilePath());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void saveNotesManager(ReadOnlyNotes notes, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        notesManagerStorage.saveNotesManager(notes, filePath);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 30,
      "Yuanyu97": 35,
      "TheElectricBlender": 36,
      "-": 78,
      "tingalinga": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/academics/AcademicsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "package seedu.address.storage.academics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.ReadOnlyAcademics;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Represents a storage for {@link seedu.address.model.academics.Academics}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public interface AcademicsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    Path getSavedAcademicsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns Academics data as a {@link ReadOnlyAcademics}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    Optional\u003cReadOnlyAcademics\u003e readAcademics() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @see #getSavedAcademicsFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    Optional\u003cReadOnlyAcademics\u003e readAcademics(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Saves the given {@link ReadOnlyAcademics} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param academics cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    void saveAcademics(ReadOnlyAcademics academics) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @see #saveAcademics(ReadOnlyAcademics)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    void saveAcademics(ReadOnlyAcademics academics, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/academics/JsonAcademicsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "package seedu.address.storage.academics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.ReadOnlyAcademics;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * A class to access Academics data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class JsonAcademicsStorage implements AcademicsStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAcademicsStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public JsonAcademicsStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Path getSavedAcademicsFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Optional\u003cReadOnlyAcademics\u003e readAcademics() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return readAcademics(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Similar to {@link #readAcademics()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Optional\u003cReadOnlyAcademics\u003e readAcademics(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Optional\u003cJsonSerializableAcademics\u003e jsonAcademics \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                filePath, JsonSerializableAcademics.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (!jsonAcademics.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return Optional.of(jsonAcademics.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void saveAcademics(ReadOnlyAcademics academics) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        saveAcademics(academics, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Similar to {@link #saveAcademics(ReadOnlyAcademics)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void saveAcademics(ReadOnlyAcademics academics, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        requireNonNull(academics);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAcademics(academics), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/academics/JsonAdaptedAssessment.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "package seedu.address.storage.academics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Assessment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Exam;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Homework;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Submission;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Jackson-friendly version of {@link Assessment}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "class JsonAdaptedAssessment {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Assessments %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private final List\u003cJsonAdaptedSubmission\u003e submissionTracker \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private String date \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Constructs a {@code JsonAdaptedAssessment} with the given assessment details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public JsonAdaptedAssessment(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                                 @JsonProperty(\"submissions\") List\u003cJsonAdaptedSubmission\u003e submissionTracker,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                                 @JsonProperty(\"type\") String type,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                                 @JsonProperty(\"date\") String date) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (submissionTracker !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            this.submissionTracker.addAll(submissionTracker);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Converts a given {@code Assessment} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public JsonAdaptedAssessment(Assessment source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        List\u003cSubmission\u003e submissions \u003d source.getSubmissionTracker();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (Submission submission: submissions) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            submissionTracker.add(new JsonAdaptedSubmission(submission));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (source instanceof Homework) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            type \u003d \"homework\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            date \u003d ((Homework) source).getDeadline().format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } else if (source instanceof Exam) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            type \u003d \"exam\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            date \u003d ((Exam) source).getExamDate().format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            type \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Converts this Jackson-friendly adapted assessment object into the model\u0027s {@code Assessment} object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted assessment."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Assessment toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"DESCRIPTION\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        final String modelDescription \u003d description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (submissionTracker \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"SUBMISSION TRACKER\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        final List\u003cSubmission\u003e modelSubmission \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (JsonAdaptedSubmission jsonAdaptedSubmission: submissionTracker) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            modelSubmission.add(jsonAdaptedSubmission.toModelType());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"TYPE\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        final String modelType \u003d type;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"DATE\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String modelDate \u003d convertDateFormat(date);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (modelType.equals(\"homework\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            Homework modelHomework \u003d new Homework(description, modelDate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            modelHomework.setSubmissionTracker(modelSubmission);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return modelHomework;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } else if (modelType.equals(\"exam\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            Exam modelExam \u003d new Exam(description, modelDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            modelExam.setSubmissionTracker(modelSubmission);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return modelExam;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"TYPE\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Converts string indicating month to its corresponding integer as a string."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param month string of month."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return integer of month formatted as a string."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String convertMonthToInt(String month) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        switch (month) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"Jan\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"01\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"Feb\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"02\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"Mar\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"03\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"Apr\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"04\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"May\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"05\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"Jun\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"06\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"Jul\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"07\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"Aug\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"08\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"Sep\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"09\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"Oct\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"10\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        case \"Nov\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"11\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return \"12\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Converts format of date that can be parsed by java.time.LocalDateTime."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param date string of date."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @return formatted string that can be parsed by java.time.LocalDateTime."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public String convertDateFormat(String date) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String[] parts \u003d date.split(\" \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String year \u003d parts[2];"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String month \u003d convertMonthToInt(parts[1]);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String day \u003d String.format(\"%02d\", Integer.parseInt(parts[0]));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return year + \"-\" + month + \"-\" + day;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/academics/JsonAdaptedSubmission.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "package seedu.address.storage.academics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Submission;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Jackson-friendly version of {@link Submission}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "class JsonAdaptedSubmission {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private final String student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private final String submitted;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private final String marked;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private final String score;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Constructs a {@code JsonAdaptedSubmission} with the given details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public JsonAdaptedSubmission(@JsonProperty(\"student\") String student,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                                 @JsonProperty(\"submitted\") String submitted,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                                 @JsonProperty(\"marked\") String marked,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                                 @JsonProperty(\"score\") String score) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.submitted \u003d submitted;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.marked \u003d marked;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Converts a given {@code Submission} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public JsonAdaptedSubmission(Submission source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.student \u003d source.getStudentName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.submitted \u003d source.hasSubmitted() ? \"Submitted\" : \"Not Submitted\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.marked \u003d source.isMarked() ? \"Marked\" : \"Not Marked\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.score \u003d Integer.toString(source.getScore());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Submission} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Submission toModelType() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        boolean modelSubmitted \u003d submitted.equals(\"Submitted\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        boolean modelMarked \u003d marked.equals(\"Marked\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        int modelScore \u003d Integer.parseInt(score);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return new Submission(student, modelSubmitted, modelMarked, modelScore);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tingalinga": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/academics/JsonSerializableAcademics.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "package seedu.address.storage.academics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Academics;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Assessment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.ReadOnlyAcademics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * An Immutable Academics that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "@JsonRootName(value \u003d \"academics\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "class JsonSerializableAcademics {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ASSESSMENT \u003d \"Academics list contains duplicate assessment(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private final List\u003cJsonAdaptedAssessment\u003e assessments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Constructs a {@code JsonSerializableAcademics} with the given assessments."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public JsonSerializableAcademics(@JsonProperty(\"assessments\") List\u003cJsonAdaptedAssessment\u003e assessments) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.assessments.addAll(assessments);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Converts a given {@code ReadOnlyAcademics} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAcademics}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public JsonSerializableAcademics(ReadOnlyAcademics source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        assessments.addAll(source.getAcademicsList()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                .map(JsonAdaptedAssessment::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Converts this academics into the model\u0027s {@code Academics} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Academics toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Academics academics \u003d new Academics();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (JsonAdaptedAssessment jsonAdaptedAssessment : assessments) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            Assessment assessment \u003d jsonAdaptedAssessment.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            if (academics.hasAssessment(assessment)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ASSESSMENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            academics.addAssessment(assessment);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return academics;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/admin/AdminStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.storage.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.ReadOnlyAdmin;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Represents a storage for {@link seedu.address.model.admin.Admin}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public interface AdminStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    Path getAdminFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns Admin data as a {@link ReadOnlyAdmin}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    Optional\u003cReadOnlyAdmin\u003e readAdmin() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @see #getAdminFilePath() ()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    Optional\u003cReadOnlyAdmin\u003e readAdmin(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Saves the given {@link ReadOnlyAdmin} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param admin cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    void saveAdmin(ReadOnlyAdmin admin) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @see #saveAdmin(ReadOnlyAdmin)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    void saveAdmin(ReadOnlyAdmin admin, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/admin/JsonAdaptedDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.storage.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.storage.JsonAdaptedStudent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Jackson-friendly version of {@link Date}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class JsonAdaptedDate {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Date\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Constructs a {@code JsonAdaptedDate} with the given date details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public JsonAdaptedDate(@JsonProperty(\"date\") LocalDate date,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                           @JsonProperty(\"students\") List\u003cJsonAdaptedStudent\u003e students) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (students !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            this.students.addAll(students);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Converts a given {@code Date} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public JsonAdaptedDate(Date source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        date \u003d source.getDate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        List\u003cStudent\u003e allStudents \u003d source.getStudents();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        for (Student n : allStudents) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            students.add(new JsonAdaptedStudent(n));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Converts this Jackson-friendly adapted date object into the model\u0027s {@code Date} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted date."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Date toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        final List\u003cStudent\u003e studentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        for (JsonAdaptedStudent student : students) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            studentList.add(student.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        final List\u003cStudent\u003e modelStudents \u003d new ArrayList\u003c\u003e(studentList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        final LocalDate modelDate \u003d date;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return new Date(modelDate, modelStudents);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/admin/JsonAdminStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.storage.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.ReadOnlyAdmin;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * A class to access Admin data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class JsonAdminStorage implements AdminStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAdminStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public JsonAdminStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Path getAdminFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Optional\u003cReadOnlyAdmin\u003e readAdmin() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return readAdmin(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Similar to {@link #readAdmin()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Optional\u003cReadOnlyAdmin\u003e readAdmin(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Optional\u003cJsonSerializableAdmin\u003e jsonAdmin \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                filePath, JsonSerializableAdmin.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (!jsonAdmin.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return Optional.of(jsonAdmin.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void saveAdmin(ReadOnlyAdmin admin) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        saveAdmin(admin, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Similar to {@link #saveAdmin(ReadOnlyAdmin)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void saveAdmin(ReadOnlyAdmin admin, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(admin);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAdmin(admin), filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/admin/JsonSerializableAdmin.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.storage.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Admin;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.ReadOnlyAdmin;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * An Immutable Admin that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "@JsonRootName(value \u003d \"admin\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class JsonSerializableAdmin {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DATE \u003d \"Dates list contains duplicate date(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private final List\u003cJsonAdaptedDate\u003e dates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Constructs a {@code JsonSerializableAdmin} with the given dates."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public JsonSerializableAdmin(@JsonProperty(\"dates\") List\u003cJsonAdaptedDate\u003e dates) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.dates.addAll(dates);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Converts a given {@code ReadOnlyAdmin} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAdmin}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public JsonSerializableAdmin(ReadOnlyAdmin source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        dates.addAll(source.getDateList().stream().map(JsonAdaptedDate::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Converts this address book into the model\u0027s {@code Admin} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Admin toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Admin admin \u003d new Admin();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        for (JsonAdaptedDate jsonAdaptedDate : dates) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            Date date \u003d jsonAdaptedDate.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            if (admin.hasDate(date)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DATE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            admin.addDate(date);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return admin;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/event/EventStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.storage.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.ReadOnlyEvents;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Represents a storage for {@link seedu.address.model.event.EventHistory}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public interface EventStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    Path getEventHistoryFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    Optional\u003cReadOnlyEvents\u003e readEvents() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @see #getEventHistoryFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    Optional\u003cReadOnlyEvents\u003e readEvents(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param readOnlyEvents cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    void saveEvents(ReadOnlyEvents readOnlyEvents) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @see #saveEvents(ReadOnlyEvents, Path)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    void saveEvents(ReadOnlyEvents readOnlyEvents, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/event/JsonAdaptedEvent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.storage.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.util.EventUtil.validateDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.RecurrenceType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Jackson-friendly version of {@link seedu.address.model.event.Event}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "class JsonAdaptedEvent {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String INVALID_DATE_FORMAT \u003d \"Invalid date format!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String INVALID_DATE_RANGE \u003d \"Invalid date range! Start date must be before end date\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String INVALID_RECUR_TYPE \u003d \"Invalid recurrence type!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private String eventName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private String startDateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private String endDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private String uniqueIdentifier;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private String recurrenceType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private String colorCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Constructs a {@code JsonAdaptedEvent} with the given student details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"eventName\") String eventName,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                            @JsonProperty(\"startDateTime\") String startDateTime,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                            @JsonProperty(\"endDateTime\") String endDateTime,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                            @JsonProperty(\"uniqueIdentifier\") String uniqueIdentifier,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                            @JsonProperty(\"recurrenceType\") String recurrenceType,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                            @JsonProperty(\"colorCode\") String colorCode) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.uniqueIdentifier \u003d uniqueIdentifier;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.recurrenceType \u003d recurrenceType;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.colorCode \u003d colorCode;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Converts a given {@code Event} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public JsonAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.eventName \u003d source.getEventName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.startDateTime \u003d source.getStartDateTime().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.endDateTime \u003d source.getEndDateTime().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.uniqueIdentifier \u003d source.getUniqueIdentifier();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.recurrenceType \u003d source.getRecurrenceType().name();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.colorCode \u003d source.getColorCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Converts this Jackson-friendly adapted event object into the model\u0027s {@code Event} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted event."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (eventName.isEmpty() || eventName \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"EVENT NAME\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (startDateTime.isEmpty() || startDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"START DATE TIME\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (endDateTime.isEmpty() || endDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"END DATE TIME\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (uniqueIdentifier.isEmpty() || uniqueIdentifier \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"UNIQUE IDENTIFIER\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (colorCode.isEmpty() || colorCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"COLOR CODE\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        RecurrenceType recurrenceTypeToAdd;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (recurrenceType.isEmpty() || recurrenceType \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"RECURRENCE TYPE\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else if (recurrenceType.equalsIgnoreCase(RecurrenceType.NONE.name())) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            recurrenceTypeToAdd \u003d RecurrenceType.NONE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else if (recurrenceType.equalsIgnoreCase(RecurrenceType.DAILY.name())) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            recurrenceTypeToAdd \u003d RecurrenceType.DAILY;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else if (recurrenceType.equalsIgnoreCase(RecurrenceType.WEEKLY.name())) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            recurrenceTypeToAdd \u003d RecurrenceType.WEEKLY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new IllegalValueException(INVALID_RECUR_TYPE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (colorCode.isEmpty() || colorCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"COLOR CODE\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            startDateTime \u003d LocalDateTime.parse(this.startDateTime);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            endDateTime \u003d LocalDateTime.parse(this.endDateTime);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new IllegalValueException(INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!validateDateTime(startDateTime, endDateTime)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new IllegalValueException(INVALID_DATE_RANGE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return new Event(eventName, startDateTime, endDateTime, colorCode, uniqueIdentifier, recurrenceTypeToAdd);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/event/JsonEventStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.storage.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.ReadOnlyEvents;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * A class to access Events data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class JsonEventStorage implements EventStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonEventStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public JsonEventStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public Path getEventHistoryFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public Optional\u003cReadOnlyEvents\u003e readEvents() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return readEvents(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Similar to {@link #readEvents(Path)} ()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public Optional\u003cReadOnlyEvents\u003e readEvents(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Optional\u003cJsonSerializableEvents\u003e jsonEvents \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                filePath, JsonSerializableEvents.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!jsonEvents.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return Optional.of(jsonEvents.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void saveEvents(ReadOnlyEvents events) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        saveEvents(events, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Similar to {@link #saveEvents} (ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void saveEvents(ReadOnlyEvents events, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(events);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableEvents(events), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/event/JsonSerializableEvents.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.storage.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.EventHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.ReadOnlyEvents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * An Immutable eventHistory that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "@JsonRootName(value \u003d \"events\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "class JsonSerializableEvents {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Constructs a {@code JsonSerializableEvents} with the given students."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public JsonSerializableEvents(@JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.events.addAll(events);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Converts a given {@code ReadOnlyEvents} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableEvents}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public JsonSerializableEvents(ReadOnlyEvents source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        events.addAll(source.getEvents().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EventHistory toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        List\u003cEvent\u003e eventArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        for (JsonAdaptedEvent jsonAdaptedEvent : events) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            Event event \u003d jsonAdaptedEvent.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            eventArrayList.add(event);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return new EventHistory(eventArrayList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/notes/JsonAdaptedNotes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.storage.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * Constructs a JsonAdaptedNotes with given details"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class JsonAdaptedNotes {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Notes in incorrect format.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final String student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final String content;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final String dateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Constructs a {@code JsonAdaptedNotes} with the given note details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param student"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param content"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param dateTime"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public JsonAdaptedNotes(@JsonProperty(\"student\") String student, @JsonProperty(\"content\") String content,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                            @JsonProperty(\"dateTime\") String dateTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Converts a given {@code source} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public JsonAdaptedNotes(Notes source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        student \u003d source.getStudent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        content \u003d source.getContent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        dateTime \u003d source.getDateTime();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Converts this Jackson-friendly adapted notes object into the model\u0027s {@code Notes} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public Notes toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        if (student \u003d\u003d null || content \u003d\u003d null || dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new IllegalValueException(MISSING_FIELD_MESSAGE_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return new Notes(student, content, dateTime);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/notes/JsonNotesManagerStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.storage.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.ReadOnlyNotes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * A class to access Notes data stored as a json file on the hard disk"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class JsonNotesManagerStorage implements NotesManagerStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonNotesManagerStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public JsonNotesManagerStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public Path getNotesManagerFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public Optional\u003cReadOnlyNotes\u003e readNotesManager() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return readNotesManager(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Similar to {@link #readNotesManager()}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public Optional\u003cReadOnlyNotes\u003e readNotesManager(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        Optional\u003cJsonSerializableNotesManager\u003e jsonNotesManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                filePath, JsonSerializableNotesManager.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        if (!jsonNotesManager.isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            return Optional.of(jsonNotesManager.get().toModelType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void saveNotesManager(ReadOnlyNotes notes) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        saveNotesManager(notes, filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Similar to {@link #saveNotesManager(ReadOnlyNotes)}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void saveNotesManager(ReadOnlyNotes notes, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireNonNull(notes);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableNotesManager(notes), filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/notes/JsonSerializableNotesManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.storage.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_NOTES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.NotesManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.ReadOnlyNotes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * Immutable NotesManager that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "@JsonRootName(value \u003d \"notesManager\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class JsonSerializableNotesManager {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final List\u003cJsonAdaptedNotes\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Constructs a {@code JsonSerializableNotesManager} with the given notes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param notes"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public JsonSerializableNotesManager(@JsonProperty(\"notes\") List\u003cJsonAdaptedNotes\u003e notes) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.notes.addAll(notes);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Converts a given {@code ReadOnlyNoes} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableNotesManager}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public JsonSerializableNotesManager(ReadOnlyNotes source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        notes.addAll(source.getNotesList().stream().map(JsonAdaptedNotes::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Converts notes records into the model\u0027s {@code NotesManager} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public NotesManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        NotesManager notesManager \u003d new NotesManager();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        for (JsonAdaptedNotes jsonAdaptedNotes : notes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            Notes note \u003d jsonAdaptedNotes.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            if (notesManager.hasNote(note)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_NOTES);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            notesManager.addNote(note);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return notesManager;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/notes/NotesManagerStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.storage.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.ReadOnlyNotes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * Represents a storage for {@link seedu.address.model.notes.NotesManager}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public interface NotesManagerStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    Path getNotesManagerFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Returns NotesManager data as a {@link ReadOnlyNotes}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Retuns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    Optional\u003cReadOnlyNotes\u003e readNotesManager() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @see #getNotesManagerFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    Optional\u003cReadOnlyNotes\u003e readNotesManager(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Saves the given {@link ReadOnlyNotes} to the storage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param notes cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    void saveNotesManager(ReadOnlyNotes notes) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @see #saveNotesManager(ReadOnlyNotes) ()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    void saveNotesManager(ReadOnlyNotes notes, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    public static final String HELP_MESSAGE \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            \"This is the comprehensive list of Commands and and help on how to use them. Enjoy! :)\" + \"\\n\" + \"\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"\\u2022 Adding Student: add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"nok/NAME-RELATIONSHIP-PHONE-NUMBER \" + \"temp/XX.X \" + \"att/PRESENCE\" + \"\\n\" + \"\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"Example. add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"t/colleague nok/jon-father-87654321 temp/36.2 att/Present\" + \"\\n\" + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"\\u2022 Clear : clear\" + \"\\n\" + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"\\u2022 Delete Student: delete INDEX\" + \"\\n\" + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"Example. delete 3\" + \"\\n\" + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"\\u2022 Edit Student: edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"[temp/TEMPERATURE] [att/ATTENDANCE]\" + \"\\n\" + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"Example. edit 2 n/James Lee e/jameslee@example.com\" + \"\\n\" + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            + \"\\u2022 Listing out all the students : list\" + \"\\n\" + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"\\u2022 Finding keywords: find KEYWORD(S)\" + \"\\n\" + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"Example. find James Jake\" + \"\\n\" + \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            + \"Academics\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            + \"Add new assessment: academics add [desc/DESCRIPTION] [type/TYPE] [date/DATE]\" + \"\\n\" + \"\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"\\u2022 Help Display : help\" + \"\\n\" + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"\\u2022 Display personal Schedule : myschedule\" + \"\\n\" + \"\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"\\u2022 Display detailed student list : detailed\" + \"\\n\" + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            + \"\\u2022 Displays the administrative content of the student list: admin\" + \"\\n\" + \"\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"\\u2022 Display default student list : default\" + \"\\n\" + \"\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"\\u2022 Adding Notes: notesa n/NAME c/CONTENT\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"\\u2022 Delete Notes: notesd INDEX\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"\\u2022 Filter Notes: notesf KEYWORD(S)\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            + \"\\u2022 Export Notes: notese\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 21,
      "Yuanyu97": 2,
      "-": 85,
      "tingalinga": 2,
      "garysyndromes": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private StudentListPanel studentListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private NotesPanel notesPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    private SchedulePage schedulePage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private SchedulePanel schedulePanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private StackPane mainPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private StackPane notesPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "        schedulePage \u003d new SchedulePage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        studentListPanel \u003d new StudentListPanel(logic.getFilteredStudentList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        mainPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        notesPanel \u003d new NotesPanel(logic.getFilteredNotesList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        notesPanelPlaceholder.getChildren().add(notesPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        schedulePanel \u003d new SchedulePanel(logic.getVEvents());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        mainPanelPlaceholder.getChildren().add(schedulePanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     *  Opens the Personal Schedule Page"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    public void handleSchedule() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        schedulePanel.update();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        schedulePanel.setDisplayedDateTime(logic.getEventScheduleLocalDateTime());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        schedulePanel.getRoot().toFront();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public StudentListPanel getStudentListPanel() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return studentListPanel;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            String consoleReply \u003d commandResult.getFeedbackToUser();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            logger.info(\"Result: \" + consoleReply);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            resultDisplay.setFeedbackToUser(consoleReply);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            if (consoleReply.equals(\"The Student list now displays ALL details\")) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                studentListPanel \u003d new StudentListPanel(logic.getFilteredStudentList(), \"detailed\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                mainPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            if (consoleReply.equals(\"The Student list now displays last updated ADMIN details\")) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                studentListPanel \u003d new StudentListPanel(logic.getFilteredStudentList(), \"admin display\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                mainPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            if (consoleReply.equals(\"The Student list now displays DEFAULT details\")) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                studentListPanel \u003d new StudentListPanel(logic.getFilteredStudentList());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                mainPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            if (consoleReply.contains(\"Notes are exported to studentNotes.txt\")) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                NotesExporter notesExporter \u003d new NotesExporter(logic.getFilteredNotesList());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                notesExporter.saveToTxt();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            if (consoleReply.contains(\"Admin list has been deleted for\")) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                studentListPanel \u003d new StudentListPanel(FXCollections.observableArrayList(logic.getFilteredDateList()"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        .get(0).getStudents()), \"admin display\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                mainPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            if (consoleReply.contains(\"Class admin details for\")) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                studentListPanel \u003d new StudentListPanel(FXCollections.observableArrayList(logic.getFilteredDateList()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        .get(0).getStudents()), \"admin display\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                mainPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            if (consoleReply.contains(\"This admin list has been saved for\")) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                studentListPanel \u003d new StudentListPanel(FXCollections.observableArrayList(logic.getFilteredDateList()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        .get(0).getStudents()), \"admin display\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                mainPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            if (consoleReply.contains(\"Added event\")) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                handleSchedule();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 18,
      "Yuanyu97": 22,
      "TheElectricBlender": 22,
      "-": 188,
      "garysyndromes": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NotesCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * Represents a Controller for NotesCard fxml."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private static final String FXML \u003d \"NotesCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public final Notes note;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private Label noteId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private Label content;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private Label dateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Constructor for NotesCard"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param note, with student\u0027s name, date added and content"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param displayedIndex, the Note\u0027s position in the ListView"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public NotesCard(Notes note, int displayedIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        name.setText(\"Student: \" + note.getStudent());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        noteId.setText(\"Note Index: #\" + displayedIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        content.setText(\"\\n\" + note.getContent());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        dateTime.setText(\"Added on: \" + note.getDateTime());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        if (!(other instanceof NotesCard)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        NotesCard card \u003d (NotesCard) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        //needs to edit"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NotesExporter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * Represents a NotesExporter which handles the UI aspects of the Notes feature."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesExporter {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final ObservableList\u003cNotes\u003e notesList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Constructor of NotesManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param notesList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public NotesExporter(ObservableList\u003cNotes\u003e notesList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.notesList \u003d notesList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Function which saves the notes to a .txt file is user\u0027s current directory."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void saveToTxt() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        String filePath \u003d \"/Users/gerrenseow/Documents/Gerren/MODULES/Y2S2/CS2103T/Team_Project/main/\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                + \"data/studentNotes.txt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        BufferedWriter writer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            writer \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            String toBeSaved \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            toBeSaved +\u003d \"Hello Teacher, here are the notes you have saved in TeaPet! :) \\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            toBeSaved +\u003d \"_______________________________________________________________ \\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            for (Notes note : notesList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                toBeSaved +\u003d \"Student: \" + note.getStudent() + \"\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                toBeSaved +\u003d \"Added on: \" + note.getDateTime() + \"\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                toBeSaved +\u003d \"Content: \" + note.getContent() + \"\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                toBeSaved +\u003d \"\\n_______________________________________________________________ \\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            writer.write(toBeSaved);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NotesPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * Represents a Controller class for NotesPanel fxml"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private static final String FXML \u003d \"NotesPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(NotesPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private ListView\u003cNotes\u003e notesView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Constuctor of NotesPanel, with an input of list of students."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param notesList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public NotesPanel(ObservableList\u003cNotes\u003e notesList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        notesView.setItems(notesList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        notesView.setCellFactory(view -\u003e new NotesViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Displays the note graphics"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    class NotesViewCell extends ListCell\u003cNotes\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        protected void updateItem(Notes note, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            super.updateItem(note, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            if (empty || note \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                setGraphic(new NotesCard(note, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SchedulePage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "public class SchedulePage extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    public static final String SCHEDULE_MESSAGE \u003d \"THIS IS MY PERSONAL SCHEDULE NOW BITCH\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SchedulePage.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    private static final String FXML \u003d \"SchedulePage.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    private Label scheduleMessage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    public SchedulePage(Stage root) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "        scheduleMessage.setText(SCHEDULE_MESSAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    public SchedulePage() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garysyndromes": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SchedulePanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import jfxtras.icalendarfx.VCalendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import jfxtras.internal.scene.control.skin.agenda.AgendaWeekSkin;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import jfxtras.scene.control.agenda.icalendar.ICalendarAgenda;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Represents the controller for the schedulePanel"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class SchedulePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private static final String FXML \u003d \"SchedulePanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private static final Locale UK \u003d Locale.UK;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private ICalendarAgenda agenda;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private VCalendar vCalendar;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SchedulePanel.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private BorderPane borderPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public SchedulePanel(ObservableList\u003cVEvent\u003e list) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.vCalendar \u003d new VCalendar();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        vCalendar.setVEvents(list);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.agenda \u003d new ICalendarAgenda(this.vCalendar);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        init(this.agenda);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        borderPane.setCenter(agenda);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        borderPane.setMaxWidth(Double.MAX_VALUE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Initialises the scheduler panel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void init(ICalendarAgenda agenda) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        agenda.setLocale(UK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        AgendaWeekSkin weekSkin \u003d new AgendaWeekSkin(this.agenda);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        agenda.setSkin(weekSkin);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        setSettings(this.agenda);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Configures settings for icalendar"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setSettings(ICalendarAgenda agenda) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        agenda.setAllowResize(false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        agenda.setAllowDragging(false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        agenda.setOnMousePressed(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        agenda.setOnTouchPressed(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        agenda.setEditAppointmentCallback(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        agenda.setAppointmentChangedCallback(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        agenda.setSelectedOneAppointmentCallback(null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        agenda.setNewAppointmentCallback(null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        agenda.setNewAppointmentDrawnCallback(null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Updates scheduler"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void update() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.agenda.updateAppointments();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Changes panel to show time interval"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param localDateTime"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setDisplayedDateTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.agenda.setDisplayedLocalDateTime(localDateTime);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ScheduleWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Class for screenshot purposes"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class ScheduleWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private static final String FXML \u003d \"ScheduleWindow.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ScheduleWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private BorderPane borderPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public ScheduleWindow(Stage stage, Region scheduleRegion) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        super(FXML, stage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        borderPane.setCenter(scheduleRegion);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Shows the schedule window"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        logger.config(\"Displaying Schedule\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        getRoot().setFullScreen(true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Closes the schedule window"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        getRoot().setFullScreen(false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        getRoot().close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.effect.DropShadow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * An UI component that displays minimal information of a {@code Student}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class StudentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private static final String FXML \u003d \"StudentListCard.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private ImageView image;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private Circle circle;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private Label notes;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Constructor to create the student card controller."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Important to note the format of the image, [namelowercasenospace].png"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * eg. Name is Simon Lam, image name is simonlam.png. 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * 1. All lower case"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * 2. No whitespaces"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public StudentCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        phone.setText(\"Mobile:  \" + student.getPhone().value);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        email.setText(\"Email:   \" + student.getEmail().value);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        notes.setText(\"No. of Notes:    \" + student.getNotes().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        student.getTags().stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            String path \u003d \"images/\" + student.getName().toString().toLowerCase().replaceAll(\"\\\\s+\", \"\") + \".png\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            File file \u003d new File(path);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                Image defaultImage \u003d new Image(\"images/default_person.png\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                circle.setStroke(Color.SEAGREEN);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                circle.setFill(new ImagePattern(defaultImage));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                circle.setEffect(new DropShadow(+25d, 0d, +2d, Color.DARKSEAGREEN));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                Image newImage \u003d new Image(file.toURI().toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                circle.setStroke(Color.SEAGREEN);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                circle.setFill(new ImagePattern(newImage));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                circle.setEffect(new DropShadow(+25d, 0d, +2d, Color.DARKSEAGREEN));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            logger.severe(e.getMessage());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        StudentCard card \u003d (StudentCard) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 6,
      "Yuanyu97": 1,
      "TheElectricBlender": 54,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentCardAdmin.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.effect.DropShadow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * An UI component that displays administrative information of a {@code Student}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class StudentCardAdmin extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private static final String FXML \u003d \"StudentListCardAdmin.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private Circle circle;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Label temperature;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Label attendance;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public StudentCardAdmin(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        temperature.setText(student.getTemperature().value.equals(\"Insert temperature here!\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                ? \"Temperature:   \" + student.getTemperature().value"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                : \"Temperature:   \" + student.getTemperature().value + \" \\u2103\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        attendance.setText(\"Attendance:   \" + student.getAttendance().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            String path \u003d \"images/\" + student.getName().toString().toLowerCase().replaceAll(\"\\\\s+\", \"\") + \".png\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            File file \u003d new File(path);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                Image defaultImage \u003d new Image(\"images/default_person.png\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                circle.setStroke(Color.SEAGREEN);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                circle.setFill(new ImagePattern(defaultImage));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                circle.setEffect(new DropShadow(+25d, 0d, +2d, Color.DARKSEAGREEN));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                Image newImage \u003d new Image(file.toURI().toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                circle.setStroke(Color.SEAGREEN);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                circle.setFill(new ImagePattern(newImage));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                circle.setEffect(new DropShadow(+25d, 0d, +2d, Color.DARKSEAGREEN));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            logger.severe(e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        StudentCardAdmin card \u003d (StudentCardAdmin) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 3,
      "Yuanyu97": 63,
      "TheElectricBlender": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentCardDetailed.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.effect.DropShadow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * An UI component that displays detailed information of a {@code Student}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class StudentCardDetailed extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private static final String FXML \u003d \"StudentListCardDetailed.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private Circle circle;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private Label temperature;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Label attendance;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private Label notes;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private Label nokName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private Label nokRelationship;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private Label nokContact;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Constructor to create the student card (detailed) controller."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Important to note the format of the image, [namelowercasenospace].png"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * eg. Name is Simon Lam, image name is simonlam.png. 1"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * 1. All lower case"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * 2. No whitespaces"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public StudentCardDetailed(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        phone.setText(\"Mobile:  \" + student.getPhone().value);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        address.setText(\"Address: \" + student.getAddress().value);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        email.setText(\"Email:   \" + student.getEmail().value);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        temperature.setText(student.getTemperature().value.equals(\"Insert temperature here!\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                ? \"Temperature:   \" + student.getTemperature().value"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                : \"Temperature:   \" + student.getTemperature().value + \" \\u2103\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        attendance.setText(\"Attendance:   \" + student.getAttendance().value);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        notes.setText(\"No. of Notes:    \" + student.getNotes().size());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        nokName.setText(\"NOK Name:  \" + student.getNok().getNameOfNok());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        nokRelationship.setText(\"NOK Relationship:  \" + student.getNok().getRelationshipOfNok());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        nokContact.setText(\"NOK Contact:  \" + student.getNok().getContactOfNok());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        student.getTags().stream()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            String path \u003d \"images/\" + student.getName().toString().toLowerCase().replaceAll(\"\\\\s+\", \"\") + \".png\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            File file \u003d new File(path);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                Image defaultImage \u003d new Image(\"images/default_person.png\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                circle.setStroke(Color.SEAGREEN);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                circle.setFill(new ImagePattern(defaultImage));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                circle.setEffect(new DropShadow(+25d, 0d, +2d, Color.DARKSEAGREEN));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                Image newImage \u003d new Image(file.toURI().toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                circle.setStroke(Color.SEAGREEN);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                circle.setFill(new ImagePattern(newImage));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                circle.setEffect(new DropShadow(+25d, 0d, +2d, Color.DARKSEAGREEN));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            logger.severe(e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        if (!(other instanceof StudentCardDetailed)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        StudentCardDetailed card \u003d (StudentCardDetailed) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 92,
      "Yuanyu97": 3,
      "TheElectricBlender": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Panel containing the list of students."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class StudentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private static final String FXML \u003d \"StudentListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StudentListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private ListView\u003cStudent\u003e studentListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public StudentListPanel(ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        studentListView.setItems(studentList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        studentListView.setCellFactory(listView -\u003e new StudentListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public StudentListPanel(ObservableList\u003cStudent\u003e studentList, String type) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        studentListView.setItems(studentList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        case \"detailed\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            studentListView.setCellFactory(listView -\u003e new StudentListViewCellDetailed());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        case \"admin display\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            studentListView.setCellFactory(listView -\u003e new StudentListViewCellAdmin());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        case \"refresh\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            studentListView.setCellFactory(listView -\u003e new StudentListViewCellRefresh());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            assert type.equals(\"detailed\") || type.equals(\"admin display\") || type.equals(\"refresh\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                   : \"The string type is invalid.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    class StudentListViewCell extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                setGraphic(new StudentCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    class StudentListViewCellDetailed extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                setGraphic(new StudentCardDetailed(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    class StudentListViewCellAdmin extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                setGraphic(new StudentCardAdmin(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    class StudentListViewCellRefresh extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                setGraphic(new StudentCardAdmin(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 24,
      "Yuanyu97": 27,
      "TheElectricBlender": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/teapot_icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 85,
      "tingalinga": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 1,
      "-": 88
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"TeaPet: Hello Teacher! What can I do for you today? :)\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "tingalinga": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import java.net.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.stage.*?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"550\" onCloseRequest\u003d\"#handleExit\" title\u003d\"TeaPet\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    \u003cImage url\u003d\"@/images/teapot_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        \u003cURL value\u003d\"@TempTheme.css\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Personal Schedule\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"scheduleMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleSchedule\" text\u003d\"Personal Schedule\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" prefWidth\u003d\"100.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        \u003cHBox fx:id\u003d\"studentList\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "          \u003cStackPane fx:id\u003d\"mainPanelPlaceholder\" minWidth\u003d\"500\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "          \u003cStackPane fx:id\u003d\"notesPanelPlaceholder\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 9,
      "TheElectricBlender": 10,
      "-": 36,
      "tingalinga": 1,
      "garysyndromes": 4
    }
  },
  {
    "path": "src/main/resources/view/NotesCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003cVBox minHeight\u003d\"50\" styleClass\u003d\"cardPane\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        \u003cVBox fx:id\u003d\"notesPane\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"50\" GridPane.columnIndex\u003d\"0\" \u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            \u003cLabel fx:id\u003d\"noteId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$noteId\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateTime\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            \u003cLabel fx:id\u003d\"content\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$content\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 28
    }
  },
  {
    "path": "src/main/resources/view/NotesPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"CENTER\" \u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    \u003cListView fx:id\u003d\"notesView\" styleClass\u003d\"list-view\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 8
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "  \u003c!-- There\u0027s an issue with the alignment and maximum width of the TextArea. Need to revisit--\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "  \u003cHBox fx:id\u003d\"cardPane\" styleClass\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\" \u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        \u003cImageView fx:id\u003d\"image\" fitHeight\u003d\"88.0\" fitWidth\u003d\"113.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "          \u003cimage\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            \u003cImage url\u003d\"@../images/official_teapet.png\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "          \u003c/image\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" centerShape\u003d\"true\" wrapText\u003d\"true\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 21,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/SchedulePage.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "\u003cfx:root title\u003d\"My Personal Schedule\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "        \u003cImage url\u003d\"@/images/schedule_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "                    \u003cLabel fx:id\u003d\"scheduleMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garysyndromes"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "garysyndromes": 34
    }
  },
  {
    "path": "src/main/resources/view/SchedulePanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    \u003cBorderPane fx:id\u003d\"borderPane\" VBox.vgrow\u003d\"ALWAYS\" maxWidth\u003d\"Infinity\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 8
    }
  },
  {
    "path": "src/main/resources/view/ScheduleWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "         title\u003d\"scheduleWindowView\" minWidth\u003d\"450\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u003cURL value\u003d\"@TempTheme.css\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                \u003cBorderPane fx:id\u003d\"borderPane\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 21
    }
  },
  {
    "path": "src/main/resources/view/StudentListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.scene.shape.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" styleClass\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "  \u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"50.0\" prefWidth\u003d\"85.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "         \u003cCircle fx:id\u003d\"circle\" radius\u003d\"40.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"17.0\" prefWidth\u003d\"46.0\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003cLabel fx:id\u003d\"notes\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$notes\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 10,
      "TheElectricBlender": 11,
      "-": 23
    }
  },
  {
    "path": "src/main/resources/view/StudentListCardAdmin.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.scene.shape.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    \u003cVBox alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"50.0\" prefWidth\u003d\"85.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "         \u003cCircle fx:id\u003d\"circle\" fill\u003d\"DODGERBLUE\" radius\u003d\"40.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"60.0\" prefHeight\u003d\"60.0\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"17.0\" prefWidth\u003d\"46.0\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            \u003cLabel fx:id\u003d\"temperature\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$temperature\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            \u003cLabel fx:id\u003d\"attendance\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$attendance\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 1,
      "Yuanyu97": 36,
      "TheElectricBlender": 5
    }
  },
  {
    "path": "src/main/resources/view/StudentListCardDetailed.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003c?import javafx.scene.shape.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "  \u003cVBox alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"50.0\" prefWidth\u003d\"85.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "         \u003cCircle fx:id\u003d\"circle\" fill\u003d\"DODGERBLUE\" radius\u003d\"40.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"17.0\" prefWidth\u003d\"46.0\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003cLabel fx:id\u003d\"temperature\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$temperature\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "      \u003cLabel fx:id\u003d\"attendance\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$attendance\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003cLabel fx:id\u003d\"nokName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nokName\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003cLabel fx:id\u003d\"nokRelationship\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nokRelationship\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003cLabel fx:id\u003d\"nokContact\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nokContact\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003cLabel fx:id\u003d\"notes\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$notes\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 44,
      "Yuanyu97": 1,
      "TheElectricBlender": 5
    }
  },
  {
    "path": "src/main/resources/view/StudentListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"CENTER\" \u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    \u003cListView fx:id\u003d\"studentListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 2,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        final Index fifthStudentIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(fifthStudentIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TEMPERATURE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.logic.commands.RefreshCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.ReadOnlyAcademics;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.ReadOnlyAdmin;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.storage.academics.JsonAcademicsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.storage.admin.JsonAdminStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.storage.event.JsonEventStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.storage.notes.JsonNotesManagerStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        JsonAdminStorage adminStorage \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                new JsonAdminStorage(temporaryFolder.resolve(\"admin.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        JsonAcademicsStorage academicsStorage \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                new JsonAcademicsStorage(temporaryFolder.resolve(\"academics.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        JsonNotesManagerStorage notesManagerStorage \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                new JsonNotesManagerStorage(temporaryFolder.resolve(\"notes.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        JsonEventStorage eventHistory \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new JsonEventStorage(temporaryFolder.resolve(\"event.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, adminStorage, academicsStorage,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                userPrefsStorage, eventHistory, notesManagerStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String listCommand \u003d RefreshCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertCommandSuccess(listCommand, RefreshCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub and JsonAcademicsIoExceptionThrowingStub"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        JsonAdminStorage adminStorage \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                new JsonAdminIoExceptionThrowingStub(temporaryFolder.resolve(\"ioException.json\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        JsonAcademicsStorage academicsStorage \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                new JsonAcademicsIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAcademics.json\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        JsonNotesManagerStorage notesManagerStorage \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                new JsonNotesManagerStorage(temporaryFolder.resolve(\"notes.json\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        JsonEventStorage eventHistory \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new JsonEventStorage(temporaryFolder.resolve(\"event.json\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, adminStorage, academicsStorage,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                userPrefsStorage, eventHistory, notesManagerStorage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + ADDRESS_DESC_AMY + TEMPERATURE_DESC_AMY;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        expectedModel.addStudent(expectedStudent);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredStudentList().remove(0));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getAcademics(), model.getAdmin(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                model.getNotesManager(), new UserPrefs(), model.getEventHistory());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private static class JsonAdminIoExceptionThrowingStub extends JsonAdminStorage {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        private JsonAdminIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        public void saveAdmin(ReadOnlyAdmin admin, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private static class JsonAcademicsIoExceptionThrowingStub extends JsonAcademicsStorage {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        private JsonAcademicsIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        public void saveAcademics(ReadOnlyAcademics academics, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 5,
      "Yuanyu97": 31,
      "TheElectricBlender": 17,
      "-": 145,
      "tingalinga": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static seedu.address.testutil.TypicalAssessments.getTypicalAcademics;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.testutil.TypicalDates.getTypicalAdmin;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.getTypicalNotes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.event.TypicalEvents.getTypicalEventHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalAcademics(), getTypicalAdmin(), getTypicalNotes(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new UserPrefs(), getTypicalEventHistory());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void execute_newStudent_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getAcademics(), model.getAdmin(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                model.getNotesManager(), new UserPrefs(), getTypicalEventHistory());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        expectedModel.addStudent(validStudent);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertCommandSuccess(new AddCommand(validStudent), model,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validStudent), expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student studentInList \u003d model.getAddressBook().getStudentList().get(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertCommandFailure(new AddCommand(studentInList), model, AddCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 1,
      "Yuanyu97": 3,
      "TheElectricBlender": 14,
      "-": 33,
      "tingalinga": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.academics.Assessment;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.ReadOnlyAcademics;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.ReadOnlyAdmin;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.EventScheduleView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.ReadOnlyEvents;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.ReadOnlyVEvents;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.ReadOnlyNotes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void constructor_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void execute_studentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validStudent).execute(modelStub);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validStudent), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertEquals(Arrays.asList(validStudent), modelStub.studentsAdded);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validStudent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithStudent(validStudent);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_STUDENT, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student alice \u003d new StudentBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student bob \u003d new StudentBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        public Path getAdminFilePath() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        public void setAdminFilePath(Path adminBookFilePath) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        public void setAdmin(ReadOnlyAdmin admin) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        public ReadOnlyAdmin getAdmin() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        public boolean hasDate(Date date) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        public void deleteDate(Date target) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        public void addDate(Date date) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        public void setDate(Date target, Date date) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        public ObservableList\u003cDate\u003e getFilteredDateList() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        public void updateFilteredDateList(Predicate\u003cDate\u003e predicate) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        public Path getAcademicsFilePath() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        public void setAcademicsFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        public void setAcademics(ReadOnlyAcademics academics) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        public ReadOnlyAcademics getAcademics() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        public boolean hasAssessment(Assessment assessment) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        public void deleteAssessment(Assessment target) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        public void addAssessment(Assessment assessment) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        public void setAssessment(Assessment target, Assessment assessment) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        public ObservableList\u003cAssessment\u003e getFilteredAcademicsList() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        public void updateFilteredAcademicsList(Predicate\u003cAssessment\u003e predicate) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        public Path getNotesFilePath() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        public void setNotesFilePath(Path notesFilePath) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        public void setNotesManager(ReadOnlyNotes notes) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        public ReadOnlyNotes getNotesManager() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        public boolean hasNote(Notes note) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        public void deleteNote(Notes note) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        public void addNote(Notes note) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        public void setNote(Notes target, Notes edited) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        public ObservableList\u003cNotes\u003e getFilteredNotesList() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        public void updateFilteredNotesList(Predicate\u003cNotes\u003e predicate) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public boolean hasVEvent(VEvent vEvent) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public void addVEvent(VEvent vEvent) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public void delete(Index index) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public void setVEvent(Index index, VEvent vEvent) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public VEvent getVEvent(Index index) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public ObservableList\u003cVEvent\u003e getVEvents() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public void setEventHistory(ReadOnlyEvents events) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public void setEventHistory(Path eventHistoryFilePath) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public ReadOnlyEvents getEventHistory() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public ReadOnlyVEvents getVEventHistory() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public void setEventScheduleLocalDateTime(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public String getEventSchedulePref() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public LocalDateTime getEventScheduleLocalDateTime() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public EventScheduleView getEventScheduleView() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public void setEventScheduleView(EventScheduleView eventScheduleView) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * A Model stub that contains a single student."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private class ModelStubWithStudent extends ModelStub {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        private final Student student;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        ModelStubWithStudent(Student student) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            this.student \u003d student;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return this.student.isSameStudent(student);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * A Model stub that always accept the student being added."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private class ModelStubAcceptingStudentAdded extends ModelStub {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        final ArrayList\u003cStudent\u003e studentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return studentsAdded.stream().anyMatch(student::isSameStudent);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            studentsAdded.add(student);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 52,
      "Yuanyu97": 58,
      "TheElectricBlender": 106,
      "-": 172,
      "tingalinga": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static seedu.address.testutil.TypicalAssessments.getTypicalAcademics;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.testutil.TypicalDates.getTypicalAdmin;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.getTypicalNotes;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.event.TypicalEvents.getTypicalEventHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalAcademics(), getTypicalAdmin(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                getTypicalNotes(), new UserPrefs(), getTypicalEventHistory());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalAcademics(), getTypicalAdmin(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                getTypicalNotes(), new UserPrefs(), getTypicalEventHistory());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 1,
      "Yuanyu97": 3,
      "TheElectricBlender": 4,
      "-": 29,
      "tingalinga": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEMPERATURE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String VALID_ATTENDANCE_AMY \u003d \"Present\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String VALID_ATTENDANCE_BOB \u003d \"Absent\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String VALID_REMARK_AMY \u003d \"Like skiing.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String VALID_REMARK_BOB \u003d \"Favourite pastime: Eating\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String VALID_TEMPERATURE_AMY \u003d \"36.5\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String VALID_TEMPERATURE_BOB \u003d \"37.0\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String VALID_NOK_AMY \u003d \"Joseph-Father-98765432\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String VALID_NOK_BOB \u003d \"Johnny-Father-94765432\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String TEMPERATURE_DESC_AMY \u003d \" \" + PREFIX_TEMPERATURE + VALID_TEMPERATURE_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String TEMPERATURE_DESC_BOB \u003d \" \" + PREFIX_TEMPERATURE + VALID_TEMPERATURE_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String ATTENDANCE_DESC_AMY \u003d \" \" + PREFIX_ATTENDANCE + VALID_ATTENDANCE_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String ATTENDANCE_DESC_BOB \u003d \" \" + PREFIX_ATTENDANCE + VALID_ATTENDANCE_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String NOK_DESC_AMY \u003d \" \" + PREFIX_NOK + VALID_NOK_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String NOK_DESC_BOB \u003d \" \" + PREFIX_NOK + VALID_NOK_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String INVALID_TEMPERATURE_DESC_1 \u003d \" \" + PREFIX_TEMPERATURE + \"3a.5\"; //\"a\" not allowed in"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    // temperature"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String INVALID_TEMPERATURE_DESC_2 \u003d \" \" + PREFIX_TEMPERATURE + \"41.1\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String INVALID_ATTENDANCE_DESC \u003d \" \" + PREFIX_ATTENDANCE + \"Present!\"; //\"!\" not allowed in"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    // attendance"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    // academics"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final String VALID_DESCRIPTION_MATH_ASSIGNMENT \u003d \"Math Assignment\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final String VALID_DESCRIPTION_SCIENCE_EXAM \u003d \"Science Assignment\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final String VALID_TYPE_MATH_ASSIGNMENT \u003d \"homework\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final String VALID_TYPE_SCIENCE_EXAM \u003d \"exam\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final String VALID_DATE_MATH_ASSIGNMENT \u003d \"2020-03-05\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final String VALID_DATE_SCIENCE_EXAM \u003d \"2020-05-25\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final EditCommand.EditStudentDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final EditCommand.EditStudentDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        DESC_AMY \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                .withTemperature(VALID_TEMPERATURE_AMY).withAttendance(VALID_ATTENDANCE_AMY)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        DESC_BOB \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                .withTemperature(VALID_TEMPERATURE_BOB).withAttendance(VALID_ATTENDANCE_BOB)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * - the address book, filtered student list and selected student in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        List\u003cStudent\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the student at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static void showStudentAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        final String[] splitName \u003d student.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        model.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertEquals(1, model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 19,
      "TheElectricBlender": 24,
      "-": 110,
      "tingalinga": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static seedu.address.testutil.TypicalAssessments.getTypicalAcademics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.testutil.TypicalDates.getTypicalAdmin;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.getTypicalNotes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.event.TypicalEvents.getTypicalEventHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalAcademics(), getTypicalAdmin(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            getTypicalNotes(), new UserPrefs(), getTypicalEventHistory());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getAcademics(), model.getAdmin(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                model.getNotesManager(), new UserPrefs(), getTypicalEventHistory());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getAcademics(), model.getAdmin(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                model.getNotesManager(), new UserPrefs(), getTypicalEventHistory());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        showNoStudent(expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_STUDENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private void showNoStudent(Model model) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        model.updateFilteredStudentList(p -\u003e false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(model.getFilteredStudentList().isEmpty());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 1,
      "Yuanyu97": 5,
      "TheElectricBlender": 32,
      "-": 78,
      "tingalinga": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static seedu.address.testutil.TypicalAssessments.getTypicalAcademics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.testutil.TypicalDates.getTypicalAdmin;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.getTypicalNotes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.event.TypicalEvents.getTypicalEventHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Academics;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Admin;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.NotesManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalAcademics(), getTypicalAdmin(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            getTypicalNotes(), new UserPrefs(), getTypicalEventHistory());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT, descriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), model.getAcademics(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                model.getAdmin(), model.getNotesManager(), new UserPrefs(), getTypicalEventHistory());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        expectedModel.setStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Index indexLastStudent \u003d Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student lastStudent \u003d model.getFilteredStudentList().get(indexLastStudent.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        StudentBuilder studentInList \u003d new StudentBuilder(lastStudent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student editedStudent \u003d studentInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastStudent, descriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                new Academics(model.getAcademics()), new Admin(model.getAdmin()),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new NotesManager(model.getNotesManager()), new UserPrefs(), getTypicalEventHistory());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        expectedModel.setStudent(lastStudent, editedStudent);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT, new EditStudentDescriptor());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student editedStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                new Academics(model.getAcademics()), new Admin(model.getAdmin()),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new NotesManager(model.getNotesManager()), new UserPrefs(), getTypicalEventHistory());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student studentInFilteredList \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(studentInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                new Academics(model.getAcademics()), new Admin(model.getAdmin()),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new NotesManager(model.getNotesManager()), new UserPrefs(), getTypicalEventHistory());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        expectedModel.setStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void execute_duplicateStudentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(firstStudent).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_STUDENT, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void execute_duplicateStudentFilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        // edit student in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student studentInList \u003d model.getAddressBook().getStudentList().get(INDEX_SECOND_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new EditStudentDescriptorBuilder(studentInList).build());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_STUDENT, DESC_AMY);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EditStudentDescriptor copyDescriptor \u003d new EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_STUDENT, copyDescriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_STUDENT, DESC_AMY)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_STUDENT, DESC_BOB)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 2,
      "Yuanyu97": 7,
      "TheElectricBlender": 64,
      "-": 111,
      "tingalinga": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditStudentDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class EditStudentDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        seedu.address.logic.commands.EditCommand.EditStudentDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EditStudentDescriptor editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 10,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static seedu.address.testutil.TypicalAssessments.getTypicalAcademics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.testutil.TypicalDates.getTypicalAdmin;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.getTypicalNotes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.CARL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ELLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.FIONA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.event.TypicalEvents.getTypicalEventHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalAcademics(), getTypicalAdmin(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            getTypicalNotes(), new UserPrefs(), getTypicalEventHistory());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalAcademics(), getTypicalAdmin(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            getTypicalNotes(), new UserPrefs(), getTypicalEventHistory());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void execute_zeroKeywords_noStudentFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void execute_multipleKeywords_multipleStudentsFound() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 1,
      "Yuanyu97": 4,
      "TheElectricBlender": 18,
      "-": 66,
      "tingalinga": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RefreshCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static seedu.address.testutil.TypicalAssessments.getTypicalAcademics;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.testutil.TypicalDates.getTypicalAdmin;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.getTypicalNotes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.event.TypicalEvents.getTypicalEventHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for RefreshCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class RefreshCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalAcademics(), getTypicalAdmin(), getTypicalNotes(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new UserPrefs(), getTypicalEventHistory());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getAcademics(), model.getAdmin(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                model.getNotesManager(), new UserPrefs(), getTypicalEventHistory());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertCommandSuccess(new RefreshCommand(), model, RefreshCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertCommandSuccess(new RefreshCommand(), model, RefreshCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 1,
      "Yuanyu97": 4,
      "TheElectricBlender": 11,
      "-": 29,
      "tingalinga": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemarkCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static seedu.address.testutil.TypicalAssessments.getTypicalAcademics;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.testutil.TypicalDates.getTypicalAdmin;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.testutil.TypicalNotes.getTypicalNotes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.event.TypicalEvents.getTypicalEventHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Academics;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Admin;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.NotesManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for RemarkCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class RemarkCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private static final String REMARK_STUB \u003d \"Some remark\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalAcademics(), getTypicalAdmin(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            getTypicalNotes(), new UserPrefs(), getTypicalEventHistory());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void execute_addRemarkUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(firstStudent).withRemark(REMARK_STUB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new Remark(editedStudent.getRemark().value));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                new Academics(model.getAcademics()), new Admin(model.getAdmin()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new NotesManager(model.getNotesManager()), new UserPrefs(), getTypicalEventHistory());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        expectedModel.setStudent(firstStudent, editedStudent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void execute_deleteRemarkUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(firstStudent).withRemark(\"\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new Remark(editedStudent.getRemark().toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_DELETE_REMARK_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                new Academics(model.getAcademics()), new Admin(model.getAdmin()),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new NotesManager(model.getNotesManager()), new UserPrefs(), getTypicalEventHistory());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        expectedModel.setStudent(firstStudent, editedStudent);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                model.getFilteredStudentList().get(INDEX_FIRST_STUDENT.getZeroBased()))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                .withRemark(REMARK_STUB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new Remark(editedStudent.getRemark().value));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                new Academics(model.getAcademics()), new Admin(model.getAdmin()),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new NotesManager(model.getNotesManager()), new UserPrefs(), getTypicalEventHistory());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        expectedModel.setStudent(firstStudent, editedStudent);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_STUDENT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getStudentList().size());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        final RemarkCommand standardCommand \u003d new RemarkCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                new Remark(VALID_REMARK_AMY));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        RemarkCommand commandWithSameValues \u003d new RemarkCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                new Remark(VALID_REMARK_AMY));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_SECOND_STUDENT,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                new Remark(VALID_REMARK_AMY))));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_FIRST_STUDENT,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                new Remark(VALID_REMARK_BOB))));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 2,
      "Yuanyu97": 94,
      "TheElectricBlender": 44,
      "tingalinga": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/notes/NotesCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.logic.commands.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/notes/NotesDeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.logic.commands.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesDeleteCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/notes/NotesExportCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.logic.commands.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesExportCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/notes/NotesFilterCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.logic.commands.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesFilterCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/studentdisplay/AdminStudentDisplayCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.logic.commands.studentdisplay;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class AdminStudentDisplayCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/studentdisplay/DefaultStudentDisplayCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.logic.commands.studentdisplay;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class DefaultStudentDisplayCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/studentdisplay/DetailedStudentDisplayCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.logic.commands.studentdisplay;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class DetailedStudentDisplayCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ATTENDANCE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ATTENDANCE_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ATTENDANCE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TEMPERATURE_DESC_1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TEMPERATURE_DESC_2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NOK_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TEMPERATURE_DESC_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TEMPERATURE_DESC_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TEMPERATURE_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Temperature;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NOK_DESC_BOB + ATTENDANCE_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        + TEMPERATURE_DESC_BOB,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NOK_DESC_BOB + TEMPERATURE_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        + ATTENDANCE_DESC_BOB,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NOK_DESC_BOB + TEMPERATURE_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        + ATTENDANCE_DESC_BOB,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NOK_DESC_BOB + TEMPERATURE_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        + ATTENDANCE_DESC_BOB,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + NOK_DESC_BOB + TEMPERATURE_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        + ATTENDANCE_DESC_BOB,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student expectedStudentMultipleTags \u003d new StudentBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + NOK_DESC_BOB + TEMPERATURE_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        + ATTENDANCE_DESC_BOB,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                new AddCommand(expectedStudentMultipleTags));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        + NOK_DESC_BOB + TEMPERATURE_DESC_AMY + ATTENDANCE_DESC_AMY,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                new AddCommand(expectedStudent));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + TEMPERATURE_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + VALID_TEMPERATURE_BOB + VALID_ATTENDANCE_BOB, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + NOK_DESC_BOB + TEMPERATURE_DESC_BOB"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + ADDRESS_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + NOK_DESC_BOB + TEMPERATURE_DESC_BOB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + ADDRESS_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + NOK_DESC_BOB + TEMPERATURE_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + ADDRESS_DESC_BOB, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + NOK_DESC_BOB + TEMPERATURE_DESC_BOB"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        + ATTENDANCE_DESC_BOB,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND + NOK_DESC_BOB + TEMPERATURE_DESC_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + ATTENDANCE_DESC_BOB, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        // invalid temperature format"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + INVALID_TEMPERATURE_DESC_1 + ATTENDANCE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                Temperature.MESSAGE_CONSTRAINTS_1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        // invalid temperature range"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        + INVALID_TEMPERATURE_DESC_2 + ATTENDANCE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                Temperature.MESSAGE_CONSTRAINTS_2);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        //invalid attendance"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        + VALID_TEMPERATURE_BOB + INVALID_ATTENDANCE_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                Attendance.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        // invalid NOK"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        + NOK_DESC_BOB + TEMPERATURE_DESC_BOB + ATTENDANCE_DESC_BOB,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + NOK_DESC_BOB + TEMPERATURE_DESC_BOB"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        + ATTENDANCE_DESC_BOB,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 60,
      "TheElectricBlender": 19,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Test to check the returns of prefix of argmultimap"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param argMultimap argument multimap"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * @param prefix prefix of input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        switch (prefix.getPrefix()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        case \"p/\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            assertFalse(argMultimap.getValue(prefix).equals(\"Insert phone number here!\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        case \"a/\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            assertFalse(argMultimap.getValue(prefix).equals(\"Insert address here!\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        case \"e/\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            assertFalse(argMultimap.getValue(prefix).equals(\"Insert email here!\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        case \"temp/\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            assertFalse(argMultimap.getValue(prefix).equals(\"Insert temperature here!\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String check \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 3,
      "TheElectricBlender": 19,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", ce);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            assertEquals(expectedMessage, ce.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 5,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_STUDENT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TEMPERATURE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TEMPERATURE_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "//import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "//import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "//import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "//import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Student} being edited,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_STUDENT;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + TEMPERATURE_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                .withTemperature(VALID_TEMPERATURE_AMY).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_STUDENT;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 6,
      "TheElectricBlender": 53,
      "-": 154
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 1,
      "TheElectricBlender": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertEquals(INDEX_FIRST_STUDENT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertEquals(INDEX_FIRST_STUDENT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 7,
      "-": 189
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TeaPetParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_STUDENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.logic.commands.RefreshCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.testutil.StudentUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class TeaPetParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final TeaPetParser parser \u003d new TeaPetParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(StudentUtil.getAddCommand(student));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertEquals(new AddCommand(student), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_STUDENT.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_STUDENT), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(student).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                + INDEX_FIRST_STUDENT.getOneBased() + \" \" + StudentUtil.getEditStudentDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_STUDENT, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(parser.parseCommand(RefreshCommand.COMMAND_WORD) instanceof RefreshCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(parser.parseCommand(RefreshCommand.COMMAND_WORD + \" 3\") instanceof RefreshCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 21,
      "-": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/notes/NotesCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.logic.parser.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/notes/NotesDeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.logic.parser.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesDeleteCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/notes/NotesFilterCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.logic.parser.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesFilterCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getStudentList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void resetData_withDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        // Two students with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        List\u003cStudent\u003e newStudents \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newStudents);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasStudent(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void hasStudent_studentNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertFalse(addressBook.hasStudent(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void hasStudent_studentInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        addressBook.addStudent(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(addressBook.hasStudent(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void hasStudent_studentWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        addressBook.addStudent(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(addressBook.hasStudent(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void getStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getStudentList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * A stub ReadOnlyAddressBook whose students list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        private final ObservableList\u003cStudent\u003e students \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        AddressBookStub(Collection\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            this.students.setAll(students);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            return students;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 31,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSESSMENTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static seedu.address.testutil.TypicalAssessments.CHINESE_HOMEWORK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static seedu.address.testutil.TypicalAssessments.SCIENCE_HOMEWORK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.testutil.TypicalDates.FEB_26_2020;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.testutil.TypicalDates.JAN_26_2020;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Academics;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Admin;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.EventHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.NotesManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.testutil.AcademicsBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.testutil.AdminBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertEquals(new Admin(), new Admin(modelManager.getAdmin()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        assertEquals(new Academics(), new Academics(modelManager.getAcademics()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        assertEquals(new NotesManager(), new NotesManager(modelManager.getNotesManager()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        userPrefs.setAcademicsFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        userPrefs.setAdminFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        userPrefs.setAcademicsFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        userPrefs.setAdminFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasStudent(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void hasStudent_studentNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertFalse(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void hasStudent_studentInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        modelManager.addStudent(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredStudentList().remove(0));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void setAcademicsFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAcademicsFilePath(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void setAcademicsFilePath_validPath_setsAcademicsFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Path path \u003d Paths.get(\"academics/file/path\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        modelManager.setAcademicsFilePath(path);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        assertEquals(path, modelManager.getAcademicsFilePath());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void hasAssessment_nullAssessment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasAssessment(null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void hasAssessment_assessmentNotInAcademics_returnsFalse() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        assertFalse(modelManager.hasAssessment(SCIENCE_HOMEWORK));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void hasAssessment_assessmentInAcademics_returnsTrue() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        modelManager.addAssessment(SCIENCE_HOMEWORK);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        assertTrue(modelManager.hasAssessment(SCIENCE_HOMEWORK));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void getFilteredAcademicsList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            -\u003e modelManager.getFilteredAcademicsList().remove(0));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withStudent(ALICE).withStudent(BENSON).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Academics academics \u003d new AcademicsBuilder().withAssessment(SCIENCE_HOMEWORK)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                .withAssessment(CHINESE_HOMEWORK).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Academics differentAcademics \u003d new Academics();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Admin admin \u003d new AdminBuilder().withDate(JAN_26_2020).withDate(FEB_26_2020).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Admin differentAdmin \u003d new Admin();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        NotesManager notesManager \u003d new NotesManager();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EventHistory eventHistory \u003d new EventHistory();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, academics, admin, notesManager, userPrefs , eventHistory);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, academics, admin, notesManager, userPrefs,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                eventHistory);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, differentAcademics, differentAdmin,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                notesManager, userPrefs, eventHistory)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String[] studentKeywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        modelManager.updateFilteredStudentList(new NameContainsKeywordsPredicate(Arrays.asList(studentKeywords)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        String[] assessmentKeywords \u003d SCIENCE_HOMEWORK.getDescription().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        modelManager.updateFilteredAcademicsList("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Arrays.asList(assessmentKeywords)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, academics, admin, notesManager, userPrefs,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                eventHistory)));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        modelManager.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        modelManager.updateFilteredAcademicsList(PREDICATE_SHOW_ALL_ASSESSMENTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        differentUserPrefs.setAcademicsFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, academics, admin, notesManager,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                differentUserPrefs, eventHistory)));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 3,
      "Yuanyu97": 20,
      "TheElectricBlender": 17,
      "-": 112,
      "tingalinga": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/notes/NotesTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Notes(null, null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void constructor_invalidNotes_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        String invalidNote \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        String content \u003d \"Test Content\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Notes(invalidNote, content));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public void isValidNote() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Notes.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        assertFalse(Notes.isValidName(\"James.Wong.\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        assertFalse(Notes.isValidName(\"Alice!!\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        assertFalse(Notes.isValidName(\"Phua Lai Wee #455\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        assertFalse(Notes.isValidName(\"Jane_Koh\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        assertFalse(Notes.isValidName(\"Mr Chan C. W.\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/AddressTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/AttendanceTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class AttendanceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Temperature(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void constructor_invalidAttendance_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String invalidAttendance \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Attendance(invalidAttendance));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void isValidAttendance() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        // null attendances"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Attendance.isValidAttendance(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        // invalid attendances"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertFalse(Attendance.isValidAttendance(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertFalse(Attendance.isValidAttendance(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertFalse(Attendance.isValidAttendance(\"Present1\")); // containing numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertFalse(Attendance.isValidAttendance(\"temperature\")); // does not contain keyword"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertFalse(Attendance.isValidAttendance(\"present\")); // p is not capital"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertFalse(Attendance.isValidAttendance(\"PreSent\")); // S is not small capital"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertFalse(Attendance.isValidAttendance(\"Pre sent\")); // spaces within alphabets"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        // valid attendances"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertTrue(Attendance.isValidAttendance(\"Present\")); // valid attendance"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertTrue(Attendance.isValidAttendance(\"Sick\")); // valid attendance"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertTrue(Attendance.isValidAttendance(\"Late\")); // valid attendance"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertTrue(Attendance.isValidAttendance(\"Absent\")); // valid attendance"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/EmailTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/NameContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertFalse(predicate.test(new StudentBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 10,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/NameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/NextOfKinTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class NextOfKinTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new NextOfKin(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void constructor_invalidNok_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String invalidNok \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new NextOfKin(invalidNok));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void isValidTNok() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        // null temperatures"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e NextOfKin.isValidNok(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        // invalid NOK"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertFalse(NextOfKin.isValidNok(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertFalse(NextOfKin.isValidNok(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertFalse(NextOfKin.isValidNok(\"nok\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        // valid NOK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(NextOfKin.isValidNok(\"Insert NOK details here!\")); // Insert comment allowed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(NextOfKin.isValidNok(\"jon-father-12345\")); // correct format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/PhoneTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"Insert phone number here!\")); // Insert comment allowed"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 2,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/StudentTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TEMPERATURE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class StudentTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e student.getTags().remove(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void isSameStudent() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(ALICE.isSameStudent(ALICE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertFalse(ALICE.isSameStudent(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                .withTemperature(VALID_TEMPERATURE_BOB).withAttendance(VALID_ATTENDANCE_BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student aliceCopy \u003d new StudentBuilder(ALICE).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        //different temperature -\u003e return false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTemperature(VALID_TEMPERATURE_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        //different attendance state -\u003e return false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withAttendance(VALID_ATTENDANCE_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 11,
      "TheElectricBlender": 26,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/TemperatureTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class TemperatureTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Temperature(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void constructor_invalidTemperature_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String invalidTemperature \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Temperature(invalidTemperature));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void isValidTemperature() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        // null temperatures"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Temperature.isValidTemperatureFirst(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        // invalid temperatures"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertFalse(Temperature.isValidTemperatureFirst(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertFalse(Temperature.isValidTemperatureFirst(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertFalse(Temperature.isValidTemperatureFirst(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertFalse(Temperature.isValidTemperatureFirst(\"temperature\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertFalse(Temperature.isValidTemperatureFirst(\"2f.5\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertFalse(Temperature.isValidTemperatureFirst(\"23/5\")); // invalid \"/\" symbol"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertFalse(Temperature.isValidTemperatureFirst(\"1 5.3\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertFalse(Temperature.isValidTemperatureSecond(\"24.9\")); //temp too low"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertFalse(Temperature.isValidTemperatureSecond(\"41.1\")); //temp too high"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        // valid temperatures"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertTrue(Temperature.isValidTemperatureFirst(\"Insert temperature here!\")); // Insert comment allowed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertTrue(Temperature.isValidTemperatureFirst(\"36.5\")); // 2 digits, followed by a decimal place"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertTrue(Temperature.isValidTemperatureSecond(\"Insert temperature here!\")); // Insert comment allowed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertTrue(Temperature.isValidTemperatureSecond(\"36.5\")); // temp within valid temp range"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/UniqueStudentListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class UniqueStudentListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private final UniqueStudentList uniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void contains_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void contains_studentNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertFalse(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void contains_studentInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void contains_studentWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertTrue(uniqueStudentList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void add_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void add_duplicateStudent_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setStudent_nullTargetStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setStudent_nullEditedStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setStudent_targetStudentNotInList_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentList.setStudent(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setStudent_editedStudentIsSameStudent_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        expectedUniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setStudent_editedStudentHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        expectedUniqueStudentList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setStudent_editedStudentHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setStudent_editedStudentHasNonUniqueIdentity_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        uniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.setStudent(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void remove_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void remove_studentDoesNotExist_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void remove_existingStudent_removesStudent() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        uniqueStudentList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setStudents_nullUniqueStudentList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudents((UniqueStudentList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setStudents_uniqueStudentList_replacesOwnListWithProvidedUniqueStudentList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        uniqueStudentList.setStudents(expectedUniqueStudentList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setStudents_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudents((List\u003cStudent\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setStudents_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        uniqueStudentList.setStudents(studentList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void setStudents_listWithDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        List\u003cStudent\u003e listWithDuplicateStudents \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.setStudents(listWithDuplicateStudents));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            -\u003e uniqueStudentList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedNotesTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class JsonAdaptedNotesTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedStudentTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.storage.JsonAdaptedStudent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.NextOfKin;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Temperature;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class JsonAdaptedStudentTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private static final String INVALID_TEMPERATURE_1 \u003d \"36\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private static final String INVALID_TEMPERATURE_2 \u003d \"41.1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private static final String INVALID_ATTENDANCE \u003d \"present\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private static final String INVALID_NOK \u003d \"Jim-friend-9238457\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private static final String VALID_TEMPERATURE \u003d BENSON.getTemperature().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private static final String VALID_ATTENDANCE \u003d BENSON.getAttendance().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private static final List\u003cJsonAdaptedNotes\u003e VALID_NOTES \u003d BENSON.getNotes().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            .map(JsonAdaptedNotes::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private static final String VALID_NOK \u003d BENSON.getNok().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void toModelType_validStudentDetails_returnsStudent() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(BENSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertEquals(BENSON, student.toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                new JsonAdaptedStudent(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TEMPERATURE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        VALID_ATTENDANCE, VALID_NOK, VALID_NOTES, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                new JsonAdaptedStudent(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TEMPERATURE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        VALID_ATTENDANCE, VALID_NOK, VALID_NOTES, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TEMPERATURE,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        VALID_ATTENDANCE, VALID_NOK, VALID_NOTES, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TEMPERATURE,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        VALID_NOK, VALID_ATTENDANCE, VALID_NOTES, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TEMPERATURE,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        VALID_ATTENDANCE, VALID_NOK, VALID_NOTES, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TEMPERATURE, VALID_NOK,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        VALID_ATTENDANCE, VALID_NOTES, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TEMPERATURE,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        VALID_ATTENDANCE, VALID_NOK, VALID_NOTES, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TEMPERATURE, VALID_NOK,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        VALID_ATTENDANCE, VALID_NOTES, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void toModelType_invalidNok_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TEMPERATURE,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        VALID_ATTENDANCE, INVALID_NOK, VALID_NOTES, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String expectedMessage \u003d NextOfKin.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void toModelType_nullNok_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TEMPERATURE,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        VALID_ATTENDANCE, null, VALID_NOTES, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, NextOfKin.class.getSimpleName());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void toModelType_invalidTemperatureFormat_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        INVALID_TEMPERATURE_1, VALID_ATTENDANCE, VALID_NOK, VALID_NOTES, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String expectedMessage \u003d Temperature.MESSAGE_CONSTRAINTS_1;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void toModelType_invalidTemperatureRange_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        INVALID_TEMPERATURE_2, VALID_ATTENDANCE, VALID_NOK, VALID_NOTES, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String expectedMessage \u003d Temperature.MESSAGE_CONSTRAINTS_2;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void toModelType_nullTemperature_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        null, VALID_ATTENDANCE, VALID_NOK, VALID_NOTES, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Temperature.class.getSimpleName());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void toModelType_invalidAttendance_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        VALID_TEMPERATURE, INVALID_ATTENDANCE, VALID_NOK, VALID_NOTES, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String expectedMessage \u003d Attendance.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public void toModelType_nullAttendance_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        VALID_TEMPERATURE, null, VALID_NOK, VALID_NOTES, VALID_REMARK, VALID_TAGS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Attendance.class.getSimpleName());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "                new JsonAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TEMPERATURE,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                        VALID_ATTENDANCE, VALID_NOK, VALID_NOTES, VALID_REMARK, invalidTags);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(IllegalValueException.class, student::toModelType);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    // test here for invalidNOK or nullNOK"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 24,
      "Yuanyu97": 68,
      "TheElectricBlender": 47,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void readAddressBook_invalidStudentAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidStudentAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void readAddressBook_invalidAndValidStudentAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidStudentAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        original.addStudent(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        original.removeStudent(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        original.addStudent(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 11,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.testutil.TypicalStudents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private static final Path TYPICAL_STUDENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalStudentsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private static final Path INVALID_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidStudentAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private static final Path DUPLICATE_STUDENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateStudentAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void toModelType_typicalStudentsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_STUDENTS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        AddressBook typicalStudentsAddressBook \u003d TypicalStudents.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        file:///Users/freddy/Desktop/main/build/reports/checkstyle/main.html"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertEquals(addressBookFromFile, typicalStudentsAddressBook);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void toModelType_invalidStudentFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_STUDENT_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public void toModelType_duplicateStudents_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_STUDENT_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_STUDENT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 1,
      "TheElectricBlender": 13,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        userPrefs.setAcademicsFilePath(Paths.get(\"academics.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        userPrefs.setAdminFilePath(Paths.get(\"admin.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        userPrefs.setNotesFilePath(Paths.get(\"notes.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        userPrefs.setEventHistoryFilePath(Paths.get(\"events.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 3,
      "-": 121,
      "tingalinga": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.testutil.TypicalStudents.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.storage.academics.JsonAcademicsStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.storage.admin.JsonAdminStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.storage.event.JsonEventStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.storage.notes.JsonNotesManagerStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        JsonAcademicsStorage academicsStorage \u003d new JsonAcademicsStorage(getTempFilePath(\"acad\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        JsonAdminStorage adminStorage \u003d new JsonAdminStorage(getTempFilePath(\"ad\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        JsonNotesManagerStorage notesManagerStorage \u003d new JsonNotesManagerStorage(getTempFilePath(\"notes\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        JsonEventStorage eventStorage \u003d new JsonEventStorage(getTempFilePath(\"event\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, adminStorage, academicsStorage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                userPrefsStorage, eventStorage, notesManagerStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void academicsReadSave() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Academics original \u003d getTypicalAcademics();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        storageManager.saveAcademics(original);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        ReadOnlyAcademics retrieved \u003d storageManager.readAcademics().get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        assertEquals(original, new Academics(retrieved));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public void getAcademicsFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        assertNotNull(storageManager.getSavedAcademicsFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 2,
      "Yuanyu97": 5,
      "TheElectricBlender": 3,
      "-": 66,
      "tingalinga": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AcademicsBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Academics;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Assessment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * A utility class to help with building Academics objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " *     {@code Academics ac \u003d new AcademicsBuilder().withAssessment(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class AcademicsBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private Academics academics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public AcademicsBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        academics \u003d new Academics();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public AcademicsBuilder(Academics academics) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.academics \u003d academics;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Adds a new {@code Assessment} to the {@code Academics} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public AcademicsBuilder withAssessment(Assessment assessment) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        academics.addAssessment(assessment);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Academics build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return academics;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withStudent(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Adds a new {@code Student} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public AddressBookBuilder withStudent(Student student) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        addressBook.addStudent(student);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 5,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AdminBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Admin;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * A utility class to help with building Admin objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " *     {@code Admin ad \u003d new AdminBuilder().withDate(\"Jan 26\", \"Feb 26\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class AdminBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Admin admin;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public AdminBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        admin \u003d new Admin();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public AdminBuilder(Admin admin) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.admin \u003d admin;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Adds a new {@code Date} to the {@code Admin} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public AdminBuilder withDate(Date date) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        admin.addDate(date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Admin build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return admin;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AssessmentBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Assessment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Exam;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Homework;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Submission;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * A utility class to help with building Student objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class AssessmentBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"CS2103 Assignment\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final String DEFAULT_TYPE \u003d \"homework\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"2020-03-04\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private List\u003cSubmission\u003e submissionTracker;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public AssessmentBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        type \u003d DEFAULT_TYPE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        date \u003d DEFAULT_DATE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        submissionTracker \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Initializes the StudentBuilder with the data of {@code studentToCopy}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public AssessmentBuilder(Assessment assessmentToCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        description \u003d assessmentToCopy.getDescription();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (assessmentToCopy instanceof Homework) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            type \u003d \"homework\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            type \u003d \"exam\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        date \u003d assessmentToCopy.getDateString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (Submission submission: submissionTracker) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            submissionTracker.add(submission);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Sets the {@code Description} of the {@code Assessment} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public AssessmentBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Parses the {@code submissions} into a {@code List\u003cSubmission\u003e} and set it to the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * {@code Assessment} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public AssessmentBuilder withSubmissions(Submission ... submissions) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (Submission submission: submissions) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            submissionTracker.add(submission);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Sets the {@code type} of the {@code Assessment} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public AssessmentBuilder withType(String type) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Sets the {@code date} of the {@code Assessment} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public AssessmentBuilder withDate(String date) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Builds an assessment."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public Assessment build() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        if (type.equals(\"homework\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            Homework homework \u003d new Homework(description, date);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            homework.setSubmissionTracker(submissionTracker);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return homework;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            Exam exam \u003d new Exam(description, date);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            exam.setSubmissionTracker(submissionTracker);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            return exam;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DateBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * A utility class to help with building Date objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class DateBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"2020-03-21\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private List\u003cStudent\u003e students;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public DateBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        date \u003d LocalDate.parse(DEFAULT_DATE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        List\u003cStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Initializes the DateBuilder with the data of {@code datetToCopy}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public DateBuilder(Date dateToCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        date \u003d dateToCopy.getDate();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        students \u003d dateToCopy.getStudents();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Sets the {@code Date} of the {@code Date} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public DateBuilder withDate(LocalDate date) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Student} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public DateBuilder withStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.students \u003d students;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Builds a date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public Date build() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return new Date(date, students);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditStudentDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Temperature;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * A utility class to help with building EditStudentDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class EditStudentDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private EditStudentDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EditStudentDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        descriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EditStudentDescriptorBuilder(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.descriptor \u003d new EditStudentDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns an {@code EditStudentDescriptor} with fields containing {@code student}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EditStudentDescriptorBuilder(Student student) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        descriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        descriptor.setName(student.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        descriptor.setPhone(student.getPhone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        descriptor.setEmail(student.getEmail());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        descriptor.setAddress(student.getAddress());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        descriptor.setTemperature(student.getTemperature());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        descriptor.setAttendance(student.getAttendance());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        descriptor.setTags(student.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Sets the {@code Name} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EditStudentDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EditStudentDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Sets the {@code Email} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EditStudentDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Sets the {@code Address} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EditStudentDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Sets the {@code Temperature} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public EditStudentDescriptorBuilder withTemperature(String temperature) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        descriptor.setTemperature(new Temperature(temperature));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Sets the {@code Temperature} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public EditStudentDescriptorBuilder withAttendance(String attendance) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        descriptor.setAttendance(new Attendance(attendance));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditStudentDescriptor}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EditStudentDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EditStudentDescriptor build() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 20,
      "TheElectricBlender": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/NotesManagerBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.NotesManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * A utility class to help with building NotesManager objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesManagerBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private NotesManager notesManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public NotesManagerBuilder() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        notesManager \u003d new NotesManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public NotesManagerBuilder(NotesManager notesManager) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        this.notesManager \u003d notesManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * Constructs a NotesManagerBuilder with notes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @param note"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public NotesManagerBuilder withNotes(Notes note) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        notesManager.addNote(note);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public NotesManager build() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return notesManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StudentBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Attendance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.NextOfKin;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Temperature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * A utility class to help with building Student objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class StudentBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String DEFAULT_TEMPERATURE \u003d \"36.5\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String DEFAULT_ATTENDANCE \u003d \"Present\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"She likes aardvarks.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String DEFAULT_NOK \u003d \"Joseph-Father-90045722\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Temperature temperature;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Attendance attendance;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    private ArrayList\u003cNotes\u003e notes;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private NextOfKin nok;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public StudentBuilder() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        temperature \u003d new Temperature(DEFAULT_TEMPERATURE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        attendance \u003d new Attendance(DEFAULT_ATTENDANCE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        nok \u003d new NextOfKin(DEFAULT_NOK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Initializes the StudentBuilder with the data of {@code studentToCopy}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public StudentBuilder(Student studentToCopy) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        name \u003d studentToCopy.getName();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        phone \u003d studentToCopy.getPhone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        email \u003d studentToCopy.getEmail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        address \u003d studentToCopy.getAddress();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        temperature \u003d studentToCopy.getTemperature();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        attendance \u003d studentToCopy.getAttendance();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        notes \u003d new ArrayList\u003c\u003e(studentToCopy.getNotes());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        remark \u003d studentToCopy.getRemark();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(studentToCopy.getTags());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        nok \u003d studentToCopy.getNok();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Sets the {@code Name} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public StudentBuilder withName(String name) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Student} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public StudentBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Sets the {@code Address} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public StudentBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Sets the {@code Phone} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public StudentBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Sets the {@code Email} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public StudentBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Sets the {@code Temperature} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public StudentBuilder withTemperature(String temperature) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.temperature \u003d new Temperature(temperature);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Sets the {@code Attendance} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public StudentBuilder withAttendance(String attendance) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.attendance \u003d new Attendance(attendance);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Sets the {@code Remark} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public StudentBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Sets the {@code Nok} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public StudentBuilder withNok(String nok) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.nok \u003d new NextOfKin(nok);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Builds a student."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public Student build() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return new Student(name, phone, email, address, temperature,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                attendance, nok, notes, remark, tags);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 5,
      "Yuanyu97": 38,
      "TheElectricBlender": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StudentUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEMPERATURE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * A utility class for Student."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class StudentUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns an add command string for adding the {@code student}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static String getAddCommand(Student student) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getStudentDetails(student);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns the part of command string for the given {@code student}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static String getStudentDetails(Student student) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        sb.append(PREFIX_NAME + student.getName().fullName + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        sb.append(PREFIX_PHONE + student.getPhone().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        sb.append(PREFIX_EMAIL + student.getEmail().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        sb.append(PREFIX_ADDRESS + student.getAddress().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        sb.append(PREFIX_TEMPERATURE + student.getTemperature().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        sb.append(PREFIX_ATTENDANCE + student.getAttendance().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        student.getTags().stream().forEach("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns the part of command string for the given {@code EditStudentDescriptor}\u0027s details."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static String getEditStudentDescriptorDetails(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        descriptor.getTemperature().ifPresent(temperature -\u003e sb.append(PREFIX_TEMPERATURE).append(temperature.value)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        descriptor.getAttendance().ifPresent(attendance -\u003e sb.append(PREFIX_ATTENDANCE).append(attendance.value)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 8,
      "TheElectricBlender": 16,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns the middle index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns the last index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns the student in the {@code model}\u0027s student list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static Student getStudent(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return model.getFilteredStudentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAssessments.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_MATH_ASSIGNMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_SCIENCE_EXAM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MATH_ASSIGNMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_SCIENCE_EXAM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_MATH_ASSIGNMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_SCIENCE_EXAM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Academics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Assessment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "import seedu.address.model.academics.Submission;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " * A utility class containing a list of {@code Assessment} objects to be used in tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tingalinga"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "public class TypicalAssessments {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final Submission[] SUBMISSIONS \u003d {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        new Submission(\"Simon Lam\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        new Submission(\"Gerren Seow\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        new Submission(\"Lee Hui Ting\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        new Submission(\"Gary Syndromes\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        new Submission(\"Freddy Zhang\")};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final Assessment SCIENCE_HOMEWORK \u003d new AssessmentBuilder().withDescription(\"Science Homework\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            .withSubmissions(SUBMISSIONS).withType(\"homework\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            .withDate(\"2020-03-04\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final Assessment CHINESE_HOMEWORK \u003d new AssessmentBuilder().withDescription(\"Chinese Homework\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            .withSubmissions(SUBMISSIONS).withType(\"homework\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            .withDate(\"2020-03-04\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final Assessment ENGLISH_HOMEWORK \u003d new AssessmentBuilder().withDescription(\"English Homework\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            .withSubmissions(SUBMISSIONS).withType(\"homework\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            .withDate(\"2020-03-04\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final Assessment MATH_EXAM \u003d new AssessmentBuilder().withDescription(\"Math Exam\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            .withSubmissions(SUBMISSIONS).withType(\"exam\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            .withDate(\"2020-03-04\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final Assessment CHINESE_EXAM \u003d new AssessmentBuilder().withDescription(\"Chinese Exam\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            .withSubmissions(SUBMISSIONS).withType(\"exam\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            .withDate(\"2020-03-04\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final Assessment ENGLISH_EXAM \u003d new AssessmentBuilder().withDescription(\"English Exam\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            .withSubmissions(SUBMISSIONS).withType(\"exam\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            .withDate(\"2020-03-04\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    // Manually added - Student\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final Assessment MATH_HOMEWORK \u003d new AssessmentBuilder()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_MATH_ASSIGNMENT)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            .withSubmissions(SUBMISSIONS).withType(VALID_TYPE_MATH_ASSIGNMENT)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            .withDate(VALID_DATE_MATH_ASSIGNMENT).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final Assessment SCIENCE_EXAM \u003d new AssessmentBuilder()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_SCIENCE_EXAM)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            .withSubmissions(SUBMISSIONS).withType(VALID_TYPE_SCIENCE_EXAM)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            .withDate(VALID_DATE_SCIENCE_EXAM).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    private TypicalAssessments() {} // prevents instantiation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     * Returns an {@code Academics} with all the typical assessments."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static Academics getTypicalAcademics() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        Academics acad \u003d new Academics();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        for (Assessment assessment : getTypicalAssessments()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "            acad.addAssessment(assessment);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return acad;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tingalinga"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    public static List\u003cAssessment\u003e getTypicalAssessments() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SCIENCE_HOMEWORK, CHINESE_HOMEWORK, ENGLISH_HOMEWORK,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "                MATH_EXAM, CHINESE_EXAM, ENGLISH_EXAM));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tingalinga"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tingalinga": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalDates.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Admin;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.admin.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " * A utility class containing a list of {@code Date} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "public class TypicalDates {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final List\u003cStudent\u003e STUDENTS \u003d TypicalStudents.getTypicalStudents();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final Date JAN_26_2020 \u003d new DateBuilder().withDate(LocalDate.parse(\"2020-01-26\"))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            .withStudents(STUDENTS).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static final Date FEB_26_2020 \u003d new DateBuilder().withDate(LocalDate.parse(\"2020-02-26\"))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            .withStudents(STUDENTS).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private TypicalDates() {} // prevents instantiation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     * Returns an {@code Date} with all the typical dates."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static Admin getTypicalAdmin() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        Admin ad \u003d new Admin();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        for (Date date : getTypicalDates()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            ad.addDate(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return ad;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    public static List\u003cDate\u003e getTypicalDates() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(JAN_26_2020, FEB_26_2020));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Index INDEX_FIRST_STUDENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Index INDEX_SECOND_STUDENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Index INDEX_THIRD_STUDENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalNotes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "import seedu.address.model.notes.NotesManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " * Represents Typical Notes used for testing."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrenss"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class TypicalNotes {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static final Notes[] TYPICAL_NOTES \u003d {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        new Notes(\"Simon Lam\", \"Good Student\", \"29/03/2020 22:40\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        new Notes(\"Gerren Seow\", \"Good Student\", \"29/03/2020 22:41\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        new Notes(\"Lee Hui Ting\", \"Good Student\", \"29/03/2020 22:42\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        new Notes(\"Gary Syndromes\", \"Good Student\", \"29/03/2020 22:43\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        new Notes(\"Freddy Zhang\", \"Good Student\", \"29/03/2020 22:44\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    };"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    public static NotesManager getTypicalNotes() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        NotesManager notesManager \u003d new NotesManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        for (Notes note : TYPICAL_NOTES) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "            notesManager.addNote(note);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "        return notesManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalStudents.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TEMPERATURE_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TEMPERATURE_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * A utility class containing a list of {@code Student} objects to be used in tests."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class TypicalStudents {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Student ALICE \u003d new StudentBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withPhone(\"94351253\").withRemark(\"She likes aardvarks.\").withNok(\"Joseph-Father-90045722\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            .withTags(\"friends\").withTemperature(\"36.5\").withAttendance(\"Present\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Student BENSON \u003d new StudentBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withRemark(\"He can\u0027t take beer!\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withNok(\"Jojo-Father-90045712\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withTemperature(\"36.5\").withAttendance(\"Present\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Student CARL \u003d new StudentBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withNok(\"Joji-Father-91045722\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            .withAttendance(\"Present\").withTemperature(\"36.5\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Student DANIEL \u003d new StudentBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTemperature(\"36.5\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            .withAttendance(\"Present\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Student ELLE \u003d new StudentBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withTemperature(\"36.5\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            .withAttendance(\"Present\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Student FIONA \u003d new StudentBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withEmail(\"lydia@example.com\").withTemperature(\"36.5\").withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            .withAttendance(\"Present\").withTemperature(\"36.5\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Student GEORGE \u003d new StudentBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            .withEmail(\"anna@example.com\").withTemperature(\"36.5\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            .withAttendance(\"Present\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Student HOON \u003d new StudentBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            .withEmail(\"stefan@example.com\").withTemperature(\"36.5\").withAddress(\"little india\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            .withAttendance(\"Present\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Student IDA \u003d new StudentBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            .withEmail(\"hans@example.com\").withTemperature(\"36.5\").withAddress(\"chicago ave\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            .withAttendance(\"Present\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    // Manually added - Student\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Student AMY \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            .withTemperature(VALID_TEMPERATURE_AMY).withAttendance(VALID_ATTENDANCE_AMY).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Student BOB \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            .withTemperature(VALID_TEMPERATURE_BOB).withAttendance(VALID_ATTENDANCE_BOB).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private TypicalStudents() {} // prevents instantiation"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical students."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        for (Student student : getTypicalStudents()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            ab.addStudent(student);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static List\u003cStudent\u003e getTypicalStudents() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 22,
      "TheElectricBlender": 24,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/event/EventBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.testutil.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.RecurrenceType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * Utility class for making event objects"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String DEFAULT_EVENT_NAME \u003d \"Event\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final LocalDateTime DEFAULT_EVENT_START_TIME \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final LocalDateTime DEFAULT_EVENT_END_TIME \u003d LocalDateTime.now().plusHours(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String DEFAULT_COLOR_CODE \u003d \"group01\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final String DEFAULT_UNIQUE_IDENTIFIER \u003d \"uniqueIdentifier\" + LocalDateTime.now().toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final RecurrenceType DEFAULT_RECUR_TYPE \u003d RecurrenceType.NONE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private String eventName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private String colorCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private String uniqueIdentifer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    private RecurrenceType recurrenceType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Constructs the event builder"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        eventName \u003d DEFAULT_EVENT_NAME;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        startDateTime \u003d DEFAULT_EVENT_START_TIME;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        endDateTime \u003d DEFAULT_EVENT_END_TIME;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        colorCode \u003d DEFAULT_COLOR_CODE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        uniqueIdentifer \u003d DEFAULT_UNIQUE_IDENTIFIER;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        recurrenceType \u003d DEFAULT_RECUR_TYPE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Constructs the event builder with {@code eventName}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EventBuilder(Event event) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        eventName \u003d event.getEventName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        startDateTime \u003d event.getStartDateTime();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        endDateTime \u003d event.getEndDateTime();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        colorCode \u003d event.getColorCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        uniqueIdentifer \u003d event.getUniqueIdentifier();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        recurrenceType \u003d event.getRecurrenceType();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * The builder sets {@code Event} with {@code eventName}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EventBuilder withEventName(String eventName) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * The builder sets {@code Event} with {@code startDateTime}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EventBuilder withStartDateTime(LocalDateTime startDateTime) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * The builder sets {@code Event} with {@code endDateTime}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EventBuilder withEndDateTime(LocalDateTime endDateTime) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * The builder sets {@code Event} with {@code colorCode}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EventBuilder withColorCode(String colorCode) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.colorCode \u003d colorCode;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * The builder sets {@code Event} with {@code uniqueIdentifier}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EventBuilder withUniqueIdentifier(String uniqueIdentifier) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.uniqueIdentifer \u003d uniqueIdentifier;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * The builder sets {@code Event} with {@code recurrenceType}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public EventBuilder withRecurrenceType(RecurrenceType recurrenceType) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        this.recurrenceType \u003d recurrenceType;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Builds the event"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return new Event(eventName, startDateTime, endDateTime, colorCode, uniqueIdentifer, recurrenceType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/event/TypicalEvents.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.testutil.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.EventHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import seedu.address.model.event.RecurrenceType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * A utility class containing a list of {@code Events} objects to be used in tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class TypicalEvents {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Event EVENT1 \u003d new EventBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withEventName(\"Sleep abit cuz tired\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withStartDateTime(LocalDateTime.parse(\"2020-04-01T08:00\"))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withEndDateTime(LocalDateTime.parse(\"2020-04-01T10:00\"))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withColorCode(\"group01\").withUniqueIdentifier(\"eventTest1\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withRecurrenceType(RecurrenceType.NONE).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Event EVENT2 \u003d new EventBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withEventName(\"Shower cuz smelly\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withStartDateTime(LocalDateTime.parse(\"2020-04-02T08:00\"))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withEndDateTime(LocalDateTime.parse(\"2020-04-02T10:00\"))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withColorCode(\"group02\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withUniqueIdentifier(\"eventTest2\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withRecurrenceType(RecurrenceType.NONE).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Event EVENT3 \u003d new EventBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withEventName(\"Run cuz feeling fat\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withStartDateTime(LocalDateTime.parse(\"2020-04-03T08:00\"))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withEndDateTime(LocalDateTime.parse(\"2020-04-03T10:00\"))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "            .withColorCode(\"group03\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withUniqueIdentifier(\"eventTest3\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withRecurrenceType(RecurrenceType.NONE).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final Event NON_TYPICAL_EVENT \u003d new EventBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withEventName(\"Not Typical Event\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withStartDateTime(LocalDateTime.parse(\"2020-04-04T08:00\"))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withEndDateTime(LocalDateTime.parse(\"2020-04-04T10:00\"))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withColorCode(\"group04\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withUniqueIdentifier(\"eventTestNonTypical\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withRecurrenceType(RecurrenceType.NONE).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    private TypicalEvents() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     * Returns an {@code EventRecord} with all the typical events."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static EventHistory getTypicalEventHistory() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        EventHistory ab \u003d new EventHistory(getTypicalEvents());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static List\u003cEvent\u003e getTypicalEvents() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(EVENT1, EVENT2, EVENT3));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yuanyu97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yuanyu97": 4,
      "TheElectricBlender": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/event/TypicalVEvents.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "package seedu.address.testutil.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.util.EventUtil.DAILY_RECUR_RULE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.util.EventUtil.NO_RECUR_RULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import static seedu.address.commons.util.EventUtil.WEEKLY_RECUR_RULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "import jfxtras.icalendarfx.components.VEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " * A utility class containing a list of {@code VEvents} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "public class TypicalVEvents {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final VEvent VEVENT1 \u003d new VEvent()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withSummary(\"Sleep abit cuz tired\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withDateTimeStart(LocalDateTime.parse(\"2020-04-01T08:00\"))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withDateTimeEnd(LocalDateTime.parse(\"2020-04-01T10:00\"))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withCategories(\"group01\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withUniqueIdentifier(\"eventTest1\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withRecurrenceRule(NO_RECUR_RULE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final VEvent VEVENT2 \u003d new VEvent()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withSummary(\"Shower cuz smelly\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withDateTimeStart(LocalDateTime.parse(\"2020-04-02T08:00\"))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withDateTimeEnd(LocalDateTime.parse(\"2020-04-01T10:00\"))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withCategories(\"group02\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withUniqueIdentifier(\"eventTest2\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withRecurrenceRule(DAILY_RECUR_RULE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "    public static final VEvent NON_TYPICAL_VEVENT \u003d new VEvent()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withSummary(\"Not Typical Event\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withDateTimeStart(LocalDateTime.parse(\"2020-04-03T08:00\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withDateTimeEnd(LocalDateTime.parse(\"2020-04-03T10:00\"))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withCategories(\"group04\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withUniqueIdentifier(\"eventTestNonTypical\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "            .withRecurrenceRule(WEEKLY_RECUR_RULE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheElectricBlender"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheElectricBlender": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/NotesManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrenss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "public class NotesManagerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrenss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrenss": 4
    }
  }
]
