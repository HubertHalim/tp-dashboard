[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        \u0027site-name\u0027: \u0027$AVE IT\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-T10-3/main/\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        //\u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "zwasd": 3,
      "-": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.storage.JsonAccountListStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing $AVE IT ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAccountListStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Optional\u003cReadOnlyAccountList\u003e addressBookOptional;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList initialData;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Account\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            // initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook); TODO"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            initialData \u003d (AccountList) addressBookOptional.orElseGet(() -\u003e new AccountList(true));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Account\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            initialData \u003d new AccountList(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Account\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            initialData \u003d new AccountList(true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Account\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        logger.info(\"Starting Account \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping $AVE IT ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 7,
      "-": 166,
      "JJiahui": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_INVALID_EXPENDITURE_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            \"The expenditure index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_EXPENDITURES_LISTED_OVERVIEW \u003d \"%1$d expenditures listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_INVALID_ACCOUNT_NAME \u003d \"The account with the specified name was not found.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 3,
      "-": 10,
      "JJiahui": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(Path filePath, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 3,
      "-": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Returns the Account."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @see seedu.address.model.Model#getAccountList()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    ReadOnlyAccountList getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of expenditures */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    ObservableList\u003cExpenditure\u003e getFilteredExpenditureList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 4,
      "-": 43,
      "JJiahui": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.TopLevelParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final TopLevelParser topLevelParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        topLevelParser \u003d new TopLevelParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Command command \u003d topLevelParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            storage.saveAddressBook(model.getAccountList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ReadOnlyAccountList getAddressBook() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return model.getAccountList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ObservableList\u003cExpenditure\u003e getFilteredExpenditureList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return model.getFilteredExpenditureList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 8,
      "-": 67,
      "JJiahui": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Report stats to user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private final boolean showReport;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The indicator of the current active date in the calendar view should change."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final boolean updateCalendar;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private LocalDate newActiveDate \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                         boolean showReport, boolean updateCalendar) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.showReport \u003d showReport;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.updateCalendar \u003d updateCalendar;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public CommandResult(String feedbackToUser, LocalDate newActiveDate) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this(feedbackToUser, false, false, false, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.newActiveDate \u003d newActiveDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this(feedbackToUser, false, false, false, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public boolean isShowReport() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return showReport;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean isUpdateCalendar() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return updateCalendar;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public LocalDate getNewActiveDate() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return newActiveDate;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \u0026\u0026 showReport \u003d\u003d otherCommandResult.showReport"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \u0026\u0026 updateCalendar \u003d\u003d otherCommandResult.updateCalendar;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, showReport, updateCalendar);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 17,
      "sp-shaopeng": 2,
      "-": 65,
      "JJiahui": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/account/AccAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.model.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Add account."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccAddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String NAME_CONTAIN_SPACE \u003d \"The account name contains space\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String NAME_TOO_LONG \u003d \"The account name should be less than 25 characters\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New account added: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACCOUNT \u003d \"This account name already exists in the $AVE IT\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final Account toAdd;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public AccAddCommand(Account account) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        toAdd \u003d account;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return new CommandResult(\"Not implemented yet.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                || (other instanceof AccAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AccAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 21,
      "zwasd": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/account/AccCheckoutCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.account.AccLevelParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Change to another account."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccCheckoutCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"checkout\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d AccLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \": Checks out the account with the specified name.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"Parameters: ACCOUNT_NAME (must be one word containing any characters)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"Example: \" + AccLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD + \" default\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_CHECKOUT_SUCCESS \u003d \"Successfully checked out account: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final String accountName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccCheckoutCommand(String accountName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.accountName \u003d accountName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!model.updateActiveAccount(accountName)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACCOUNT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CHECKOUT_SUCCESS, accountName));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 21,
      "JJiahui": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/account/AccClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Clears the account."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"this account\u0027s data has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        model.clearActiveAccount();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 1,
      "zwasd": 5,
      "-": 17,
      "JJiahui": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/account/AccDeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Delete account."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccDeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String NAME_CONTAIN_SPACE \u003d \"The account name should not contain space\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String NAME_TOO_LONG \u003d \"The account name should be less than 25 characters\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String MESSAGE_DELETE_EXPENDITURE_SUCCESS \u003d \"Deleted Account: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final String targetAccountName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public AccDeleteCommand(String targetAccountName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.targetAccountName \u003d targetAccountName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 12,
      "zwasd": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/account/AccListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENDITURES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Lists all expenditures in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Command is in wrong format.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all accounts\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        model.updateFilteredExpenditureList(PREDICATE_SHOW_ALL_EXPENDITURES);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 3,
      "zwasd": 7,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/account/AccRenameCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Rename account."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccRenameCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rename\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"this account\u0027s name has changed from %1$s to %1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String INVALID_NAME_INPUT \u003d \"Please key in the right input\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final String newName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final String oldName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public AccRenameCommand(String oldName, String newName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.newName \u003d newName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.oldName \u003d oldName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            model.renameAccount(this.oldName, this.newName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACCOUNT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 20,
      "zwasd": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/expenditure/ExpAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INFO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.expenditure.ExpLevelParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Adds a expenditure to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpAddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ExpLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \": Adds a expenditure to the address book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + PREFIX_INFO + \"INFO \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + PREFIX_INFO + \"Chicken rice \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + PREFIX_AMOUNT + \"3.5 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + PREFIX_DATE + \"2019-09-11 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + PREFIX_TAG + \"friends\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expenditure added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENDITURE \u003d \"This expenditure already exists in $AVE IT.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final Expenditure toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Creates an ExpAddCommand to add the specified {@code Expenditure}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpAddCommand(Expenditure expenditure) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(expenditure);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        toAdd \u003d expenditure;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (model.hasExpenditure(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENDITURE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        model.addExpenditure(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                || (other instanceof ExpAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u0026\u0026 toAdd.equals(((ExpAddCommand) other).toAdd)); // same fields"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 27,
      "-": 33,
      "JJiahui": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/expenditure/ExpDeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.expenditure.ExpLevelParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Deletes a expenditure identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpDeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ExpLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \": Deletes the expenditure identified by the index number used in the displayed expenditure list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_DELETE_EXPENDITURE_SUCCESS \u003d \"Deleted Expenditure: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        List\u003cExpenditure\u003e lastShownList \u003d model.getFilteredExpenditureList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENDITURE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure expenditureToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        model.deleteExpenditure(expenditureToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXPENDITURE_SUCCESS, expenditureToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                || (other instanceof ExpDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ExpDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 14,
      "-": 38,
      "JJiahui": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/expenditure/ExpEditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INFO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENDITURES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.expenditure.ExpLevelParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Amount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Info;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Edits the details of an existing expenditure in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpEditCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ExpLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \": Edits the details of the expenditure identified \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            + \"by the index number used in the displayed expenditure list. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"[\" + PREFIX_INFO + \"INFO] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"Example: \" + ExpLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + PREFIX_AMOUNT + \"4.3\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_EDIT_EXPENDITURE_SUCCESS \u003d \"Edited Expenditure: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENDITURE \u003d \"This expenditure already exists in $AVE IT.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final EditExpenditureDescriptor editExpenditureDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param index                     of the expenditure in the filtered expenditure list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @param editExpenditureDescriptor details to edit the expenditure with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpEditCommand(Index index, EditExpenditureDescriptor editExpenditureDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        requireNonNull(editExpenditureDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.editExpenditureDescriptor \u003d new EditExpenditureDescriptor(editExpenditureDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        List\u003cExpenditure\u003e lastShownList \u003d model.getFilteredExpenditureList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENDITURE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure expenditureToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Expenditure editedExpenditure \u003d createEditedExpenditure(expenditureToEdit, editExpenditureDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (!expenditureToEdit.equals(editedExpenditure) \u0026\u0026 model.hasExpenditure(editedExpenditure)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENDITURE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        model.setExpenditure(expenditureToEdit, editedExpenditure);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        model.updateFilteredExpenditureList(PREDICATE_SHOW_ALL_EXPENDITURES);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXPENDITURE_SUCCESS, editedExpenditure));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Creates and returns a {@code Expenditure} with the details of {@code expenditureToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * edited with {@code editExpenditureDescriptor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static Expenditure createEditedExpenditure(Expenditure expenditureToEdit,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                                                       EditExpenditureDescriptor editExpenditureDescriptor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assert expenditureToEdit !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Info updatedInfo \u003d editExpenditureDescriptor.getInfo().orElse(expenditureToEdit.getInfo());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Amount updatedAmount \u003d editExpenditureDescriptor.getAmount().orElse(expenditureToEdit.getAmount());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Date updatedDate \u003d editExpenditureDescriptor.getDate().orElse(expenditureToEdit.getDate());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editExpenditureDescriptor.getTags().orElse(expenditureToEdit.getTags());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new Expenditure(updatedInfo, updatedAmount, updatedDate, updatedTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!(other instanceof ExpEditCommand)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpEditCommand e \u003d (ExpEditCommand) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u0026\u0026 editExpenditureDescriptor.equals(e.editExpenditureDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Stores the details to edit the expenditure with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * corresponding field value of the expenditure."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static class EditExpenditureDescriptor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        private Info info;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        public EditExpenditureDescriptor() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public EditExpenditureDescriptor(EditExpenditureDescriptor toCopy) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            setInfo(toCopy.info);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return CollectionUtil.isAnyNonNull(info, amount, date, tags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public void setInfo(Info info) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            this.info \u003d info;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public Optional\u003cInfo\u003e getInfo() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return Optional.ofNullable(info);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.of(new HashSet\u003cTag\u003e());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            if (!(other instanceof EditExpenditureDescriptor)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            EditExpenditureDescriptor e \u003d (EditExpenditureDescriptor) other;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return getInfo().equals(e.getInfo())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 7,
      "zwasd": 70,
      "-": 124,
      "JJiahui": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/expenditure/ExpFindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.expenditure.ExpLevelParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Finds and lists all expenditures in address book whose info contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpFindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d ExpLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \": Finds all expenditures which contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"the specified keyword (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"Parameter: KEYWORD \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"Example: \" + ExpLevelParser.COMMAND_WORD + \" \" + COMMAND_WORD + \" alice\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final InfoContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpFindCommand(InfoContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        model.updateFilteredExpenditureList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                String.format(Messages.MESSAGE_EXPENDITURES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                        model.getFilteredExpenditureList().size()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                || (other instanceof ExpFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u0026\u0026 predicate.equals(((ExpFindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/expenditure/ExpRepeatCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Repeat expenditure."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpRepeatCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"repeat\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpRepeatCommand(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 2,
      "zwasd": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/expenditure/ExpSetBudgetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.address.model.expenditure.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.address.model.expenditure.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Set budget."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpSetBudgetCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setbudget\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"Budget cannot be set\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Amount budget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ExpSetBudgetCommand(Date date, Amount budget) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 10,
      "sp-shaopeng": 2,
      "zwasd": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/general/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting $AVE IT as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 4,
      "-": 16,
      "JJiahui": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/general/GoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Switch to a date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class GoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"go\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"We are at : %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Go to a specific date\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            + \"the specified date format YYYY-MM-DD.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2001-09-11\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final LocalDate toDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final boolean fromUi;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public GoCommand(LocalDate toDate, boolean fromUi) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.toDate \u003d toDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.fromUi \u003d fromUi;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        model.updateActiveDate(toDate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (fromUi) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toDate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toDate), toDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 15,
      "zwasd": 18,
      "JJiahui": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/general/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            \"acc OPTIONS - Account related commands (for more information on the OPTIONS, enter \u0027help acc\u0027)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"exp OPTIONS - Expenditure related commands (for more information on the OPTIONS, enter \u0027help exp\u0027)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"report OPTION - Report related commands (for more information on the OPTIONS, enter \u0027help report\u0027)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"go DATE - Show the expenditures for the particular date.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"help [COMMAND] - Shows help, or help for the given command.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            + \"exit - Exits the application.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.message \u003d SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public HelpCommand(String message) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 21,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/report/ExportReportCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "package seedu.address.logic.commands.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.model.Report;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Export report."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExportReportCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Report exported to : %1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"Report cannot be exported\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final Report toExport;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public ExportReportCommand(Report toExport) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.toExport \u003d toExport;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 2,
      "sp-shaopeng": 7,
      "zwasd": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/report/ViewReportCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.model.Report;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * View report."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ViewReportCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Report is generated\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"Report cannot be generated\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final Report toView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public ViewReportCommand(Report toView) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.toView \u003d toView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 1,
      "sp-shaopeng": 8,
      "zwasd": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Prefix PREFIX_INFO \u003d new Prefix(\"-i \");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"-a \");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"-d \");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"-t \");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Prefix PREFIX_INTERVAL \u003d new Prefix(\"--interval \");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final Prefix PREFIX_UNTIL \u003d new Prefix(\"-until \");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 1,
      "zwasd": 5,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Info;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Parses a {@code String info} into a {@code Info}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @throws ParseException if the given {@code info} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static Info parseInfo(String info) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        requireNonNull(info);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String trimmedInfo \u003d info.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!Info.isValidInfo(trimmedInfo)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new ParseException(Info.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return new Info(trimmedInfo);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Parses a {@code String address} into an {@code Date}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!seedu.address.model.expenditure.Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new ParseException(seedu.address.model.expenditure.Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Parses a {@code String amount} into an {@code Amount}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!Amount.isValidAmount(trimmedAmount)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return new Amount(trimmedAmount);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 26,
      "-": 83,
      "JJiahui": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TopLevelParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.logic.commands.account.AccCheckoutCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.general.GoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.logic.parser.account.AccCheckoutCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.parser.account.AccLevelParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.parser.expenditure.ExpLevelParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.parser.general.GoCommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.general.HelpCommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.parser.report.ReportLevelParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class TopLevelParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case ExpLevelParser.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new ExpLevelParser().parseCommand(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case ReportLevelParser.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new ReportLevelParser().parseCommand(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case AccLevelParser.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new AccLevelParser().parseCommand(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case GoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new GoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new HelpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        case AccCheckoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return new AccCheckoutCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 8,
      "zwasd": 10,
      "-": 54,
      "JJiahui": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/account/AccAddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.account.AccAddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.model.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse account add command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccAddCommandParser implements Parser\u003cAccAddCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AccAddCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * and returns an AccAddCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public AccAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (trimmedArgs.contains(\" \")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccAddCommand.NAME_CONTAIN_SPACE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (trimmedArgs.length() \u003e\u003d 26) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccAddCommand.NAME_TOO_LONG));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Account newAccount \u003d new Account(trimmedArgs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new AccAddCommand(newAccount);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 18,
      "zwasd": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/account/AccCheckoutCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.account.AccCheckoutCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse change account."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccCheckoutCommandParser implements Parser\u003cAccCheckoutCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccCheckoutCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccCheckoutCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String[] accountName \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (accountName.length !\u003d 1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccCheckoutCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new AccCheckoutCommand(accountName[0]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 13,
      "JJiahui": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/account/AccClearCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.account.AccClearCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse clear account."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccClearCommandParser implements Parser\u003cAccClearCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public AccClearCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/account/AccDeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.account.AccDeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse delete account."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccDeleteCommandParser implements Parser\u003cAccDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AccDeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * and returns an AccDeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public AccDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (trimmedArgs.contains(\" \")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    AccDeleteCommand.NAME_CONTAIN_SPACE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (trimmedArgs.length() \u003e\u003d 26) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccDeleteCommand.NAME_TOO_LONG));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new AccDeleteCommand(trimmedArgs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 18,
      "zwasd": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/account/AccLevelParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.account.AccAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.account.AccCheckoutCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.account.AccClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.account.AccDeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.account.AccListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.account.AccRenameCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.TopLevelParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse account commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccLevelParser extends TopLevelParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"acc\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSGAE_USAGE \u003d \"acc add\\nacc checkout\\nacc clear\\nacc delete\\nacc list\\nacc rename\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case AccAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new AccAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case AccDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new AccDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case AccCheckoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new AccCheckoutCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case AccRenameCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new AccRenameCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case AccClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new AccClearCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case AccListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new AccListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 19,
      "zwasd": 13,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/account/AccListCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.account.AccListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse list accounts."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccListCommandParser implements Parser\u003cAccListCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AccListCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * and returns an AccListCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public AccListCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (trimmedArgs.length() \u003e 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AccListCommand.MESSAGE_FAILURE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new AccListCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 12,
      "zwasd": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/account/AccRenameCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.account.AccRenameCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse rename account."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccRenameCommandParser implements Parser\u003cAccRenameCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AccRenameCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * and returns an AccRenameCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public AccRenameCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String [] allName \u003d trimmedArgs.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (allName.length !\u003d 2) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    AccRenameCommand.INVALID_NAME_INPUT));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String oldName \u003d allName[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String newName \u003d allName[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (oldName.length() \u003e\u003d 26 || newName.length() \u003e\u003d 26) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    AccRenameCommand.INVALID_NAME_INPUT));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return new AccRenameCommand(oldName, newName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 26,
      "zwasd": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/expenditure/ExpAddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INFO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpAddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Info;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parses input arguments and creates a new ExpAddCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpAddCommandParser implements Parser\u003cExpAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExpAddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * and returns an ExpAddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INFO, PREFIX_AMOUNT, PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INFO, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExpAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Info info \u003d ParserUtil.parseInfo(argMultimap.getValue(PREFIX_INFO).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).orElseGet(() -\u003e LocalDate.now().toString()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Expenditure expenditure \u003d new Expenditure(info, amount, date, tagList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return new ExpAddCommand(expenditure);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 3,
      "zwasd": 27,
      "-": 31,
      "JJiahui": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/expenditure/ExpDeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parses input arguments and creates a new ExpDeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpDeleteCommandParser implements Parser\u003cExpDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExpDeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * and returns a ExpDeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new ExpDeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                            seedu.address.logic.commands.expenditure.ExpDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/expenditure/ExpEditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INFO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpEditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpEditCommand.EditExpenditureDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parses input arguments and creates a new ExpEditCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpEditCommandParser implements Parser\u003cExpEditCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExpEditCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * and returns an ExpEditCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INFO, PREFIX_AMOUNT, PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExpEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        EditExpenditureDescriptor editExpenditureDescriptor \u003d new EditExpenditureDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INFO).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            editExpenditureDescriptor.setInfo(ParserUtil.parseInfo(argMultimap.getValue(PREFIX_INFO).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            editExpenditureDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            editExpenditureDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editExpenditureDescriptor::setTags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!editExpenditureDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new ParseException(ExpEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return new ExpEditCommand(index, editExpenditureDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 1,
      "zwasd": 32,
      "-": 47,
      "JJiahui": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/expenditure/ExpFindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpFindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parses input arguments and creates a new ExpFindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpFindCommandParser implements Parser\u003cExpFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExpFindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * and returns a ExpFindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExpFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return new ExpFindCommand(new InfoContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 11,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/expenditure/ExpLevelParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpDeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpEditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpFindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpRepeatCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpSetBudgetCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.TopLevelParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse expenditure commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpLevelParser extends TopLevelParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exp\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"exp add\\nexp edit\\nexp delete\\nexp find\\nexp repeat\\nexp setsubget\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case ExpAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new ExpAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case ExpEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new ExpEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case ExpDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new ExpDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case ExpFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new ExpFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case ExpRepeatCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new ExpRepeatCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case ExpSetBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new ExpSetBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 4,
      "sp-shaopeng": 13,
      "zwasd": 19,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/expenditure/ExpRepeatCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpRepeatCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse repeat expenditure."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpRepeatCommandParser implements Parser\u003cExpRepeatCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpRepeatCommandParser() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpRepeatCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/expenditure/ExpSetBudgetCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpSetBudgetCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.address.model.expenditure.Amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.address.model.expenditure.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse set budget."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpSetBudgetCommandParser implements Parser\u003cExpSetBudgetCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ExpSetBudgetCommandParser() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpSetBudgetCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_AMOUNT, PREFIX_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_AMOUNT, PREFIX_DATE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExpSetBudgetCommand.MESSAGE_FAIL));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Optional\u003cString\u003e dateOpt \u003d argMultimap.getValue(PREFIX_DATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String dateStr;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (dateOpt.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            int dateNowYear \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            int dateNowMonth \u003d LocalDate.now().getMonthValue();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (dateNowMonth \u003c 10) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                //f month is before oct, append a 0 to dateNowMonth to get MM format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                dateStr \u003d dateNowYear + \"-0\" + dateNowMonth + \"-01\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                dateStr \u003d dateNowYear + \"-\" + dateNowMonth + \"-01\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            dateStr \u003d dateOpt.get() + \"-01\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Date date \u003d new Date(dateStr);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new ExpSetBudgetCommand(date, amount);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 57,
      "zwasd": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/general/ExitCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse exit."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExitCommandParser implements Parser\u003cExitCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExitCommandParser() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExitCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/general/GoCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.general.GoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse switch to a date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class GoCommandParser implements Parser\u003cGoCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Goes to a target date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @param args The date argument to be parsed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public GoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            LocalDate targetDate \u003d LocalDate.parse(trimmedArgs, DateTimeFormatter.ISO_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return new GoCommand(targetDate, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 23,
      "zwasd": 18,
      "JJiahui": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/general/HelpCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.general.GoCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.account.AccLevelParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.expenditure.ExpLevelParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.report.ReportLevelParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse help."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HelpCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * and returns an HelpCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public HelpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        switch (args.trim()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case ExpLevelParser.COMMAND_WORD:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new HelpCommand(ExpLevelParser.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case ReportLevelParser.COMMAND_WORD:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new HelpCommand(ReportLevelParser.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case AccLevelParser.COMMAND_WORD:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new HelpCommand(AccLevelParser.MESSGAE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case GoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/report/ExportReportCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.address.logic.commands.report.ExportReportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.address.model.Report;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse export report."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExportReportCommandParser implements Parser\u003cExportReportCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExportReportCommandParser() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExportReportCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String userInputTrimmed \u003d userInput.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String[] userInputArray \u003d userInputTrimmed.split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (userInputArray.length \u003c 3) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportReportCommand.MESSAGE_FAIL));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String startDateStr \u003d userInputArray[1];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String endDateStr \u003d userInputArray[2];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        LocalDate startDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        LocalDate endDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            startDate \u003d LocalDate.parse(startDateStr, DateTimeFormatter.ISO_DATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            endDate \u003d LocalDate.parse(endDateStr, DateTimeFormatter.ISO_DATE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (endDate.isBefore(startDate)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Report report \u003d new Report(startDate, endDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new ExportReportCommand(report);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 41,
      "zwasd": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/report/ReportLevelParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.report.ExportReportCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.report.ViewReportCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.TopLevelParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse report commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ReportLevelParser extends TopLevelParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"report\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"report view\\nreport export\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case ViewReportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new ViewReportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        case ExportReportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return new ExportReportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 3,
      "sp-shaopeng": 8,
      "zwasd": 10,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/report/ViewReportCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.report.ViewReportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.address.model.Report;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Parse view report."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ViewReportCommandParser implements Parser\u003cViewReportCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ViewReportCommandParser() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ViewReportCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String userInputTrimmed \u003d userInput.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String[] userInputArray \u003d userInputTrimmed.split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (userInputArray.length \u003c 3) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewReportCommand.MESSAGE_FAIL));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String startDateStr \u003d userInputArray[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String endDateStr \u003d userInputArray[2];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        LocalDate startDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        LocalDate endDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            startDate \u003d LocalDate.parse(startDateStr, DateTimeFormatter.ISO_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            endDate \u003d LocalDate.parse(endDateStr, DateTimeFormatter.ISO_DATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (endDate.isBefore(startDate)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        Report report \u003d new Report(startDate, endDate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new ViewReportCommand(report);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 38,
      "zwasd": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Account.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.stream.StreamSupport;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.UniqueExpenditureList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * Duplicates are not allowed (by .equals comparison)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class Account implements ReadOnlyAccount, ReportableAccount {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final UniqueExpenditureList expenditures;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final String accountName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expenditures \u003d new UniqueExpenditureList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Account() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountName \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Account(String accountName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.accountName \u003d accountName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Creates an Account using the Expenditures in the {@code toBeCopied}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public Account copyAccountWithNewName(String newName) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Account toBeCopied \u003d new Account(newName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return toBeCopied;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public String getAccountName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return accountName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Replaces the contents of the expenditure list with {@code expenditures}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * {@code expenditures} must not contain duplicate expenditures."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void setExpenditures(List\u003cExpenditure\u003e expenditures) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.expenditures.setExpenditures(expenditures);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Resets the existing data of this {@code Account} with {@code newData}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void resetData(ReadOnlyAccount newData) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        setExpenditures(newData.getExpenditureList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    //// expenditure-level operations"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns true if a expenditure with the same identity as {@code expenditure} exists in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean hasExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(expenditure);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return expenditures.contains(expenditure);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Adds a expenditure to the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The expenditure must not already exist in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void addExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expenditures.add(expenditure);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Replaces the given expenditure {@code target} in the list with {@code editedExpenditure}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The expenditure identity of {@code editedExpenditure} must not be the same as another"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * existing expenditure in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void setExpenditure(Expenditure target, Expenditure editedExpenditure) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(editedExpenditure);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expenditures.setExpenditure(target, editedExpenditure);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Removes {@code key} from this {@code Account}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void removeExpenditure(Expenditure key) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expenditures.remove(key);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // return expenditures.asUnmodifiableObservableList().size() + \" expenditures\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return \"Account: \" + accountName;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ObservableList\u003cExpenditure\u003e getExpenditureList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return expenditures.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                || (other instanceof Account // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \u0026\u0026 accountName.equals(((Account) other).accountName)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u0026\u0026 expenditures.equals(((Account) other).expenditures));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return expenditures.hashCode();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public UniqueExpenditureList getExpByDate(String date) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new UniqueExpenditureList("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                getExpenditureStream()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    .filter(exp -\u003e exp.getDate().toString().equals(date))"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    .collect(Collectors.toList())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        );"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public UniqueExpenditureList getExpByDate(LocalDate date) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return getExpByDate(date.format(DateTimeFormatter.ISO_DATE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Map\u003cString, UniqueExpenditureList\u003e getExpFromToInclusive(String startDate, String endDate) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return getExpFromToInclusive(new Date(startDate), new Date(endDate));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Map\u003cString, UniqueExpenditureList\u003e getExpFromToInclusive(Date start, Date end) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Map\u003cString, UniqueExpenditureList\u003e expMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        getExpenditureStream()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                .filter(exp -\u003e Date.isEqualOrBefore(start, exp.getDate())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                            \u0026\u0026 Date.isEqualOrBefore(exp.getDate(), end))"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                .forEach(exp -\u003e {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    String date \u003d exp.getDate().toString();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    if (!expMap.containsKey(date)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        UniqueExpenditureList expList \u003d new UniqueExpenditureList();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        expList.add(exp);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        expMap.put(date, expList);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        expMap.get(date).add(exp);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                });"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return expMap;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Stream\u003cExpenditure\u003e getExpenditureStream() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return StreamSupport.stream(expenditures.spliterator(), false);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 1,
      "sp-shaopeng": 3,
      "zwasd": 21,
      "-": 79,
      "JJiahui": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AccountList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.UniqueExpenditureList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.exceptions.ExpenditureNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Manages all accounts of the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class AccountList implements ReadOnlyAccountList, ReadOnlyAccount {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Map\u003cString, Account\u003e accounts \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Account activeAccount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final UniqueExpenditureList internalList \u003d new UniqueExpenditureList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private String initialAccountName \u003d \"default\"; // TODO"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private LocalDate activeDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Creates an AccountList using the accounts in the {@code toBeCopied}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccountList(ReadOnlyAccountList toBeCopied) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        activeAccount \u003d accounts.get(initialAccountName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (accounts.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            activeAccount \u003d new Account(\"default\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            accounts.put(\"default\", activeAccount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } else if (!accounts.containsKey(initialAccountName)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            activeAccount \u003d accounts.values().iterator().next();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            activeAccount \u003d accounts.get(initialAccountName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        activeDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        internalList.setExpenditures(activeAccount.getExpByDate(activeDate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccountList(boolean createDefaultAccount) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (createDefaultAccount) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            activeAccount \u003d new Account(\"default\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            addAccount(activeAccount);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        activeDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Resets the existing data of this {@code Account} with {@code newData}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void resetData(ReadOnlyAccountList newData) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        setAccounts(newData.getAccounts());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private void setAccounts(Map\u003cString, Account\u003e accountHashMap) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireAllNonNull(accountHashMap);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accounts \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        for (Map.Entry\u003cString, Account\u003e entry : accountHashMap.entrySet()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            accounts.put(entry.getKey(), entry.getValue());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    //// account-level operations"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ReportableAccount getReportableAccount() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return activeAccount;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns true if a account with the same identity as {@code account} exists in the account list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean hasAccount(Account account) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return accounts.containsKey(account.getAccountName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Returns true if a account with the same account name exists in the account list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public boolean hasAccount(String accountName) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireNonNull(accountName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return accounts.containsKey(accountName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Renames account by copying the account data."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @param oldName The old account name."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @param newName The new account name to be renamed to."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void renameAccount(String oldName, String newName) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        requireAllNonNull(oldName, newName);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        //TODO: THIS EXCEPTION HAS TO CHANGE."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (!accounts.containsKey(oldName) || accounts.containsKey(newName)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new ExpenditureNotFoundException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Account targetAccount \u003d accounts.get(oldName);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Account replaceAccount \u003d targetAccount.copyAccountWithNewName(newName);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.accounts.put(newName, replaceAccount);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.accounts.remove(oldName, targetAccount);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Adds an account to the account list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The account must not already exist in the account list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void addAccount(Account account) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (accounts.containsKey(account.getAccountName())) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new DuplicateAccountException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accounts.put(account.getAccountName(), account);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Clears all expenditures of the active account."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void clearActiveAccount() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        activeAccount.resetData(new Account());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        internalList.setExpenditures(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    //// expenditure-level operations"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns true if a expenditure with the same identity as {@code expenditure} exists in the internal list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean hasExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(expenditure);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return internalList.contains(expenditure);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Deletes the given expenditure."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The expenditure must exist in the internal list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void removeExpenditure(Expenditure target) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        activeAccount.removeExpenditure(target);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        internalList.remove(target);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Adds the given expenditure."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * {@code expenditure} must not already exist in the internal list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void addExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        activeAccount.addExpenditure(expenditure);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (expenditure.getDate().localDate.equals(activeDate)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            internalList.add(expenditure);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Replaces the given expenditure {@code target} with {@code editedExpenditure}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * {@code target} must exist in the internal list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The expenditure identity of {@code editedExpenditure} must not be the same as"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * another existing expenditure in the internal list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void setExpenditure(Expenditure target, Expenditure editedExpenditure) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireAllNonNull(target, editedExpenditure);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        activeAccount.setExpenditure(target, editedExpenditure);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        internalList.setExpenditure(target, editedExpenditure);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Updates the date at which the expenditures will be shown in the UI"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param date the new active date"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void updateActiveDate(LocalDate date) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        internalList.setExpenditures(activeAccount.getExpByDate(date));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        activeDate \u003d date;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Updates the active account to the one with the specified accountName."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param accountName the name of the account"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @return if the update was successful"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean updateActiveAccount(String accountName) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!accounts.containsKey(accountName)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            activeAccount \u003d accounts.get(accountName);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            internalList.setExpenditures(activeAccount.getExpByDate(activeDate));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Map\u003cString, Account\u003e getAccounts() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return Collections.unmodifiableMap(accounts);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ObservableList\u003cExpenditure\u003e getExpenditureList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return internalList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                || (other instanceof AccountList // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \u0026\u0026 accounts.equals(((AccountList) other).accounts));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return \"AccountList: \" + internalList.toString();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 19,
      "zwasd": 7,
      "JJiahui": 194
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AutoComplete.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Contains the component of an auto-complete field."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AutoComplete {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /** The completed text */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /** Additional options to the command */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private String subCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /** Description of the command */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public AutoComplete(String command, String subCommand, String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.subCommand \u003d subCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public String getSubCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return subCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return command + \" \" + subCommand + \"\\n\" + description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/DuplicateAccountException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Signals that the operation will result in duplicate Expenditures"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * (Expenditures are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class DuplicateAccountException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public DuplicateAccountException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        super(\"Operation would result in duplicate accounts\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 2,
      "JJiahui": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    Predicate\u003cExpenditure\u003e PREDICATE_SHOW_ALL_EXPENDITURES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Replaces address book data with the data in {@code account}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    void setAccountList(ReadOnlyAccountList accountList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /** Returns the Account */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    ReadOnlyAccountList getAccountList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns true if a expenditure with the same identity as {@code expenditure} exists in the internal list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    boolean hasExpenditure(Expenditure expenditure);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Deletes the given expenditure."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The expenditure must exist in the internal list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    void deleteExpenditure(Expenditure target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Adds the given expenditure."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * {@code expenditure} must not already exist in the internal list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    void addExpenditure(Expenditure expenditure);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Replaces the given expenditure {@code target} with {@code editedExpenditure}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * {@code target} must exist in the internal list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The expenditure identity of {@code editedExpenditure} must not be the same as"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * another existing expenditure in the internal list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    void setExpenditure(Expenditure target, Expenditure editedExpenditure);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /** Returns an unmodifiable view of the filtered expenditure list */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    ObservableList\u003cExpenditure\u003e getFilteredExpenditureList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Updates the filter of the filtered expenditure list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    void updateFilteredExpenditureList(Predicate\u003cExpenditure\u003e predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Rename the account\u0027s name."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param oldName target account\u0027s current name"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param newName target account\u0027s new name"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    void renameAccount(String oldName, String newName);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    boolean updateActiveAccount(String accountName);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    void clearActiveAccount();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    ReportableAccount getReportableAccount();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    void updateActiveDate(LocalDate date);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 7,
      "zwasd": 9,
      "-": 65,
      "JJiahui": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final AccountList accountList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final FilteredList\u003cExpenditure\u003e filteredExpenditures;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Initializes a ModelManager with the given account and userPrefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ModelManager(ReadOnlyAccountList accountList, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireAllNonNull(accountList, userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + accountList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.accountList \u003d new AccountList(accountList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        filteredExpenditures \u003d this.accountList.getExpenditureList().filtered(PREDICATE_SHOW_ALL_EXPENDITURES);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this(new AccountList(true), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Account \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void setAccountList(ReadOnlyAccountList accountList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.accountList.resetData(accountList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ReadOnlyAccountList getAccountList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return accountList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public boolean hasExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(expenditure);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return accountList.hasExpenditure(expenditure);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void deleteExpenditure(Expenditure target) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.removeExpenditure(target);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void addExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.addExpenditure(expenditure);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        updateFilteredExpenditureList(PREDICATE_SHOW_ALL_EXPENDITURES);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditure(Expenditure target, Expenditure editedExpenditure) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireAllNonNull(target, editedExpenditure);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.setExpenditure(target, editedExpenditure);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Expenditure List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expenditure} backed by the internal list of"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ObservableList\u003cExpenditure\u003e getFilteredExpenditureList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return filteredExpenditures;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void updateFilteredExpenditureList(Predicate\u003cExpenditure\u003e predicate) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        filteredExpenditures.setPredicate(predicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean updateActiveAccount(String accountName) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!accountList.updateActiveAccount(accountName)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            updateFilteredExpenditureList(PREDICATE_SHOW_ALL_EXPENDITURES);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void renameAccount(String oldName, String newName) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.accountList.renameAccount(oldName, newName);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void clearActiveAccount() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.clearActiveAccount();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ReportableAccount getReportableAccount() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return accountList.getReportableAccount();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void updateActiveDate(LocalDate date) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.updateActiveDate(date);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // The test is failing because of expenditure"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return accountList.equals(other.accountList)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \u0026\u0026 filteredExpenditures.equals(other.filteredExpenditures);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 1,
      "sp-shaopeng": 4,
      "zwasd": 14,
      "-": 118,
      "JJiahui": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAccount.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Unmodifiable view of an account."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public interface ReadOnlyAccount {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Returns an unmodifiable view of the expenditures list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * This list will not contain any duplicate expenditures."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    ObservableList\u003cExpenditure\u003e getExpenditureList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 4,
      "-": 11,
      "JJiahui": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAccountList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Unmodifiable view of an account list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public interface ReadOnlyAccountList extends ReadOnlyAccount {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns a list of accounts."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    Map\u003cString, Account\u003e getAccounts();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JJiahui": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Report.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Report."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class Report {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private final LocalDate startDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private final LocalDate endDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public Report(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 4,
      "sp-shaopeng": 11,
      "zwasd": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReportableAccount.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.UniqueExpenditureList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * An interface containing methods that allow expenditure data to be read from an account."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public interface ReportableAccount {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param date the date"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @return a UniqueExpenditureList containing the expenditures on that date"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    UniqueExpenditureList getExpByDate(String date);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param date the date"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @return a UniqueExpenditureList containing the expenditures on that date"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    UniqueExpenditureList getExpByDate(LocalDate date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * returns expenditures in the interval specified"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param startDate the inclusive start date"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param endDate the inclusive end date"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @return a Map of key: date string \u0026 value: UniqueExpenditureList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    Map\u003cString, UniqueExpenditureList\u003e getExpFromToInclusive(String startDate, String endDate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * returns expenditures in the interval specified"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param startDate the inclusive start date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param endDate the inclusive end date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @return a Map of key: date string \u0026 value: UniqueExpenditureList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    Map\u003cString, UniqueExpenditureList\u003e getExpFromToInclusive(Date startDate, Date endDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JJiahui": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"saveit.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 86,
      "JJiahui": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenditure/Amount.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.address.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Represents an Expenditure\u0027s amount in the account."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAmount(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Amount should be a double\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    // TODO potentially can change to BigDecimal to represent money."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Constructs an {@code Amount}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param amount A valid amount."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Amount(double amount) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        value \u003d amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Constructs an {@code Amount}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param amount A valid amount."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Amount(String amount) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns if a given string is a valid amount."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static boolean isValidAmount(double test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return test \u003e\u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns if a given string is a valid amount."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return isValidAmount(Double.parseDouble(test));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return Double.toString(value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // TODO use value - other.value \u003c epsilon ?"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                || (other instanceof Amount // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Amount) other).value); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return Double.valueOf(value).hashCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "JJiahui": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenditure/Date.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Represents a Expenditure\u0027s address in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ISO_DATE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date should be in a format of (YYYY-MM-DD), \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                                                        + \"and it should not be blank\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public final LocalDate localDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Constructs an {@code Date}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        localDate \u003d LocalDate.parse(date, FORMATTER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(test, FORMATTER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * returns true if the first date is equal to or comes before the second date"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param d1 the first date"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param d2 the second date"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @return true if the first date is equal to or comes before the second date"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static boolean isEqualOrBefore(Date d1, Date d2) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return d1.value.equals(d2.value) || d1.localDate.isBefore(d2.localDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 67,
      "JJiahui": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenditure/Expenditure.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.address.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Represents a Expenditure in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class Expenditure {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final Info info;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public Expenditure(Info info, Amount amount, Date date, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        requireAllNonNull(info, amount, date, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.info \u003d info;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Info getInfo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return info;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Returns true if both expenditure refers to the same expenditure object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public boolean isSameExpenditure(Expenditure otherExpenditure) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (otherExpenditure \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Returns true if both expenditures have all same fields."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Can be used for testing."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!(other instanceof Expenditure)) { // short circuit if not same type"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        } else if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Expenditure otherExpenditure \u003d (Expenditure) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        boolean sameInfo \u003d otherExpenditure.info.equals(this.info);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        boolean sameAmt \u003d otherExpenditure.amount.equals(this.amount);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        boolean sameDate \u003d otherExpenditure.date.equals(this.date);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        boolean sameTag \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (otherExpenditure.tags.size() \u003d\u003d this.tags.size()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (otherExpenditure.tags.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                sameTag \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                Iterator itr \u003d tags.iterator();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                Iterator itrOther \u003d otherExpenditure.tags.iterator();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                while (itr.hasNext() \u0026\u0026 itrOther.hasNext()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    sameTag \u003d itr.next().equals(itrOther.next());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return sameAmt \u0026\u0026 sameDate \u0026\u0026 sameInfo \u0026\u0026 sameTag;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return Objects.hash(info, amount, date, tags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        builder.append(getInfo())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                .append(getAmount())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 26,
      "zwasd": 91,
      "JJiahui": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenditure/Info.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.address.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Represents a Expenditure\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidInfo(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class Info {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public final String fullInfo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Constructs a {@code Info}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @param info A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Info(String info) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        requireNonNull(info);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        checkArgument(isValidInfo(info), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        fullInfo \u003d info;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static boolean isValidInfo(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return fullInfo;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                || (other instanceof Info // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u0026\u0026 fullInfo.equals(((Info) other).fullInfo)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return fullInfo.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 15,
      "-": 43,
      "JJiahui": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenditure/InfoContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.address.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Tests that a {@code Expenditure}\u0027s {@code Info} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class InfoContainsKeywordsPredicate implements Predicate\u003cExpenditure\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public InfoContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean test(Expenditure expenditure) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(expenditure.getInfo().fullInfo, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                || (other instanceof InfoContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                \u0026\u0026 keywords.equals(((InfoContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 6,
      "-": 23,
      "JJiahui": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenditure/Repeat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "package seedu.address.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * A Repeated expenditure."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class Repeat extends Expenditure {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public Repeat(Info info, Amount amount, Date startDate, Date enddate) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        super(info, amount, null, null);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this.endDate \u003d enddate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public Date getStartDate() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public Date getEndDate() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 21,
      "zwasd": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenditure/UniqueExpenditureList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.address.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.exceptions.DuplicateExpenditureException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.exceptions.ExpenditureNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * A list of expenditures that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * A expenditure is considered unique by comparing using {@code Expenditure#equals(Expenditure)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * expenditures uses Expenditure#equals(Expenditure) for equality"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * so as to ensure that the expenditure being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * unique in terms of identity in the UniqueExpenditureList. However,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * the removal of a expenditure uses Expenditure#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * as to ensure that the expenditure with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * @see Expenditure#isSameExpenditure(Expenditure)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class UniqueExpenditureList implements Iterable\u003cExpenditure\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final ObservableList\u003cExpenditure\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final ObservableList\u003cExpenditure\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public UniqueExpenditureList() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public UniqueExpenditureList(List\u003cExpenditure\u003e expenditures) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        setExpenditures(expenditures);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns true if the list contains an equivalent expenditure as the given argument."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean contains(Expenditure toCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Adds a expenditure to the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The expenditure must not already exist in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void add(Expenditure toAdd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new DuplicateExpenditureException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Replaces the expenditure {@code target} in the list with {@code editedExpenditure}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The expenditure identity of {@code editedExpenditure} must not be the same as another"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * existing expenditure in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void setExpenditure(Expenditure target, Expenditure editedExpenditure) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireAllNonNull(target, editedExpenditure);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new ExpenditureNotFoundException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (!target.equals(editedExpenditure) \u0026\u0026 contains(editedExpenditure)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new DuplicateExpenditureException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        internalList.set(index, editedExpenditure);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Removes the equivalent expenditure from the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * The expenditure must exist in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void remove(Expenditure toRemove) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new ExpenditureNotFoundException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void setExpenditures(UniqueExpenditureList replacement) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Replaces the contents of this list with {@code expenditures}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * {@code expenditures} must not contain duplicate expenditures."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void setExpenditures(List\u003cExpenditure\u003e expenditures) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        requireAllNonNull(expenditures);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!expendituresAreUnique(expenditures)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new DuplicateExpenditureException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        internalList.setAll(expenditures);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ObservableList\u003cExpenditure\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Iterator\u003cExpenditure\u003e iterator() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                || (other instanceof UniqueExpenditureList // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueExpenditureList) other).internalList));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns true if {@code expenditures} contains only unique expenditures."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private boolean expendituresAreUnique(List\u003cExpenditure\u003e expenditures) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        for (int i \u003d 0; i \u003c expenditures.size() - 1; i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            for (int j \u003d i + 1; j \u003c expenditures.size(); j++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                if (expenditures.get(i).equals(expenditures.get(j))) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 6,
      "zwasd": 7,
      "JJiahui": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenditure/exceptions/DuplicateExpenditureException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.address.model.expenditure.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Signals that the operation will result in duplicate Expenditures"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * (Expenditures are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class DuplicateExpenditureException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public DuplicateExpenditureException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        super(\"Operation would result in duplicate expenditures.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 2,
      "-": 5,
      "JJiahui": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenditure/exceptions/ExpenditureNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.address.model.expenditure.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Signals that the operation is unable to find the specified expenditure."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpenditureNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "JJiahui": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.Account;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.ReadOnlyAccount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Info;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Contains utility methods for populating {@code Account} with sample data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static Expenditure[] getSampleExpenditures() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new Expenditure[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            new Expenditure(new Info(\"Alex Yeoh\"), new Amount(3.1),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    new Date(\"2019-09-11\"), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            new Expenditure(new Info(\"Bernice Yu\"), new Amount(3.1),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    new Date(\"2019-09-12\"), getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            new Expenditure(new Info(\"Charlotte Oliveiro\"), new Amount(3.1),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    new Date(\"2019-09-13\"), getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            new Expenditure(new Info(\"David Li\"), new Amount(3.1),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    new Date(\"2019-09-14\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            new Expenditure(new Info(\"Irfan Ibrahim\"), new Amount(3.1),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    new Date(\"2019-09-15\"), getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            new Expenditure(new Info(\"Roy Balakrishnan\"), new Amount(3.1),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    new Date(\"2019-09-11\"), getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static ReadOnlyAccount getSampleAddressBook() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Account sampleAb \u003d new Account();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        for (Expenditure sampleExpenditure : getSampleExpenditures()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            sampleAb.addExpenditure(sampleExpenditure);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 6,
      "zwasd": 18,
      "-": 28,
      "JJiahui": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.ReadOnlyAccount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Represents a storage for {@link Account}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Returns Account data as a {@link ReadOnlyAccount}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    Optional\u003cReadOnlyAccountList\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    Optional\u003cReadOnlyAccountList\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Saves the given {@link ReadOnlyAccountList} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    void saveAddressBook(ReadOnlyAccountList addressBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAccountList)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    void saveAddressBook(ReadOnlyAccountList addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 4,
      "-": 36,
      "JJiahui": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAccountListStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * A class to access Account data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class JsonAccountListStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAccountListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public JsonAccountListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Optional\u003cReadOnlyAccountList\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Optional\u003cReadOnlyAccountList\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Optional\u003cJsonSerializableAccountList\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                filePath, JsonSerializableAccountList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void saveAddressBook(ReadOnlyAccountList addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAccountList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void saveAddressBook(ReadOnlyAccountList addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAccountList(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 67,
      "JJiahui": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExpenditure.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Info;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Jackson-friendly version of {@link Expenditure}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "class JsonAdaptedExpenditure {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Expenditure\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ISO_DATE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final String info;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final double amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tag \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Constructs a {@code JsonAdaptedExpenditure} with the given expenditure details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public JsonAdaptedExpenditure(@JsonProperty(\"info\") String info, @JsonProperty(\"amount\") double amount,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                                  @JsonProperty(\"date\") String date, @JsonProperty(\"tag\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.info \u003d info;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            this.tag.addAll(tagged);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Converts a given {@code Expenditure} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public JsonAdaptedExpenditure(Expenditure source) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        info \u003d source.getInfo().fullInfo;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        amount \u003d source.getAmount().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        date \u003d source.getDate().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        tag.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Converts this Jackson-friendly adapted expenditure object into the model\u0027s {@code Expenditure} object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted expenditure."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Expenditure toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        final List\u003cTag\u003e expenditureTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        for (JsonAdaptedTag tag : tag) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            expenditureTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (info \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Info.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!Info.isValidInfo(info)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new IllegalValueException(Info.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        final Info modelInfo \u003d new Info(info);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!seedu.address.model.expenditure.Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new IllegalValueException(seedu.address.model.expenditure.Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(expenditureTags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new Expenditure(modelInfo, modelAmount, modelDate, modelTags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 8,
      "zwasd": 40,
      "-": 43,
      "JJiahui": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAccount.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.Account;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * An Immutable Account that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "@JsonRootName(value \u003d \"saveit\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "class JsonSerializableAccount {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENDITURE \u003d \"Expenditures list contains duplicate expenditure(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final List\u003cJsonAdaptedExpenditure\u003e expenditures \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final String accountName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Constructs a {@code JsonSerializableAccount} with the given expenditures and accountName."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public JsonSerializableAccount(@JsonProperty(\"accountName\") String accountName,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                                   @JsonProperty(\"expenditures\") List\u003cJsonAdaptedExpenditure\u003e expenditures) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.accountName \u003d accountName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.expenditures.addAll(expenditures);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Converts a given {@code Account} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAccount}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public JsonSerializableAccount(Account source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expenditures.addAll(source.getExpenditureList().stream().map(JsonAdaptedExpenditure::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountName \u003d source.getAccountName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Converts this address book into the model\u0027s {@code Account} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Account toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Account account \u003d new Account(accountName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        for (JsonAdaptedExpenditure jsonAdaptedExpenditure : expenditures) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            Expenditure expenditure \u003d jsonAdaptedExpenditure.toModelType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            if (account.hasExpenditure(expenditure)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EXPENDITURE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            account.addExpenditure(expenditure);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return account;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 7,
      "-": 36,
      "JJiahui": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAccountList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.Account;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * An Immutable AccountList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "@JsonRootName(value \u003d \"saveit\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class JsonSerializableAccountList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACCOUNT \u003d \"Accounts list contains duplicate account(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final List\u003cJsonSerializableAccount\u003e accounts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Constructs a {@code JsonSerializableAccountList} with the given accounts."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public JsonSerializableAccountList(@JsonProperty(\"accounts\") List\u003cJsonSerializableAccount\u003e accounts) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.accounts.addAll(accounts);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Converts a given {@code AccountList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAccountList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public JsonSerializableAccountList(ReadOnlyAccountList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accounts.addAll(source.getAccounts().values().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                .map(JsonSerializableAccount::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AccountList} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccountList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList accountList \u003d new AccountList(false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        for (JsonSerializableAccount jsonAdaptedAccount: accounts) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            Account account \u003d jsonAdaptedAccount.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            if (accountList.hasAccount(account)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ACCOUNT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            accountList.addAccount(account);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return accountList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JJiahui": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    Optional\u003cReadOnlyAccountList\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    void saveAddressBook(ReadOnlyAccountList addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "JJiahui": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Manages storage of Account data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Account methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Optional\u003cReadOnlyAccountList\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Optional\u003cReadOnlyAccountList\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void saveAddressBook(ReadOnlyAccountList addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void saveAddressBook(ReadOnlyAccountList addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 2,
      "-": 70,
      "JJiahui": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AutoCompleteMenuItem.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * The display of how each menu item in the auto-complete dropdown will be like."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AutoCompleteMenuItem {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //TODO: styling of the menu item and displaying the components of auto-complete"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AutoCompleteTextField.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import javafx.scene.control.ContextMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import javafx.scene.control.CustomMenuItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * This class is a TextField which implements an \"autocomplete\" functionality, based on a supplied list of entries."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * @author Caleb Brinkman (modified by fy)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AutoCompleteTextField extends TextField {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /** The existing autocomplete entries. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private SortedSet\u003cString\u003e entries;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /** The popup used to select an entry. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private ContextMenu entriesPopup;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /** Construct a new AutoCompleteTextField. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public AutoCompleteTextField() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        entries \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        entriesPopup \u003d new ContextMenu();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        textProperty().addListener(new ChangeListener\u003cString\u003e() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            public void changed(ObservableValue\u003c? extends String\u003e observableValue, String s, String s2) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                if (getText().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    entriesPopup.hide();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    LinkedList\u003cString\u003e searchResult \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    searchResult.addAll(entries.subSet(getText(), getText() + Character.MAX_VALUE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    if (entries.size() \u003e 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                        populatePopup(searchResult);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                        if (!entriesPopup.isShowing()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                            entriesPopup.show(AutoCompleteTextField.this, Side.BOTTOM, 0, 0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                        entriesPopup.hide();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        focusedProperty().addListener(new ChangeListener\u003cBoolean\u003e() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            public void changed(ObservableValue\u003c? extends Boolean\u003e observableValue,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    Boolean aBoolean, Boolean aBoolean2) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                entriesPopup.hide();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // initial population of entries with some commands"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // TODO: remove this part and make use of AutoCompleteMenuItem"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        entries.addAll(Arrays.asList("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            \"acc add\", \"acc checkout\", \"acc clear\", \"acc delete\", \"acc list\", \"acc rename\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            \"exp add\", \"exp delete\", \"exp edit\", \"exp find\", \"exp repeat\", \"exp setbudget\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            \"report view\", \"report export\", \"go\", \"help\", \"exit\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Get the existing set of autocomplete entries."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @return The existing autocomplete entries."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public SortedSet\u003cString\u003e getEntries() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return entries;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Populate the entry set with the given search results.  Display is limited to 10 entries, for performance."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @param searchResult The set of matching strings."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private void populatePopup(List\u003cString\u003e searchResult) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        List\u003cCustomMenuItem\u003e menuItems \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // If you\u0027d like more entries, modify this line."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        int maxEntries \u003d 10;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        int count \u003d Math.min(searchResult.size(), maxEntries);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            final String result \u003d searchResult.get(i);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            Label entryLabel \u003d new Label(result);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            CustomMenuItem item \u003d new CustomMenuItem(entryLabel, true);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            item.setOnAction(new EventHandler\u003cActionEvent\u003e() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                public void handle(ActionEvent actionEvent) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    setText(result);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                    entriesPopup.hide();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            });"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            menuItems.add(item);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        entriesPopup.getItems().clear();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        entriesPopup.getItems().addAll(menuItems);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarView.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.geometry.HPos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.geometry.VPos;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.effect.BlendMode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.Border;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.BorderStroke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.BorderStrokeStyle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.BorderWidths;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " * UI component that is displayed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "public class CalendarView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static final String FXML \u003d \"CalendarView.fxml\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private static final String[] MONTHS \u003d {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private static final int[] DAYS_IN_MONTH \u003d {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private int[] simulateGridPane \u003d new int[42];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private YearMonth yearMonth;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private LocalDate todayDate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private LocalDate nonPivotDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private LocalDate pivotDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private LocalDate firstDayOfTheMonth;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private int prevMonthBalance;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private int nextMonthBalance;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private int thisMonthBalance;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private final int dayOfTheMonthForToday;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Image leftArrow \u003d new Image(this.getClass().getResourceAsStream(\"/images/leftButton.png\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            30, 20, true, true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Image rightArrow \u003d new Image(this.getClass().getResourceAsStream(\"/images/rightButton.png\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            30, 20, true, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private CommandBox.CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Label monthYearLabel;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private GridPane dateGridPane;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private GridPane monthYearGridPane;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private GridPane weekDayGridPane;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Button leftButton;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Button rightButton;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public CalendarView(CommandBox.CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        setUpButton();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.todayDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.pivotDate \u003d todayDate;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.nonPivotDate \u003d todayDate;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.day \u003d todayDate.getDayOfMonth();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.month \u003d todayDate.getMonthValue();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.year \u003d todayDate.getYear();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.dayOfTheMonthForToday \u003d this.day;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.yearMonth \u003d YearMonth.of(this.year, this.month);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.firstDayOfTheMonth \u003d yearMonth.atDay(1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        setMonthYearLabel();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        generateCalender();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * It will update the attributes in the class according to the date parse in"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param date the new date"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private void updateDayMonthYear(LocalDate date) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.year \u003d date.getYear();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.month \u003d date.getMonthValue();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.day \u003d date.getDayOfMonth();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.yearMonth \u003d YearMonth.of(this.year, this.month);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.firstDayOfTheMonth \u003d yearMonth.atDay(1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private boolean isSameMonth(LocalDate d1, LocalDate d2) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        LocalDate pivot \u003d d1.withDayOfMonth(1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        LocalDate toCheck \u003d d2.withDayOfMonth(1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return pivot.equals(toCheck);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Set up the left and right arrow button."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private void setUpButton() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        ImageView leftButtonView \u003d new ImageView(this.leftArrow);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        ImageView rightButtonView \u003d new ImageView(this.rightArrow);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        leftButton.setPrefSize(30, 20);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        leftButton.setMinSize(30, 20);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        rightButton.setPrefSize(30, 20);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        rightButton.setMinSize(30, 20);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        leftButton.setGraphic(leftButtonView);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        rightButton.setGraphic(rightButtonView);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Find the number of days in a month given the year and month."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return return the number of days."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public int findNumberOfDaysInTheMonth() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (this.month \u003d\u003d 2) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            if (this.yearMonth.isLeapYear()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                return 29;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                return DAYS_IN_MONTH[month - 1];"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return DAYS_IN_MONTH[month - 1];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Find the number of days in a month given the year and month."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return return the number of days."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public int findNumberOfDaysOfAMonth(int month, int year) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (month \u003d\u003d 2) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            if (Year.isLeap(year)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                return 29;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                return DAYS_IN_MONTH[month - 1];"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return DAYS_IN_MONTH[month - 1];"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Find the number of days in the previous month given the year and month."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return return the number of days."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public int findNumberOfDaysInPreviousMonth() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (this.month \u003e\u003d 2) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return findNumberOfDaysOfAMonth(this.month - 1, this.year);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return DAYS_IN_MONTH[11];"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Set the monthYear Label\u0027s content."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private void setMonthYearLabel() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        monthYearGridPane.setBackground(new Background("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new BackgroundFill(Color.MEDIUMPURPLE, CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        StringBuilder monthYear \u003d new StringBuilder();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        monthYear.append(MONTHS[this.nonPivotDate.getMonthValue() - 1]);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        monthYear.append(\"  \");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        monthYear.append(this.nonPivotDate.getYear());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        String output \u003d monthYear.toString();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.monthYearLabel.setMaxSize(200, 60);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.monthYearLabel.setText(output);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.monthYearLabel.setFont(Font.font(\"Cambria\", 42));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Fill up the simulateGridPane[] with the date in order."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private void fill() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.thisMonthBalance \u003d findNumberOfDaysInTheMonth();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        int firstDayOfMonth \u003d this.firstDayOfTheMonth.getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.prevMonthBalance \u003d firstDayOfMonth % 7;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        int firstValue \u003d findNumberOfDaysInPreviousMonth() - this.prevMonthBalance + 1;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        for (int i \u003d 0; i \u003c this.prevMonthBalance; i++) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.simulateGridPane[i] \u003d firstValue;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            firstValue++;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        for (int i \u003d 0; i \u003c this.thisMonthBalance; i++) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.simulateGridPane[this.prevMonthBalance + i] \u003d i + 1;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.nextMonthBalance \u003d 42 - this.thisMonthBalance - prevMonthBalance;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        int newStartingPoint \u003d this.thisMonthBalance + prevMonthBalance;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        for (int i \u003d 0; i \u003c this.nextMonthBalance; i++) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            this.simulateGridPane[newStartingPoint + i] \u003d i + 1;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Generate Label for dateGridPane."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param dayNumber text for the Label"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return a label with specific text and font"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private Label createLabel(int dayNumber) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        Label label \u003d new Label();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        label.setText(\"\" + dayNumber);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        label.setStyle(\"-fx-text-fill: white\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        label.setStyle(\"-fx-font-weight: bold\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Generate a VBox with specific calendar."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return a VBox for dateGridPane."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private VBox placeHolderForLabel() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        VBox holder \u003d new VBox();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        holder.setFillWidth(false);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        holder.setPrefHeight(15);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        holder.setPrefWidth(15);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        holder.setMaxSize(20, 20);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        holder.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        return holder;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Assign a Vbox to each GridPane."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Each Vbox contains a Label."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Each label\u0027s text is correspond to the calendar."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void generateCalender() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        fill();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.weekDayGridPane.setBackground(new Background("
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new BackgroundFill(Color.MEDIUMPURPLE, CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.dateGridPane.setBackground(new Background("
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                new BackgroundFill(Color.MEDIUMPURPLE, CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        for (int row \u003d 0; row \u003c 6; row++) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            for (int col \u003d 0; col \u003c 7; col++) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                VBox holder \u003d placeHolderForLabel();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                if (i \u003c this.prevMonthBalance || i \u003e 42 - 1 - this.nextMonthBalance) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    holder.setBlendMode(BlendMode.OVERLAY);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                if (i \u003d\u003d this.prevMonthBalance + this.day - 1 \u0026\u0026 isSameMonth(this.pivotDate, this.nonPivotDate)) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    holder.setBackground(new Background("
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            new BackgroundFill(Color.LIGHTPINK, CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                if (isSameMonth(this.todayDate, this.nonPivotDate)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        \u0026\u0026 i \u003d\u003d this.prevMonthBalance + this.dayOfTheMonthForToday - 1) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    holder.setBorder(new Border(new BorderStroke(Color.valueOf(\"#000000\"),"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            BorderStrokeStyle.SOLID, CornerRadii.EMPTY, new BorderWidths(1))));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                Label num \u003d createLabel(this.simulateGridPane[i]);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                holder.getChildren().add(num);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                holder.setOnMouseClicked(new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    public void handle(MouseEvent event) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        Label a \u003d (Label) holder.getChildren().get(0);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        int clickedDate \u003d Integer.parseInt(a.getText());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        if (holder.getBlendMode() \u003d\u003d BlendMode.OVERLAY) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            pivotDate \u003d getNewDate(clickedDate);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            nonPivotDate \u003d pivotDate;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            updateDayMonthYear(pivotDate);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            refreshCalenderView();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            pivotDate \u003d nonPivotDate.withDayOfMonth(clickedDate);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            nonPivotDate \u003d pivotDate;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            updateDayMonthYear(pivotDate);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                            refreshCalenderView();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                            commandExecutor.execute(\"go \" + pivotDate);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        } catch (Exception e) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                            e.printStackTrace();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                });"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                this.dateGridPane.add(holder, col, row);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                GridPane.setHalignment(holder, HPos.CENTER);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                GridPane.setValignment(holder, VPos.CENTER);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Refresh the whole dateGridPane to show latest UI."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private void refreshCalenderView() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        dateGridPane.getChildren().clear();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        updateDayMonthYear(nonPivotDate);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        setUpButton();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        setMonthYearLabel();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        generateCalender();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * generate a new local date according to input new date."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param value date indicator."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @return a new localDate object with that date."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private LocalDate getNewDate(int value) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        if (value \u003c\u003d 31 \u0026\u0026 value \u003e\u003d 21) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            LocalDate prevM \u003d this.nonPivotDate.minusMonths(1);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            prevM \u003d prevM.withDayOfMonth(value);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return prevM;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            LocalDate nextM \u003d this.nonPivotDate.plusMonths(1);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            nextM \u003d nextM.withDayOfMonth(value);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            return nextM;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Initialise calendar to previous month data when the next button is clicked."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void handleToPrev() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.nonPivotDate \u003d nonPivotDate.minusMonths(1);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        updateDayMonthYear(nonPivotDate);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        refreshCalenderView();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * Initialise calendar to next month data when the next button is clicked."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void handToNext() {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.nonPivotDate \u003d nonPivotDate.plusMonths(1);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        updateDayMonthYear(nonPivotDate);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        refreshCalenderView();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * This method will update the pivotDate to the new active date."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     * @param date the new pivot date"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void updateActiveDate(LocalDate date) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.pivotDate \u003d date;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.nonPivotDate \u003d date;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.day \u003d date.getDayOfMonth();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.month \u003d date.getMonthValue();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.year \u003d date.getYear();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.yearMonth \u003d YearMonth.of(this.year, this.month);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        this.firstDayOfTheMonth \u003d yearMonth.atDay(1);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        refreshCalenderView();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 10,
      "sp-shaopeng": 360,
      "JJiahui": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private AutoCompleteTextField commandTextField;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenditureCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * An UI component that displays information of a {@code Expenditure}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpenditureCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String FXML \u003d \"ExpenditureListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private static final DecimalFormat TWO_DP \u003d new DecimalFormat(\"0.00\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Account level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public final Expenditure expenditure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private Label info;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private Label number;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpenditureCard(Expenditure expenditure, int displayedNumber) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.expenditure \u003d expenditure;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        number.setText(displayedNumber + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        info.setText(expenditure.getInfo().fullInfo);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        amount.setText(Double.toString(expenditure.getAmount().value));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        amount.setText(\"$\" + TWO_DP.format(expenditure.getAmount().value));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expenditure.getTags().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        if (!(other instanceof ExpenditureCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpenditureCard card \u003d (ExpenditureCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return number.getText().equals(card.number.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                \u0026\u0026 expenditure.equals(card.expenditure);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 14,
      "-": 47,
      "JJiahui": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenditureListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Panel containing the list of expenditures."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpenditureListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String FXML \u003d \"ExpenditureListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExpenditureListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private ListView\u003cExpenditure\u003e expenditureListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpenditureListPanel(ObservableList\u003cExpenditure\u003e expenditureList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expenditureListView.setItems(expenditureList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expenditureListView.setCellFactory(listView -\u003e new ExpenditureListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Expenditure} using a {@code ExpenditureCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    class ExpenditureListViewCell extends ListCell\u003cExpenditure\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        protected void updateItem(Expenditure expenditure, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            super.updateItem(expenditure, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            if (empty || expenditure \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                setGraphic(new ExpenditureCard(expenditure, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 11,
      "-": 31,
      "JJiahui": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private ExpenditureListPanel expenditureListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private ReportWindow reportWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private CalendarView calendarView;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private StackPane expenditureListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private StackPane calendar;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        reportWindow \u003d new ReportWindow();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expenditureListPanel \u003d new ExpenditureListPanel(logic.getFilteredExpenditureList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expenditureListPanelPlaceholder.getChildren().add(expenditureListPanel.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        calendarView \u003d new CalendarView(this::executeCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        calendar.getChildren().add(calendarView.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        reportWindow.hide();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public ExpenditureListPanel getExpenditureListPanel() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return expenditureListPanel;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Opens a report window."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleReport() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        if (!reportWindow.isShowing()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            reportWindow.show();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            reportWindow.focus();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            if (commandResult.isShowReport()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                handleReport();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            if (commandResult.isUpdateCalendar()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                calendarView.updateActiveDate(commandResult.getNewActiveDate());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 17,
      "sp-shaopeng": 3,
      "zwasd": 6,
      "-": 195,
      "JJiahui": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReportWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * The Report Window. Provides statistics on expenditure"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * based on the user input. Supports export feature as well"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " * in the future."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "public class ReportWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public static final String REPORT_MESSAGE \u003d \"Generating report...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ReportWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    private static final String FXML \u003d \"ReportWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Creates a new Report Window."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @param root Stage to use as the root of the Report Window."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportWindow(Stage root) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        //reportMessage.setText(REPORT_MESSAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public ReportWindow() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Shows the report window."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        logger.fine(\"Showing report page.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Returns true if the report window is currently being shown."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Hides the report window."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     * Focuses on the report window."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 79,
      "sp-shaopeng": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    private CalendarView cv;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/CalendarView.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"calenderPane\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    \u003cGridPane fx:id\u003d\"monthYearGridPane\" prefHeight\u003d\"73.0\" prefWidth\u003d\"600.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cLabel fx:id\u003d\"monthYearLabel\" alignment\u003d\"CENTER\" blendMode\u003d\"DARKEN\" prefHeight\u003d\"66.0\" prefWidth\u003d\"266.0\" text\u003d\"MONTH YEAR\" textAlignment\u003d\"CENTER\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cFont name\u003d\"Mongolian Baiti\" size\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cButton fx:id\u003d\"leftButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleToPrev\" textAlignment\u003d\"CENTER\" GridPane.halignment\u003d\"LEFT\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cButton fx:id\u003d\"rightButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handToNext\" GridPane.halignment\u003d\"RIGHT\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    \u003cGridPane fx:id\u003d\"weekDayGridPane\" layoutY\u003d\"58.0\" prefHeight\u003d\"42.0\" prefWidth\u003d\"600.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"58.0\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" styleClass\u003d\"weekDayLabel\" text\u003d\"S\" textAlignment\u003d\"CENTER\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cLabel styleClass\u003d\"weekDayLabel\" text\u003d\"M\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cLabel styleClass\u003d\"weekDayLabel\" text\u003d\"T\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cLabel styleClass\u003d\"weekDayLabel\" text\u003d\"W\" GridPane.columnIndex\u003d\"3\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cLabel styleClass\u003d\"weekDayLabel\" text\u003d\"T\" GridPane.columnIndex\u003d\"4\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cLabel styleClass\u003d\"weekDayLabel\" text\u003d\"F\" GridPane.columnIndex\u003d\"5\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cLabel styleClass\u003d\"weekDayLabel\" text\u003d\"S\" GridPane.columnIndex\u003d\"6\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "          \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    \u003cGridPane fx:id\u003d\"dateGridPane\" layoutY\u003d\"105.0\" prefHeight\u003d\"300.0\" prefWidth\u003d\"600.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 106
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "\u003c?import seedu.address.ui.AutoCompleteTextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "  \u003cAutoCompleteTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zwasd": 2,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/ExpenditureListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        \u003cLabel fx:id\u003d\"number\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        \u003cLabel fx:id\u003d\"info\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "      \u003cLabel fx:id\u003d\"amount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$amount\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zwasd": 2,
      "-": 31,
      "JJiahui": 1
    }
  },
  {
    "path": "src/main/resources/view/ExpenditureListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "  \u003cListView fx:id\u003d\"expenditureListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"/$AVE IT\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" alignment\u003d\"TOP_CENTER\" maxHeight\u003d\"101.0\" minHeight\u003d\"100.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"156.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"calendar\" prefHeight\u003d\"100.0\" prefWidth\u003d\"50.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        \u003cVBox fx:id\u003d\"expenditureList\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"100.0\" prefWidth\u003d\"150.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"expenditureListPanelPlaceholder\" prefHeight\u003d\"78.0\" prefWidth\u003d\"130.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"report\" prefHeight\u003d\"100.0\" prefWidth\u003d\"50.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                                \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleReport\" prefWidth\u003d\"20.0\" text\u003d\"R\" textAlignment\u003d\"JUSTIFY\" translateY\u003d\"80.0\" wrapText\u003d\"true\" StackPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                                        \u003cFont size\u003d\"0.5\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                                \u003c/Button\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 24,
      "zwasd": 2,
      "-": 49,
      "JJiahui": 1
    }
  },
  {
    "path": "src/main/resources/view/ReportWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003cfx:root fx:id\u003d\"ReportWindow\" title\u003d\"Report\" type\u003d\"Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        \u003cScene fx:id\u003d\"Report\" fill\u003d\"#111111\" stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            \u003cAnchorPane prefHeight\u003d\"300.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #383838#383838;\" stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "               \u003cPieChart fx:id\u003d\"Chart\" layoutX\u003d\"25.0\" layoutY\u003d\"60.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"188.0\" style\u003d\"-fx-background-color: WHITE;\" title\u003d\"Expenditure Breakdown \" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        final Index fifthExpenditureIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(fifthExpenditureIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(fifthExpenditureIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(fifthExpenditureIndex.equals(fifthExpenditureIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(fifthExpenditureIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(fifthExpenditureIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(fifthExpenditureIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EXPENDITURE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INFO_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.account.AccListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpAddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.account.AccLevelParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.parser.expenditure.ExpLevelParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.storage.JsonAccountListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        JsonAccountListStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                new JsonAccountListStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String expDeleteCommand \u003d \"exp delete 11\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertCommandException(expDeleteCommand, MESSAGE_INVALID_EXPENDITURE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String listCommand \u003d AccLevelParser.COMMAND_WORD + \" \" + AccListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertCommandSuccess(listCommand, AccListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        // Setup LogicManager with JsonAccountListIoExceptionThrowingStub"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        JsonAccountListStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                new JsonAccountListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String addCommand \u003d ExpLevelParser.COMMAND_WORD + \" \" + ExpAddCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                + INFO_DESC_AMY + AMOUNT_DESC_AMY + DATE_DESC_AMY;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure expectedExpenditure \u003d new ExpenditureBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expectedModel.addExpenditure(expectedExpenditure);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void getFilteredExpenditureList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredExpenditureList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private static class JsonAccountListIoExceptionThrowingStub extends JsonAccountListStorage {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        private JsonAccountListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public void saveAddressBook(ReadOnlyAccountList addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 21,
      "-": 131,
      "JJiahui": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                false, false)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                false, false)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                false, false)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                false, false, false).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                true, false, false).hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 10,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INFO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpEditCommand.EditExpenditureDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.testutil.EditExpenditureDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String VALID_INFO_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String VALID_INFO_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final double VALID_AMOUNT_AMY \u003d 3.14;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final double VALID_AMOUNT_BOB \u003d 3.14;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String VALID_DATE_AMY \u003d \"2019-09-11\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String VALID_DATE_BOB \u003d \"2019-09-12\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String INFO_DESC_AMY \u003d \" \" + PREFIX_INFO + VALID_INFO_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String INFO_DESC_BOB \u003d \" \" + PREFIX_INFO + VALID_INFO_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String AMOUNT_DESC_AMY \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String AMOUNT_DESC_BOB \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String DATE_DESC_AMY \u003d \" \" + PREFIX_DATE + VALID_DATE_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String DATE_DESC_BOB \u003d \" \" + PREFIX_DATE + VALID_DATE_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String INVALID_INFO_DESC \u003d \" \" + PREFIX_INFO + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in infos"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String INVALID_AMOUNT_DESC \u003d \" \" + PREFIX_AMOUNT + \"bob!yahoo\"; // a string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final EditExpenditureDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final EditExpenditureDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        DESC_AMY \u003d new EditExpenditureDescriptorBuilder().withInfo(VALID_INFO_AMY)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "               .withAmount(VALID_AMOUNT_AMY).withDate(VALID_DATE_AMY)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        DESC_BOB \u003d new EditExpenditureDescriptorBuilder().withInfo(VALID_INFO_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withAmount(VALID_AMOUNT_BOB).withDate(VALID_DATE_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * - the address book, filtered expenditure list and selected expenditure in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList expectedAccountList \u003d new AccountList(actualModel.getAccountList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        List\u003cExpenditure\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredExpenditureList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(expectedAccountList, actualModel.getAccountList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredExpenditureList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the expenditure at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static void showExpenditureAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredExpenditureList().size());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Expenditure expenditure \u003d model.getFilteredExpenditureList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        final String[] splitInfo \u003d expenditure.getInfo().fullInfo.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        model.updateFilteredExpenditureList(new InfoContainsKeywordsPredicate(Arrays.asList(splitInfo[0])));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(1, model.getFilteredExpenditureList().size());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 2,
      "zwasd": 36,
      "-": 81,
      "JJiahui": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/account/AccAddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccAddCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/account/AccCheckoutCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccCheckoutCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/account/AccClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.testutil.TypicalExpenditures.getTypicalAccount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertCommandSuccess(new AccClearCommand(), model, AccClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expectedModel.clearActiveAccount();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertCommandSuccess(new AccClearCommand(), model, AccClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 5,
      "-": 23,
      "JJiahui": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/account/AccDeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccDeleteCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/account/AccListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.showExpenditureAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.testutil.TypicalExpenditures.getTypicalAccount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for AccListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertCommandSuccess(new AccListCommand(), model, AccListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     showExpenditureAtIndex(model, INDEX_FIRST_EXPENDITURE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandSuccess(new AccListCommand(), model, AccListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 12,
      "-": 25,
      "JJiahui": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/account/AccRenameCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccRenameCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/expenditure/EditExpenditureDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INFO_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpEditCommand.EditExpenditureDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.testutil.EditExpenditureDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class EditExpenditureDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        EditExpenditureDescriptor descriptorWithSameValues \u003d new EditExpenditureDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // different info -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        EditExpenditureDescriptor editedAmy \u003d new EditExpenditureDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                .withInfo(VALID_INFO_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // different amount -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        editedAmy \u003d new EditExpenditureDescriptorBuilder(DESC_AMY).withAmount(VALID_AMOUNT_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        editedAmy \u003d new EditExpenditureDescriptorBuilder(DESC_AMY).withDate(VALID_DATE_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        editedAmy \u003d new EditExpenditureDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 15,
      "-": 38,
      "JJiahui": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/expenditure/ExpAddCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ExpAddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpAddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_newExpenditure_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure validExpenditure \u003d new ExpenditureBuilder().withAmount(3.00).withInfo(\"chicken\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(model.getAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     expectedModel.addExpenditure(validExpenditure);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandSuccess(new ExpAddCommand(validExpenditure), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             String.format(ExpAddCommand.MESSAGE_SUCCESS, validExpenditure), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_duplicateExpenditure_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure expenditureInList \u003d model.getAccountList().getExpenditureList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandFailure(new ExpAddCommand(expenditureInList), model,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             ExpAddCommand.MESSAGE_DUPLICATE_EXPENDITURE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 26,
      "-": 19,
      "JJiahui": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/expenditure/ExpAddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.model.Account;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.model.ReadOnlyAccount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.ReportableAccount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpAddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void constructor_nullExpenditure_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExpAddCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void execute_expenditureAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ModelStubAcceptingExpenditureAdded modelStub \u003d new ModelStubAcceptingExpenditureAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Expenditure validExpenditure \u003d new ExpenditureBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        CommandResult commandResult \u003d new ExpAddCommand(validExpenditure).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(String.format(ExpAddCommand.MESSAGE_SUCCESS, validExpenditure), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(Arrays.asList(validExpenditure), modelStub.expendituresAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void execute_duplicateExpenditure_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure validExpenditure \u003d new ExpenditureBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpAddCommand expAddCommand \u003d new ExpAddCommand(validExpenditure);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithExpenditure(validExpenditure);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(CommandException.class, ExpAddCommand.MESSAGE_DUPLICATE_EXPENDITURE, () -\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                expAddCommand.execute(modelStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure alice \u003d new ExpenditureBuilder().withInfo(\"Alice\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure bob \u003d new ExpenditureBuilder().withInfo(\"Bob\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpAddCommand addAliceCommand \u003d new ExpAddCommand(alice);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpAddCommand addBobCommand \u003d new ExpAddCommand(bob);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpAddCommand addAliceCommandCopy \u003d new ExpAddCommand(alice);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // different expenditure -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public void addExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public void setAccountList(ReadOnlyAccountList newData) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public ReadOnlyAccountList getAccountList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public boolean hasExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public void deleteExpenditure(Expenditure target) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public void setExpenditure(Expenditure target, Expenditure editedExpenditure) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public ObservableList\u003cExpenditure\u003e getFilteredExpenditureList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public void updateFilteredExpenditureList(Predicate\u003cExpenditure\u003e predicate) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public boolean updateActiveAccount(String accountName) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public void clearActiveAccount() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public void renameAccount(String oldName, String newName) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public ReportableAccount getReportableAccount() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public void updateActiveDate(LocalDate date) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * A Model stub that contains a single expenditure."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private class ModelStubWithExpenditure extends ModelStub {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        private final Expenditure expenditure;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ModelStubWithExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            requireNonNull(expenditure);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            this.expenditure \u003d expenditure;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public boolean hasExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            requireNonNull(expenditure);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            return this.expenditure.equals(expenditure);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * A Model stub that always accept the expenditure being added."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private class ModelStubAcceptingExpenditureAdded extends ModelStub {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        final ArrayList\u003cExpenditure\u003e expendituresAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public boolean hasExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            requireNonNull(expenditure);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            return expendituresAdded.stream().anyMatch(expenditure::equals);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public void addExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            requireNonNull(expenditure);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            expendituresAdded.add(expenditure);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        public ReadOnlyAccountList getAccountList() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            // return new AccountList();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 1,
      "zwasd": 57,
      "-": 141,
      "JJiahui": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/expenditure/ExpDeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.showExpenditureAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENDITURE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.testutil.TypicalExpenditures.getTypicalAccount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * {@code ExpDeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpDeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure expenditureToDelete \u003d model.getFilteredExpenditureList()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             .get(INDEX_FIRST_EXPENDITURE.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpDeleteCommand expDeleteCommand \u003d new ExpDeleteCommand(INDEX_FIRST_EXPENDITURE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     String expectedMessage \u003d String.format(ExpDeleteCommand.MESSAGE_DELETE_EXPENDITURE_SUCCESS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //                     expenditureToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ModelManager expectedModel \u003d new ModelManager(model.getAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     expectedModel.deleteExpenditure(expenditureToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandSuccess(expDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenditureList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpDeleteCommand expDeleteCommand \u003d new ExpDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertCommandFailure(expDeleteCommand, model, Messages.MESSAGE_INVALID_EXPENDITURE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     showExpenditureAtIndex(model, INDEX_FIRST_EXPENDITURE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure expenditureToDelete \u003d model.getFilteredExpenditureList()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             .get(INDEX_FIRST_EXPENDITURE.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpDeleteCommand expDeleteCommand \u003d new ExpDeleteCommand(INDEX_FIRST_EXPENDITURE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     String expectedMessage \u003d String.format(ExpDeleteCommand.MESSAGE_DELETE_EXPENDITURE_SUCCESS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //                     expenditureToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(model.getAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     expectedModel.deleteExpenditure(expenditureToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     showNoExpenditure(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandSuccess(expDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     showExpenditureAtIndex(model, INDEX_FIRST_EXPENDITURE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Index outOfBoundIndex \u003d INDEX_SECOND_EXPENDITURE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAccountList().getExpenditureList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpDeleteCommand expDeleteCommand \u003d new ExpDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandFailure(expDeleteCommand, model, Messages.MESSAGE_INVALID_EXPENDITURE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpDeleteCommand deleteFirstCommand \u003d new ExpDeleteCommand(INDEX_FIRST_EXPENDITURE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpDeleteCommand deleteSecondCommand \u003d new ExpDeleteCommand(INDEX_SECOND_EXPENDITURE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpDeleteCommand deleteFirstCommandCopy \u003d new ExpDeleteCommand(INDEX_FIRST_EXPENDITURE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        // different expenditure -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private void showNoExpenditure(Model model) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        model.updateFilteredExpenditureList(p -\u003e false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(model.getFilteredExpenditureList().isEmpty());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 54,
      "-": 58,
      "JJiahui": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/expenditure/ExpEditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INFO_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.logic.commands.CommandTestUtil.showExpenditureAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENDITURE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.account.AccClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpEditCommand.EditExpenditureDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.testutil.EditExpenditureDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * and unit tests for ExpEditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpEditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure editedExpenditure \u003d new ExpenditureBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     EditExpenditureDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             new EditExpenditureDescriptorBuilder(editedExpenditure).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpEditCommand expEditCommand \u003d new ExpEditCommand(INDEX_FIRST_EXPENDITURE, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     String expectedMessage \u003d String.format(ExpEditCommand.MESSAGE_EDIT_EXPENDITURE_SUCCESS, editedExpenditure);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(new AccountList(model.getAccountList()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     expectedModel.setExpenditure(model.getFilteredExpenditureList().get(0), editedExpenditure);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandSuccess(expEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Index indexLastExpenditure \u003d Index.fromOneBased(model.getFilteredExpenditureList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure lastExpenditure \u003d model.getFilteredExpenditureList().get(indexLastExpenditure.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpenditureBuilder expenditureInList \u003d new ExpenditureBuilder(lastExpenditure);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure editedExpenditure \u003d expenditureInList.withInfo(VALID_INFO_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     EditExpenditureDescriptor descriptor \u003d new EditExpenditureDescriptorBuilder().withInfo(VALID_INFO_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpEditCommand expEditCommand \u003d new ExpEditCommand(indexLastExpenditure, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     String expectedMessage \u003d String.format(ExpEditCommand.MESSAGE_EDIT_EXPENDITURE_SUCCESS, editedExpenditure);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(new AccountList(model.getAccountList()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     expectedModel.setExpenditure(lastExpenditure, editedExpenditure);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandSuccess(expEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpEditCommand expEditCommand \u003d new ExpEditCommand(INDEX_FIRST_EXPENDITURE,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             new EditExpenditureDescriptor());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure editedExpenditure \u003d model.getFilteredExpenditureList()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             .get(INDEX_FIRST_EXPENDITURE.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     String expectedMessage \u003d String.format(ExpEditCommand.MESSAGE_EDIT_EXPENDITURE_SUCCESS, editedExpenditure);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(new AccountList(model.getAccountList()), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandSuccess(expEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO; update test case"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     showExpenditureAtIndex(model, INDEX_FIRST_EXPENDITURE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure expenditureInFilteredList \u003d model.getFilteredExpenditureList()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             .get(INDEX_FIRST_EXPENDITURE.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure editedExpenditure \u003d new ExpenditureBuilder(expenditureInFilteredList)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             .withInfo(VALID_INFO_BOB).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpEditCommand expEditCommand \u003d new ExpEditCommand(INDEX_FIRST_EXPENDITURE,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             new EditExpenditureDescriptorBuilder().withInfo(VALID_INFO_BOB).build());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     String expectedMessage \u003d String.format(ExpEditCommand.MESSAGE_EDIT_EXPENDITURE_SUCCESS, editedExpenditure);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Model expectedModel \u003d new ModelManager(new AccountList(model.getAccountList()), new UserPrefs());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     expectedModel.setExpenditure(model.getFilteredExpenditureList().get(0), editedExpenditure);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandSuccess(expEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_duplicateExpenditureUnfilteredList_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure firstExpenditure \u003d model.getFilteredExpenditureList()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             .get(INDEX_FIRST_EXPENDITURE.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     EditExpenditureDescriptor descriptor \u003d new EditExpenditureDescriptorBuilder(firstExpenditure).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpEditCommand expEditCommand \u003d new ExpEditCommand(INDEX_SECOND_EXPENDITURE, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandFailure(expEditCommand, model, ExpEditCommand.MESSAGE_DUPLICATE_EXPENDITURE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_duplicateExpenditureFilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     showExpenditureAtIndex(model, INDEX_FIRST_EXPENDITURE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // edit expenditure in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure expenditureInList \u003d model.getAccountList().getExpenditureList()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             .get(INDEX_SECOND_EXPENDITURE.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpEditCommand expEditCommand \u003d new ExpEditCommand(INDEX_FIRST_EXPENDITURE,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             new EditExpenditureDescriptorBuilder(expenditureInList).build());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandFailure(expEditCommand, model, ExpEditCommand.MESSAGE_DUPLICATE_EXPENDITURE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void execute_invalidExpenditureIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenditureList().size() + 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        EditExpenditureDescriptor descriptor \u003d new EditExpenditureDescriptorBuilder()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                .withInfo(VALID_INFO_BOB).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpEditCommand expEditCommand \u003d new ExpEditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertCommandFailure(expEditCommand, model, Messages.MESSAGE_INVALID_EXPENDITURE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_invalidExpenditureIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     showExpenditureAtIndex(model, INDEX_FIRST_EXPENDITURE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Index outOfBoundIndex \u003d INDEX_SECOND_EXPENDITURE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAccountList().getExpenditureList().size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpEditCommand expEditCommand \u003d new ExpEditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             new EditExpenditureDescriptorBuilder().withInfo(VALID_INFO_BOB).build());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandFailure(expEditCommand, model, Messages.MESSAGE_INVALID_EXPENDITURE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        final ExpEditCommand standardCommand \u003d new ExpEditCommand(INDEX_FIRST_EXPENDITURE, DESC_AMY);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        EditExpenditureDescriptor copyDescriptor \u003d new ExpEditCommand"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                .EditExpenditureDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpEditCommand commandWithSameValues \u003d new ExpEditCommand(INDEX_FIRST_EXPENDITURE, copyDescriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(standardCommand.equals(new AccClearCommand()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(standardCommand.equals(new ExpEditCommand(INDEX_SECOND_EXPENDITURE, DESC_AMY)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(standardCommand.equals(new ExpEditCommand(INDEX_FIRST_EXPENDITURE, DESC_BOB)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 2,
      "zwasd": 125,
      "-": 61,
      "JJiahui": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/expenditure/ExpFindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXPENDITURES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.testutil.TypicalExpenditures.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.testutil.TypicalExpenditures.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.testutil.TypicalExpenditures.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.testutil.TypicalExpenditures.getTypicalAccount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ExpFindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpFindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAccountList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        InfoContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                new InfoContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        InfoContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                new InfoContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpFindCommand findFirstCommand \u003d new ExpFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpFindCommand findSecondCommand \u003d new ExpFindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpFindCommand findFirstCommandCopy \u003d new ExpFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        // different expenditure -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void execute_zeroKeywords_noExpenditureFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENDITURES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpFindCommand command \u003d new ExpFindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expectedModel.updateFilteredExpenditureList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredExpenditureList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void execute_multipleKeywords_multipleExpendituresFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     String expectedMessage \u003d String.format(MESSAGE_EXPENDITURES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     InfoContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpFindCommand command \u003d new ExpFindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     expectedModel.updateFilteredExpenditureList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredExpenditureList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Parses {@code userInput} into a {@code InfoContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private InfoContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return new InfoContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 35,
      "-": 46,
      "JJiahui": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/expenditure/ExpRepeatCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpRepeatCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/expenditure/ExpSetBudgetCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpSetBudgetCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/general/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.general.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                true, false, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 2,
      "zwasd": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/general/GoCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class GoCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/general/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.general.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, false, false, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 1,
      "zwasd": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/report/ExportReportCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExportReportCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/report/ViewReportCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.commands.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ViewReportCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Info;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String INVALID_INFO \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String INVALID_DATE \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final double INVALID_AMOUNT \u003d -1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String VALID_INFO \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String VALID_DATE \u003d \"2019-09-11\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final double VALID_AMOUNT \u003d 3.14;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(INDEX_FIRST_EXPENDITURE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(INDEX_FIRST_EXPENDITURE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseInfo_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseInfo((String) null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseInfo_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseInfo(INVALID_INFO));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseInfo_validValueWithoutWhitespace_returnsInfo() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Info expectedInfo \u003d new Info(VALID_INFO);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(expectedInfo, ParserUtil.parseInfo(VALID_INFO));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseInfo_validValueWithWhitespace_returnsTrimmedInfo() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String infoWithWhitespace \u003d WHITESPACE + VALID_INFO + WHITESPACE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Info expectedInfo \u003d new Info(VALID_INFO);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(expectedInfo, ParserUtil.parseInfo(infoWithWhitespace));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate((String) null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(dateWithWhitespace));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseAmount_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAmount((String) null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseAmount_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAmount(Double.toString(INVALID_AMOUNT)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseAmount_validValueWithoutWhitespace_returnsAmount() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Amount expectedAmount \u003d new Amount(VALID_AMOUNT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(Double.toString(VALID_AMOUNT)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void parseAmount_validValueWithWhitespace_returnsTrimmedAmount() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String amountWithWhitespace \u003d WHITESPACE + VALID_AMOUNT + WHITESPACE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Amount expectedAmount \u003d new Amount(VALID_AMOUNT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(amountWithWhitespace));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 45,
      "-": 126,
      "JJiahui": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TopLevelParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.general.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.model.expenditure.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.testutil.EditExpenditureDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.testutil.ExpenditureUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class TopLevelParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final TopLevelParser parser \u003d new TopLevelParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update the test cases"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void parseCommand_expenditure_add() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure expenditure \u003d new ExpenditureBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpAddCommand command \u003d (ExpAddCommand) parser.parseCommand(ExpenditureUtil.getAddCommand(expenditure));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertEquals(new ExpAddCommand(expenditure), command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update the test cases"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void parseCommand_account_clear() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertTrue(parser.parseCommand(AccClearCommand.COMMAND_WORD) instanceof AccClearCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertTrue(parser.parseCommand(AccClearCommand.COMMAND_WORD + \" 3\") instanceof AccClearCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update the test cases"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void parseCommand_expenditure_delete() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpDeleteCommand command \u003d (ExpDeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             seedu.address.logic.commands.expenditure.ExpDeleteCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //                     + \" \" + INDEX_FIRST_EXPENDITURE.getOneBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertEquals(new ExpDeleteCommand(INDEX_FIRST_EXPENDITURE), command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update the test cases"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void parseCommand_expenditure_edit() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Expenditure expenditure \u003d new ExpenditureBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     EditExpenditureDescriptor descriptor \u003d new EditExpenditureDescriptorBuilder(expenditure).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ExpEditCommand command \u003d (ExpEditCommand) parser.parseCommand(ExpEditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             + INDEX_FIRST_EXPENDITURE.getOneBased() + \" \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             + ExpenditureUtil.getEditExpenditureDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertEquals(new ExpEditCommand(INDEX_FIRST_EXPENDITURE, descriptor), command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "            -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 2,
      "zwasd": 42,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/account/AccAddCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccAddCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final AccAddCommandParser parser \u003d new AccAddCommandParser();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/account/AccCheckoutCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccCheckoutCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final AccCheckoutCommandParser parser \u003d new AccCheckoutCommandParser();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/account/AccDeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccDeleteCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final AccDeleteCommandParser parser \u003d new AccDeleteCommandParser();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/account/AccLevelParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.account.AccListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccLevelParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final AccLevelParser parser \u003d new AccLevelParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    //TODO: DELETE ADD CHECKOUT RENAME TESTS NEED TO BE ADDED"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parseAccCommand_list() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(parser.parseCommand(AccListCommand.COMMAND_WORD) instanceof AccListCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void accParseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void accParseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 27,
      "zwasd": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/account/AccRenameCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccRenameCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final AccRenameCommandParser parser \u003d new AccRenameCommandParser();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/expenditure/ExpAddCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INFO_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INFO_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INFO_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INFO_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpAddCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Amount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Info;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpAddCommandParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private ExpAddCommandParser parser \u003d new ExpAddCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure expectedExpenditure \u003d new ExpenditureBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + INFO_DESC_BOB + AMOUNT_DESC_BOB"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                + DATE_DESC_BOB + TAG_DESC_FRIEND, new ExpAddCommand(expectedExpenditure));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // multiple infos - last info accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseSuccess(parser, INFO_DESC_AMY + INFO_DESC_BOB + AMOUNT_DESC_BOB"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                + DATE_DESC_BOB + TAG_DESC_FRIEND, new ExpAddCommand(expectedExpenditure));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // multiple amounts - last amount accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseSuccess(parser, INFO_DESC_BOB + AMOUNT_DESC_AMY + AMOUNT_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                + DATE_DESC_BOB + TAG_DESC_FRIEND, new ExpAddCommand(expectedExpenditure));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseSuccess(parser, INFO_DESC_BOB + AMOUNT_DESC_BOB + DATE_DESC_AMY"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                + DATE_DESC_BOB + TAG_DESC_FRIEND, new ExpAddCommand(expectedExpenditure));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure expectedExpenditureMultipleTags \u003d new ExpenditureBuilder(BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseSuccess(parser, INFO_DESC_BOB + AMOUNT_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new ExpAddCommand(expectedExpenditureMultipleTags));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure expectedExpenditure \u003d new ExpenditureBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseSuccess(parser, INFO_DESC_AMY + AMOUNT_DESC_AMY + DATE_DESC_AMY,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                new ExpAddCommand(expectedExpenditure));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExpAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // missing info prefix"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, VALID_INFO_BOB + AMOUNT_DESC_BOB + DATE_DESC_BOB,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // missing amount prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, INFO_DESC_BOB + VALID_AMOUNT_BOB + DATE_DESC_BOB,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, VALID_INFO_BOB + VALID_AMOUNT_BOB + DATE_DESC_BOB,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // invalid info"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_INFO_DESC + AMOUNT_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Info.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, INFO_DESC_BOB + INVALID_AMOUNT_DESC + DATE_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, INFO_DESC_BOB + AMOUNT_DESC_BOB + INVALID_DATE_DESC"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, INFO_DESC_BOB + AMOUNT_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_INFO_DESC + AMOUNT_DESC_BOB + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                Info.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + INFO_DESC_BOB + AMOUNT_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                        + DATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExpAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 16,
      "zwasd": 51,
      "-": 47,
      "JJiahui": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/expenditure/ExpDeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * outside of the ExpDeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * same path through the ExpDeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpDeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private ExpDeleteCommandParser parser \u003d new ExpDeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ExpDeleteCommand(INDEX_FIRST_EXPENDITURE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExpDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 9,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/expenditure/ExpEditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INFO_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INFO_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INFO_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENDITURE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_EXPENDITURE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpEditCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpEditCommand.EditExpenditureDescriptor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Amount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Info;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.testutil.EditExpenditureDescriptorBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpEditCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExpEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private ExpEditCommandParser parser \u003d new ExpEditCommandParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, VALID_INFO_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"1\", ExpEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"-5\" + INFO_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"0\" + INFO_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_INFO_DESC, Info.MESSAGE_CONSTRAINTS); // invalid info"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS); // invalid amount"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, Date.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Expenditure} being edited,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_INFO_DESC + INVALID_AMOUNT_DESC + VALID_DATE_AMY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                Info.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_EXPENDITURE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                + AMOUNT_DESC_AMY + DATE_DESC_AMY + INFO_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        EditExpenditureDescriptor descriptor \u003d new EditExpenditureDescriptorBuilder().withInfo(VALID_INFO_AMY)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                .withAmount(VALID_AMOUNT_AMY).withDate(VALID_DATE_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpEditCommand expectedCommand \u003d new ExpEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_AMY;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        EditExpenditureDescriptor descriptor \u003d new EditExpenditureDescriptorBuilder()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                .withAmount(VALID_AMOUNT_AMY).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpEditCommand expectedCommand \u003d new ExpEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // info"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXPENDITURE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INFO_DESC_AMY;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        EditExpenditureDescriptor descriptor \u003d new EditExpenditureDescriptorBuilder()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                .withInfo(VALID_INFO_AMY).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpEditCommand expectedCommand \u003d new ExpEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // amount"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor \u003d new EditExpenditureDescriptorBuilder().withAmount(VALID_AMOUNT_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expectedCommand \u003d new ExpEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor \u003d new EditExpenditureDescriptorBuilder().withDate(VALID_DATE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expectedCommand \u003d new ExpEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor \u003d new EditExpenditureDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        expectedCommand \u003d new ExpEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATE_DESC_AMY + AMOUNT_DESC_AMY"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                + TAG_DESC_FRIEND + DATE_DESC_AMY + AMOUNT_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "                + DATE_DESC_BOB + AMOUNT_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        EditExpenditureDescriptor descriptor \u003d new EditExpenditureDescriptorBuilder()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                .withAmount(VALID_AMOUNT_BOB).withDate(VALID_DATE_BOB)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpEditCommand expectedCommand \u003d new ExpEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXPENDITURE;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        EditExpenditureDescriptor descriptor \u003d new EditExpenditureDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpEditCommand expectedCommand \u003d new ExpEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 7,
      "zwasd": 81,
      "-": 93,
      "JJiahui": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/expenditure/ExpFindCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpFindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpFindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private ExpFindCommandParser parser \u003d new ExpFindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExpFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpFindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                new ExpFindCommand(new InfoContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 9,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/expenditure/ExpLevelParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENDITURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpAddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpDeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpEditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpEditCommand.EditExpenditureDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpFindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.model.expenditure.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.testutil.EditExpenditureDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.testutil.ExpenditureUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpLevelParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final ExpLevelParser parser \u003d new ExpLevelParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    //TODO: REPEAT AND SETBUDGET"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parseExpCommand_add() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Expenditure expenditure \u003d new ExpenditureBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpAddCommand command \u003d (ExpAddCommand) parser.parseCommand(ExpenditureUtil.getAddCommand(expenditure));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertEquals(new ExpAddCommand(expenditure), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parseExpCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpDeleteCommand command \u003d (ExpDeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                seedu.address.logic.commands.expenditure.ExpDeleteCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                        + \" \" + INDEX_FIRST_EXPENDITURE.getOneBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(new ExpDeleteCommand(INDEX_FIRST_EXPENDITURE), command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpFindCommand command \u003d (ExpFindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "                ExpFindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertEquals(new ExpFindCommand(new InfoContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void parseExpCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Expenditure expenditure \u003d new ExpenditureBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        EditExpenditureDescriptor descriptor \u003d new EditExpenditureDescriptorBuilder(expenditure).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        ExpEditCommand command \u003d (ExpEditCommand) parser.parseCommand(ExpEditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                + INDEX_FIRST_EXPENDITURE.getOneBased() + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                + ExpenditureUtil.getEditExpenditureDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(new ExpEditCommand(INDEX_FIRST_EXPENDITURE, descriptor), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void expParseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void expParseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 56,
      "zwasd": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/expenditure/ExpRepeatCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpRepeatCommandParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final ExpRepeatCommandParser parser \u003d new ExpRepeatCommandParser();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/expenditure/ExpSetBudgetCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpSetBudgetCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final ExpSetBudgetCommandParser parser \u003d new ExpSetBudgetCommandParser();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/general/GoCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.general;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class GoCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final GoCommandParser parser \u003d new GoCommandParser();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/report/ExportReportCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExportReportCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final ExportReportCommandParser parser \u003d new ExportReportCommandParser();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/report/ReportLevelParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.commands.general.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ReportLevelParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final ReportLevelParser parser \u003d new ReportLevelParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    //TODO: NEED TEST CASE FOR VIEW AND EXPORT REPORT COMMAND"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void reportParseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    public void reportParseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 22,
      "zwasd": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/report/ViewReportCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.logic.parser.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ViewReportCommandParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final ViewReportCommandParser parser \u003d new ViewReportCommandParser();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sp-shaopeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sp-shaopeng": 4,
      "zwasd": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AccountTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.testutil.TypicalExpenditures.getTypicalAccount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.exceptions.DuplicateExpenditureException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class AccountTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private final Account account \u003d new Account();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(Collections.emptyList(), account.getExpenditureList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e account.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    // public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    //     Account newData \u003d getTypicalAccount();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    //     account.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    //     assertEquals(newData, account);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void resetData_withDuplicateExpenditures_throwsDuplicateExpenditureException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        // Two expenditures with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure editedAlice \u003d new ExpenditureBuilder(ALICE).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        List\u003cExpenditure\u003e newExpenditures \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        AccountStub newData \u003d new AccountStub(newExpenditures);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(DuplicateExpenditureException.class, () -\u003e account.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void hasExpenditure_nullExpenditure_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e account.hasExpenditure(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void hasExpenditure_expenditureNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertFalse(account.hasExpenditure(ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void hasExpenditure_expenditureInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        account.addExpenditure(ALICE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertTrue(account.hasExpenditure(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void hasExpenditure_expenditureWithSameDifferentDate_returnsFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        account.addExpenditure(ALICE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure editedAlice \u003d new ExpenditureBuilder(ALICE).withDate(VALID_DATE_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(account.hasExpenditure(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void getExpenditureList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e account.getExpenditureList().remove(0));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * A stub ReadOnlyAccount whose expenditures list can violate interface constraints."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static class AccountStub implements ReadOnlyAccount {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        private final ObservableList\u003cExpenditure\u003e expenditures \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        AccountStub(Collection\u003cExpenditure\u003e expenditures) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            this.expenditures.setAll(expenditures);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        public ObservableList\u003cExpenditure\u003e getExpenditureList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            return expenditures;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 19,
      "-": 58,
      "JJiahui": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENDITURES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.testutil.TypicalExpenditures.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.model.expenditure.InfoContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.testutil.AccountListBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(new AccountList(true), new AccountList(modelManager.getAccountList()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void hasExpenditure_nullExpenditure_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasExpenditure(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void hasExpenditure_expenditureNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(modelManager.hasExpenditure(ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update model manager or this test case"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void hasExpenditure_expenditureInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     modelManager.addExpenditure(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertTrue(modelManager.hasExpenditure(ALICE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void getFilteredExpenditureList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredExpenditureList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update this test case to reflect changes in account"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void equals() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     Account account \u003d new AccountBuilder(\"account\").withExpenditure(ALICE).withExpenditure(BENSON).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     AccountList accountList \u003d new AccountListBuilder().withAccount(account).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     AccountList differentAccountList \u003d new AccountList(false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // same values -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     modelManager \u003d new ModelManager(accountList, userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     ModelManager modelManagerCopy \u003d new ModelManager(accountList, userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // same object -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // null -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // different types -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // different account -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertFalse(modelManager.equals(new ModelManager(differentAccountList, userPrefs)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     String[] keywords \u003d ALICE.getInfo().fullInfo.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     modelManager.updateFilteredExpenditureList(new InfoContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertFalse(modelManager.equals(new ModelManager(accountList, userPrefs)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     modelManager.updateFilteredExpenditureList(PREDICATE_SHOW_ALL_EXPENDITURES);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertFalse(modelManager.equals(new ModelManager(accountList, differentUserPrefs)));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 49,
      "-": 85,
      "JJiahui": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expenditure/AmountTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.address.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class AmountTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Amount(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String invalidAmount \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(invalidAmount));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void isValidAmount() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // null amount"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // blank amount"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertFalse(Amount.isValidAmount(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertFalse(Amount.isValidAmount(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertFalse(Amount.isValidAmount(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertFalse(Amount.isValidAmount(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertFalse(Amount.isValidAmount(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertFalse(Amount.isValidAmount(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertFalse(Amount.isValidAmount(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertFalse(Amount.isValidAmount(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertFalse(Amount.isValidAmount(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertFalse(Amount.isValidAmount(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertFalse(Amount.isValidAmount(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertFalse(Amount.isValidAmount(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertFalse(Amount.isValidAmount(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertFalse(Amount.isValidAmount(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertFalse(Amount.isValidAmount(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertFalse(Amount.isValidAmount(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertFalse(Amount.isValidAmount(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"fjksjd\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"3.2.1\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"-2\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(Amount.isValidAmount(-3));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // // valid amount"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertTrue(Amount.isValidAmount(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertTrue(Amount.isValidAmount(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertTrue(Amount.isValidAmount(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertTrue(Amount.isValidAmount(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertTrue(Amount.isValidAmount(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertTrue(Amount.isValidAmount(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertTrue(Amount.isValidAmount(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // assertTrue(Amount.isValidAmount(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(Amount.isValidAmount(123.3));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"123.1\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"0\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 42,
      "JJiahui": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expenditure/DateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e seedu.address.model.expenditure.Date.isValidDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(seedu.address.model.expenditure.Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(seedu.address.model.expenditure.Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(seedu.address.model.expenditure.Date.isValidDate(\"2019-09-11\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(seedu.address.model.expenditure.Date.isValidDate(\"2019-09-11\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(seedu.address.model.expenditure.Date.isValidDate(\"2019-09-11\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expenditure/ExpenditureTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.address.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class ExpenditureTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure expenditure \u003d new ExpenditureBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e expenditure.getTags().remove(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "    public void isSameExpenditure() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Expenditure aliceCopy \u003d new ExpenditureBuilder(ALICE).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(ALICE.isSameExpenditure(aliceCopy));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // different object but same fields -\u003e true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure aliceCopy \u003d new ExpenditureBuilder(ALICE).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        // different expenditure -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // different object and fields-\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Expenditure editedAlice \u003d new ExpenditureBuilder(ALICE).withAmount(3.00).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // different object and fields -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        editedAlice \u003d new ExpenditureBuilder(ALICE).withDate(VALID_DATE_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        // different object and fields-\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        editedAlice \u003d new ExpenditureBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 6,
      "zwasd": 9,
      "-": 34,
      "JJiahui": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expenditure/InfoContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.address.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class InfoContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        InfoContainsKeywordsPredicate firstPredicate \u003d new InfoContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        InfoContainsKeywordsPredicate secondPredicate \u003d new InfoContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        InfoContainsKeywordsPredicate firstPredicateCopy \u003d new InfoContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        // different expenditure -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void test_infoContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d new InfoContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertTrue(predicate.test(new ExpenditureBuilder().withInfo(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertTrue(predicate.test(new ExpenditureBuilder().withInfo(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertTrue(predicate.test(new ExpenditureBuilder().withInfo(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertTrue(predicate.test(new ExpenditureBuilder().withInfo(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void test_infoDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        InfoContainsKeywordsPredicate predicate \u003d new InfoContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertFalse(predicate.test(new ExpenditureBuilder().withInfo(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertFalse(predicate.test(new ExpenditureBuilder().withInfo(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // Keywords match id, amount and address, but does not match info"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        predicate \u003d new InfoContainsKeywordsPredicate(Arrays.asList(\"12345\", \"3.14\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(predicate.test(new ExpenditureBuilder().withInfo(\"Alice\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                .withAmount(3.14).withDate(\"2019-09-11\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 20,
      "-": 46,
      "JJiahui": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expenditure/InfoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zwasd"
        },
        "content": "package seedu.address.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class InfoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Info(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void constructor_invalidInfo_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String invalidInfo \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Info(invalidInfo));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void isValidInfo() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // null info"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Info.isValidInfo(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // invalid info"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(Info.isValidInfo(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(Info.isValidInfo(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(Info.isValidInfo(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(Info.isValidInfo(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // valid info"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(Info.isValidInfo(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(Info.isValidInfo(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(Info.isValidInfo(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(Info.isValidInfo(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertTrue(Info.isValidInfo(\"David Roger Jackson Ray Jr 2nd\")); // long infos"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expenditure/UniqueExpenditureListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.address.model.expenditure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.exceptions.DuplicateExpenditureException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.exceptions.ExpenditureNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.testutil.ExpenditureBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class UniqueExpenditureListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private final UniqueExpenditureList uniqueExpenditureList \u003d new UniqueExpenditureList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void contains_nullExpenditure_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenditureList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void contains_expenditureNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertFalse(uniqueExpenditureList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void contains_expenditureInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertTrue(uniqueExpenditureList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void contains_expenditureWithDifferentData_returnsFalse() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure editedAlice \u003d new ExpenditureBuilder(ALICE).withDate(VALID_DATE_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertFalse(uniqueExpenditureList.contains(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void add_nullExpenditure_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenditureList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void add_duplicateExpenditure_throwsDuplicateExpenditureException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(DuplicateExpenditureException.class, () -\u003e uniqueExpenditureList.add(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditure_nullTargetExpenditure_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenditureList.setExpenditure(null, ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditure_nullEditedExpenditure_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenditureList.setExpenditure(ALICE, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditure_targetExpenditureNotInList_throwsExpenditureNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(ExpenditureNotFoundException.class, () -\u003e uniqueExpenditureList.setExpenditure(ALICE, ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditure_editedExpenditureEquals_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.setExpenditure(ALICE, ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        UniqueExpenditureList expectedUniqueExpenditureList \u003d new UniqueExpenditureList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expectedUniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(expectedUniqueExpenditureList, uniqueExpenditureList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditure_editedExpenditureHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        Expenditure editedAlice \u003d new ExpenditureBuilder(ALICE).withDate(VALID_DATE_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.setExpenditure(ALICE, editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        UniqueExpenditureList expectedUniqueExpenditureList \u003d new UniqueExpenditureList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expectedUniqueExpenditureList.add(editedAlice);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(expectedUniqueExpenditureList, uniqueExpenditureList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditure_editedExpenditureHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.setExpenditure(ALICE, BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        UniqueExpenditureList expectedUniqueExpenditureList \u003d new UniqueExpenditureList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expectedUniqueExpenditureList.add(BOB);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(expectedUniqueExpenditureList, uniqueExpenditureList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditure_editedExpenditureHasNonUniqueIdentity_throwsDuplicateExpenditureException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(DuplicateExpenditureException.class, () -\u003e uniqueExpenditureList.setExpenditure(ALICE, BOB));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void remove_nullExpenditure_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenditureList.remove(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void remove_expenditureDoesNotExist_throwsExpenditureNotFoundException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(ExpenditureNotFoundException.class, () -\u003e uniqueExpenditureList.remove(ALICE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void remove_existingExpenditure_removesExpenditure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.remove(ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        UniqueExpenditureList expectedUniqueExpenditureList \u003d new UniqueExpenditureList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(expectedUniqueExpenditureList, uniqueExpenditureList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditures_nullUniqueExpenditureList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                uniqueExpenditureList.setExpenditures((UniqueExpenditureList) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditures_uniqueExpenditureList_replacesOwnListWithProvidedUniqueExpenditureList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        UniqueExpenditureList expectedUniqueExpenditureList \u003d new UniqueExpenditureList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expectedUniqueExpenditureList.add(BOB);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.setExpenditures(expectedUniqueExpenditureList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(expectedUniqueExpenditureList, uniqueExpenditureList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditures_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenditureList.setExpenditures((List\u003cExpenditure\u003e) null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditures_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.add(ALICE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        List\u003cExpenditure\u003e expenditureList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        uniqueExpenditureList.setExpenditures(expenditureList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        UniqueExpenditureList expectedUniqueExpenditureList \u003d new UniqueExpenditureList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expectedUniqueExpenditureList.add(BOB);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(expectedUniqueExpenditureList, uniqueExpenditureList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void setExpenditures_listWithDuplicateExpenditures_throwsDuplicateExpenditureException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        List\u003cExpenditure\u003e listWithDuplicateExpenditures \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(DuplicateExpenditureException.class, () -\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                uniqueExpenditureList.setExpenditures(listWithDuplicateExpenditures));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            -\u003e uniqueExpenditureList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 32,
      "-": 86,
      "JJiahui": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAccountStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.testutil.TypicalExpenditures.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.HOON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.IDA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static seedu.address.testutil.TypicalExpenditures.getTypicalAccount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.model.Account;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.model.ReadOnlyAccount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class JsonAccountStorageTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAccountStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAccountList\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new JsonAccountListStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void readAddressBook_invalidExpenditureAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidExpenditureAddressBook.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void readAddressBook_invalidAndValidExpenditureAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                readAddressBook(\"invalidAndValidExpenditureAddressBook.json\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList original \u003d getTypicalAccountList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        JsonAccountListStorage jsonAccountListStorage \u003d new JsonAccountListStorage(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        jsonAccountListStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        ReadOnlyAccountList readBack \u003d jsonAccountListStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(original, new AccountList(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        original.addExpenditure(HOON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // TODO: why does allowing this to run fails?"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        // original.removeExpenditure(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        jsonAccountListStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        readBack \u003d jsonAccountListStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(original, new AccountList(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        original.addExpenditure(IDA);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        jsonAccountListStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        readBack \u003d jsonAccountListStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(original, new AccountList(readBack));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private void saveAddressBook(ReadOnlyAccountList addressBook, String filePath) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            new JsonAccountListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AccountList(false), null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 13,
      "-": 79,
      "JJiahui": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedExpenditureTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.storage.JsonAdaptedExpenditure.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Info;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class JsonAdaptedExpenditureTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String INVALID_INFO \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String INVALID_DATE \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private static final double INVALID_AMOUNT \u003d -1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String VALID_INFO \u003d BENSON.getInfo().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private static final double VALID_AMOUNT \u003d BENSON.getAmount().value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final String VALID_DATE \u003d BENSON.getDate().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void toModelType_validExpenditureDetails_returnsExpenditure() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        JsonAdaptedExpenditure expenditure \u003d new JsonAdaptedExpenditure(BENSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertEquals(BENSON, expenditure.toModelType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void toModelType_invalidInfo_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        JsonAdaptedExpenditure expenditure \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                new JsonAdaptedExpenditure(INVALID_INFO, VALID_AMOUNT, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String expectedMessage \u003d Info.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expenditure::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void toModelType_nullInfo_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        JsonAdaptedExpenditure expenditure \u003d new JsonAdaptedExpenditure(null, VALID_AMOUNT, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Info.class.getSimpleName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expenditure::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        JsonAdaptedExpenditure expenditure \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                new JsonAdaptedExpenditure(VALID_INFO, INVALID_AMOUNT, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expenditure::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        JsonAdaptedExpenditure expenditure \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                new JsonAdaptedExpenditure(VALID_INFO, INVALID_AMOUNT, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expenditure::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        JsonAdaptedExpenditure expenditure \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                new JsonAdaptedExpenditure(VALID_INFO, VALID_AMOUNT, INVALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expenditure::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        JsonAdaptedExpenditure expenditure \u003d new JsonAdaptedExpenditure(VALID_INFO, VALID_AMOUNT, null, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expenditure::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        JsonAdaptedExpenditure expenditure \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zwasd"
        },
        "content": "                new JsonAdaptedExpenditure(VALID_INFO, VALID_AMOUNT, VALID_DATE, invalidTags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        assertThrows(IllegalValueException.class, expenditure::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 47,
      "-": 41,
      "JJiahui": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAccountTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.model.Account;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.testutil.TypicalAccounts;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "// import seedu.address.testutil.TypicalExpenditures;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class JsonSerializableAccountTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAccountTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final Path TYPICAL_EXPENDITURES_FILE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalExpendituresAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private static final Path INVALID_EXPENDITURE_FILE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidExpenditureAddressBook.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // private static final Path DUPLICATE_EXPENDITURE_FILE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //        TEST_DATA_FOLDER.resolve(\"duplicateExpenditureAddressBook.json\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: update test case to reflect updated account"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void toModelType_typicalExpendituresFile_success() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     JsonSerializableAccountList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_EXPENDITURES_FILE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             JsonSerializableAccountList.class).get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     AccountList accountFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     AccountList typicalExpendituresAccount \u003d TypicalAccounts.getTypicalAccountList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertEquals(accountFromFile, typicalExpendituresAccount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public void toModelType_invalidExpenditureFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        JsonSerializableAccountList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EXPENDITURE_FILE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "                JsonSerializableAccountList.class).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // TODO: check for duplicate account instead of expenditures"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // public void toModelType_duplicateExpenditures_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     JsonSerializableAccountList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_EXPENDITURE_FILE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             JsonSerializableAccountList.class).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //     assertThrows(IllegalValueException.class, JsonSerializableAccount.MESSAGE_DUPLICATE_EXPENDITURE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    //             dataFromFile::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 33,
      "-": 20,
      "JJiahui": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"saveit.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 122,
      "JJiahui": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.getTypicalAccountList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.ReadOnlyAccountList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        JsonAccountListStorage addressBookStorage \u003d new JsonAccountListStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "         * {@link JsonAccountListStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zwasd"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAccountStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList original \u003d getTypicalAccountList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        ReadOnlyAccountList retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        assertEquals(original, new AccountList(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "-": 59,
      "JJiahui": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AccountBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.Account;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * A utility class to help with building Account objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": " *     {@code Account ab \u003d new AccountBuilder().withExpenditure(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class AccountBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccountBuilder(String accountName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        account \u003d new Account(accountName);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccountBuilder(Account account) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.account \u003d account;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Adds a new {@code Expenditure} to the {@code Account} that we are building."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccountBuilder withExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        account.addExpenditure(expenditure);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public Account build() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return account;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 9,
      "-": 19,
      "JJiahui": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AccountListBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.Account;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * A utility class to help with building AccountList objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": " *     {@code Account ab \u003d new AccountBuilder().withExpenditure(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class AccountListBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private AccountList accountList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccountListBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList \u003d new AccountList(false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccountListBuilder(AccountList accountList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        this.accountList \u003d accountList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Adds a new {@code Expenditure} to the {@code Account} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccountListBuilder withAccount(Account account) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        accountList.addAccount(account);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public AccountList build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return accountList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 1,
      "JJiahui": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditExpenditureDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpEditCommand.EditExpenditureDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Info;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": " * A utility class to help with building EditExpenditureDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class EditExpenditureDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private EditExpenditureDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public EditExpenditureDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor \u003d new EditExpenditureDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public EditExpenditureDescriptorBuilder(EditExpenditureDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.descriptor \u003d new EditExpenditureDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Returns an {@code EditExpenditureDescriptor} with fields containing {@code expenditure}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public EditExpenditureDescriptorBuilder(Expenditure expenditure) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor \u003d new EditExpenditureDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor.setInfo(expenditure.getInfo());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        descriptor.setAmount(expenditure.getAmount());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor.setDate(expenditure.getDate());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        descriptor.setTags(expenditure.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Sets the {@code Info} of the {@code EditExpenditureDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public EditExpenditureDescriptorBuilder withInfo(String info) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor.setInfo(new Info(info));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Sets the {@code Amount} of the {@code EditExpenditureDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public EditExpenditureDescriptorBuilder withAmount(double amount) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor.setAmount(new Amount(amount));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Sets the {@code Date} of the {@code EditExpenditureDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public EditExpenditureDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor.setDate(new Date(date));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditExpenditureDescriptor}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public EditExpenditureDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public EditExpenditureDescriptor build() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 30,
      "-": 44,
      "JJiahui": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenditureBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Amount;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.expenditure.Info;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * A utility class to help with building Expenditure objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class ExpenditureBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String DEFAULT_INFO \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final double DEFAULT_AMOUNT \u003d 3.14;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"2019-09-11\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private Info info;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ExpenditureBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        info \u003d new Info(DEFAULT_INFO);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Initializes the ExpenditureBuilder with the data of {@code expenditureToCopy}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ExpenditureBuilder(Expenditure expenditureToCopy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        info \u003d expenditureToCopy.getInfo();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        amount \u003d expenditureToCopy.getAmount();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        date \u003d expenditureToCopy.getDate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(expenditureToCopy.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Sets the {@code Info} of the {@code Expenditure} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ExpenditureBuilder withInfo(String info) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.info \u003d new Info(info);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Expenditure} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ExpenditureBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Sets the {@code Address} of the {@code Expenditure} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ExpenditureBuilder withDate(String date) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Sets the {@code Email} of the {@code Expenditure} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public ExpenditureBuilder withAmount(double amount) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public Expenditure build() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "        return new Expenditure(info, amount, date, tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 1,
      "zwasd": 25,
      "-": 39,
      "JJiahui": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenditureUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INFO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.logic.commands.expenditure.ExpEditCommand.EditExpenditureDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * A utility class for Expenditure."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zwasd"
        },
        "content": "public class ExpenditureUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns an add command string for adding the {@code expenditure}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static String getAddCommand(Expenditure expenditure) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return ExpAddCommand.COMMAND_WORD + \" \" + getExpenditureDetails(expenditure);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns the part of command string for the given {@code expenditure}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static String getExpenditureDetails(Expenditure expenditure) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        sb.append(PREFIX_INFO + expenditure.getInfo().fullInfo + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        sb.append(PREFIX_AMOUNT + Double.toString(expenditure.getAmount().value) + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        sb.append(PREFIX_DATE + expenditure.getDate().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        expenditure.getTags().stream().forEach("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Returns the part of command string for the given {@code EditExpenditureDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static String getEditExpenditureDescriptorDetails(EditExpenditureDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor.getInfo().ifPresent(info -\u003e sb.append(PREFIX_INFO).append(info.fullInfo).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor.getAmount().ifPresent(amount -\u003e sb.append(PREFIX_AMOUNT).append(amount.value).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        descriptor.getDate().ifPresent(date -\u003e sb.append(PREFIX_DATE).append(date.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            if (!tags.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 20,
      "-": 28,
      "JJiahui": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns the middle index of the expenditure in the {@code model}\u0027s expenditure list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExpenditureList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns the last index of the expenditure in the {@code model}\u0027s expenditure list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExpenditureList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     * Returns the expenditure in the {@code model}\u0027s expenditure list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static Expenditure getExpenditure(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        return model.getFilteredExpenditureList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 4,
      "-": 47,
      "JJiahui": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAccounts.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.DANIEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.ELLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.FIONA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.GEORGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.Account;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.AccountList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zwasd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * A utility class containing a list of {@code Expenditure} objects to be used in tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class TypicalAccounts {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Account SCHOOL \u003d new AccountBuilder(\"school\").withExpenditure(ALICE)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withExpenditure(BENSON).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final Account WORK \u003d new AccountBuilder(\"work\").withExpenditure(CARL).withExpenditure(DANIEL).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Account CCA \u003d new AccountBuilder(\"cca\").withExpenditure(ELLE)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withExpenditure(FIONA).withExpenditure(GEORGE).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private TypicalAccounts() {} // prevents instantiation"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Returns an {@code Account} with all the typical expenditures."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static AccountList getTypicalAccountList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        AccountList ab \u003d new AccountList(false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        for (Account account : getTypicalAccounts()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            ab.addAccount(account);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        ab.updateActiveAccount(\"school\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JJiahui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static List\u003cAccount\u003e getTypicalAccounts() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SCHOOL, WORK, CCA));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 12,
      "JJiahui": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalExpenditures.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INFO_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INFO_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zwasd"
        },
        "content": "import seedu.address.model.Account;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "import seedu.address.model.expenditure.Expenditure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JJiahui"
        },
        "content": " * A utility class containing a list of {@code Expenditure} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "public class TypicalExpenditures {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final Expenditure ALICE \u003d new ExpenditureBuilder().withInfo(\"Alice Pauline\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withDate(\"2019-09-11\").withAmount(3.14)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static final Expenditure BENSON \u003d new ExpenditureBuilder().withInfo(\"Benson Meier\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withDate(\"2019-09-11\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XinPei-ng"
        },
        "content": "            .withAmount(3.14)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Expenditure CARL \u003d new ExpenditureBuilder().withInfo(\"Carl Kurz\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withAmount(3.14).withDate(\"2019-09-11\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Expenditure DANIEL \u003d new ExpenditureBuilder().withInfo(\"Daniel Meier\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withAmount(3.14).withDate(\"2019-09-11\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Expenditure ELLE \u003d new ExpenditureBuilder().withInfo(\"Elle Meyer\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withAmount(3.14).withDate(\"2019-09-11\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Expenditure FIONA \u003d new ExpenditureBuilder().withInfo(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withAmount(3.14).withDate(\"2019-09-11\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Expenditure GEORGE \u003d new ExpenditureBuilder().withInfo(\"George Best\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withAmount(3.14).withDate(\"2019-09-11\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Expenditure HOON \u003d new ExpenditureBuilder().withInfo(\"Hoon Meier\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withAmount(3.14).withDate(\"2019-09-11\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Expenditure IDA \u003d new ExpenditureBuilder().withInfo(\"Ida Mueller\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withAmount(3.14).withDate(\"2019-09-11\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    // Manually added - Expenditure\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Expenditure AMY \u003d new ExpenditureBuilder().withInfo(VALID_INFO_AMY)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withAmount(VALID_AMOUNT_AMY).withDate(VALID_DATE_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Expenditure BOB \u003d new ExpenditureBuilder().withInfo(VALID_INFO_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zwasd"
        },
        "content": "            .withAmount(VALID_AMOUNT_BOB).withDate(VALID_DATE_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    private TypicalExpenditures() {} // prevents instantiation"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zwasd"
        },
        "content": "     * Returns an {@code Account} with all the typical expenditures."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static Account getTypicalAccount() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zwasd"
        },
        "content": "        Account ab \u003d new Account();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "        for (Expenditure expenditure : getTypicalExpenditures()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "            ab.addExpenditure(expenditure);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JJiahui"
        },
        "content": "    public static List\u003cExpenditure\u003e getTypicalExpenditures() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XinPei-ng": 1,
      "zwasd": 31,
      "-": 30,
      "JJiahui": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Index INDEX_FIRST_EXPENDITURE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Index INDEX_SECOND_EXPENDITURE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zwasd"
        },
        "content": "    public static final Index INDEX_THIRD_EXPENDITURE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zwasd": 3,
      "-": 9
    }
  }
]
