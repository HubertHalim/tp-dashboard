[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "mainClassName \u003d \u0027csdev.couponstash.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-swing\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alcen"
        },
        "content": "    archiveName \u003d \u0027couponStash.jar\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "    archiveVersion \u003d \u00271.2.5\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alcen"
        },
        "content": "        \u0027site-name\u0027: \u0027Coupon Stash\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alcen"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-F09-1/main\u0027"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "alcen": 5,
      "nelsontky": 4,
      "-": 149
    }
  },
  {
    "path": "copyright.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿Some code adapted from http://code.makery.ch/library/javafx-8-tutorial/ by Marco Jakob"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Susumu Yoshida - http://www.mcdodesign.com/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "- coupon_stash_32.png"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "- CouponStash.ico"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Jan Jan Kovařík - http://glyphicons.com/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "- calendar.png"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "- edit.png"
      }
    ],
    "authorContributionMap": {
      "alcen": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/AppParameters.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.Version;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.LogicManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.logic.commands.RemindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.CouponStash;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ReadOnlyCouponStash;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.storage.CouponStashStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.storage.JsonCouponStashStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.ui.UiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 5, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing CouponStash ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CouponStashStorage couponStashStorage \u003d new JsonCouponStashStorage(userPrefs.getCouponStashFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "        storage \u003d new StorageManager(couponStashStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s CouponStash and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * The data from the sample CouponStash will be used instead if {@code storage}\u0027s CouponStash is not found,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * or an empty CouponStash will be used instead if errors occur when reading {@code storage}\u0027s CouponStash."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Optional\u003cReadOnlyCouponStash\u003e couponStashOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alcen"
        },
        "content": "        ReadOnlyCouponStash initialData;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alcen"
        },
        "content": "            couponStashOptional \u003d storage.readCouponStash();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            if (couponStashOptional.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alcen"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample CouponStash\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alcen"
        },
        "content": "            initialData \u003d couponStashOptional.orElseGet(SampleDataUtil::getSampleCouponStash);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty CouponStash\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alcen"
        },
        "content": "            initialData \u003d new CouponStash();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alcen"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CouponStash\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alcen"
        },
        "content": "            initialData \u003d new CouponStash();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alcen"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CouponStash\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alcen"
        },
        "content": "        logger.info(\"Starting CouponStash \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        List\u003cCoupon\u003e lastShownList \u003d model.getFilteredCouponList();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        RemindCommand.showRemind(lastShownList);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alcen"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping CouponStash ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 44,
      "KEVVVINN": 7,
      "-": 139
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/commons/core/Config.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/commons/core/GuiSettings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/commons/core/LogsCenter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static final String LOG_FILE \u003d \"couponstash.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_INVALID_COUPON_DISPLAYED_INDEX \u003d \"The coupon index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_COUPONS_LISTED_OVERVIEW \u003d \"%1$d coupons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String MESSAGE_COUPONS_EXPIRING_BEFORE_DATE \u003d \"Coupon(s) expiring before %s:\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String MESSAGE_REMIND_DATE_EXCEED_EXPIRY_DATE \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            \"Please input an earlier date to be reminded, than the coupon\u0027s expiry date\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String MESSAGE_REMIND_DATE_BEFORE_TODAYS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            \"Please input a later date than today\u0027s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 3,
      "KEVVVINN": 5,
      "-": 10
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/commons/core/StashSettings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.moneysymbol.MoneySymbol;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": " * This class holds the settings of the CouponStash"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": " * that may be configured by the user, such as the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": " * symbol to be used for MonetaryAmount."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class StashSettings implements Serializable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String DEFAULT_MONEY_SYMBOL \u003d \"$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static final long serialVersionUID \u003d 9044979298460194104L;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final MoneySymbol moneySymbol;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public StashSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.moneySymbol \u003d MoneySymbol.getMoneySymbol(StashSettings.DEFAULT_MONEY_SYMBOL);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public StashSettings(MoneySymbol moneySymbol) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.moneySymbol \u003d moneySymbol;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public MoneySymbol getMoneySymbol() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.moneySymbol;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (!(o instanceof StashSettings)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "        StashSettings ss \u003d (StashSettings) o;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // will always return true as there can only be one MoneySymbol"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.moneySymbol.equals(ss.moneySymbol);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return Objects.hash(this.moneySymbol);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "        sb.append(\"Money Symbol : \" + this.moneySymbol.getString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 57
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/commons/core/Version.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/commons/core/index/Index.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/commons/exceptions/DataConversionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/commons/exceptions/IllegalValueException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/commons/moneysymbol/MoneySymbol.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.moneysymbol;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Mutable class for holding the money symbol"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": " * used in Coupon Stash. A wrapper class around a String,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": " * this ensures that all references to the money symbol"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": " * will be changed once the String is changed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Follows the singleton pattern. Only one MoneySymbol exists"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": " * and acts as the universal source of truth for every occurence."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "public interface MoneySymbol {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns the single MoneySymbol if it exists."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * If it does not exist, create it with value"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * represented in the String initial."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param initial The initial String value to be stored,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                if the MoneySymbol did not exist."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return The MoneySymbol."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "    static MoneySymbol getMoneySymbol(String initial) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (MoneySymbolImpl.theOne \u003d\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "            MoneySymbolImpl.theOne \u003d new MoneySymbolImpl(initial);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return MoneySymbolImpl.theOne;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Changes the String representing money symbol"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * stored in this MoneySymbol to a new String."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param newSymbol The new symbol to be set."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return Returns the old symbol."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "    String setString(String newSymbol);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Gets the String representing money symbol"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * stored in this MoneySymbol object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return The current money symbol."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "    String getString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 43
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/commons/moneysymbol/MoneySymbolImpl.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.moneysymbol;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Concrete implementation of MoneySymbol interface."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class MoneySymbolImpl implements MoneySymbol {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "    // Warning: This should NOT be accessed by any other class"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "    // other than MoneySymbol!"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "    protected static MoneySymbol theOne \u003d null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private String moneySymbol;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * WARNING: THIS METHOD SHOULD NOT BE RUN OUTSIDE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * OF MONEY_SYMBOL and MONEY_SYMBOL_IMPL!"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param moneySymbol The String representing"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                    money symbol."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "    protected MoneySymbolImpl(String moneySymbol) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.moneySymbol \u003d moneySymbol;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public String setString(String newSymbol) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "        String oldSymbol \u003d moneySymbol;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.moneySymbol \u003d newSymbol;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return oldSymbol;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public String getString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.moneySymbol;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else if (o instanceof MoneySymbol) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return ((MoneySymbol) o).getString().equals(this.moneySymbol);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.moneySymbol;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 50
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/commons/util/AppUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/commons/util/CollectionUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/commons/util/ConfigUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/commons/util/DateUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * This class stores a common DateTimeFormatter to be"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * used on all dates in Coupon Stash. Ensures that all"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * dates have a consistent format that can be changed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * easily if desired."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "public class DateUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    // The standard DateTimeFormatter describing the consistent Coupon Stash Date Format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d-M-yyyy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final String MESSAGE_DATE_WRONG_FORMAT \u003d \"Date is in the\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            + \" wrong format! Should be D-M-YYYY\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    //For Calendar"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER_FOR_CALENDAR \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .ofPattern(\"EEEE, d LLLL yyyy\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final DateTimeFormatter DAY_MONTH_YEAR_FORMATTER_FOR_CALENDAR \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .ofPattern(\"d LLLL yyyy\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final DateTimeFormatter MONTH_YEAR_FORMATTER_FOR_CALENDAR \u003d DateTimeFormatter.ofPattern(\"LLLL yyyy\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private static final int MINIMUM_YEAR \u003d 2000;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private static final int MAXIMUM_YEAR \u003d 2200;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns a formatted date string based on the specified date."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param date The specified date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @return Formatted date string."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static String getFormattedDateString(LocalDate date, DateTimeFormatter formatter) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return date.format(formatter);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns true if the specified year is more than or equals to the current year and"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * less than or equals the maximum year."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param year The specified year."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @return True if the specified year is valid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static boolean isValidYear(int year) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return year \u003e\u003d MINIMUM_YEAR \u0026\u0026 year \u003c\u003d MAXIMUM_YEAR;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Formats a certain LocalDate using the default"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * DateTimeFormatter specified in DateUtil,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * resulting in a String described by that format."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param ld The LocalDate to be formatted to a String."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @return String representing LocalDate using the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * format described in DateUtil."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static String formatDate(LocalDate ld) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return ld.format(DateUtil.DATE_FORMATTER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Parses a String into a LocalDate using the"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * format described in DateUtil. If this"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * String does not match the common format,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * DateTimeParseException will be thrown"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param str The String to be parsed into a LocalDate."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @return LocalDate containing temporal information."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static LocalDate parseString(String str) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return LocalDate.parse(str, DATE_FORMATTER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 78
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/commons/util/FileUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * {@link Paths#get(String, String...)},"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 3,
      "-": 81
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/commons/util/JsonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 5,
      "-": 138
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/commons/util/StringUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.StashSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ReadOnlyCouponStash;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.ui.CsTab;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    CommandResult execute(String commandText, CsTab selectedTab) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns the CouponStash."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @see Model#getCouponStash()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "    ReadOnlyCouponStash getCouponStash();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of coupons */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "    ObservableList\u003cCoupon\u003e getFilteredCouponList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns the user prefs\u0027 CouponStash file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "    Path getCouponStashFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns the user prefs\u0027 CouponStash settings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "    StashSettings getStashSettings();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Set the user prefs\u0027 CouponStash settings."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "    void setStashSettings(StashSettings stashSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 2,
      "alcen": 28,
      "-": 34
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.StashSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.logic.commands.IndexedCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.parser.CouponStashParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ReadOnlyCouponStash;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.ui.CsTab;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String INCORRECT_TAB_ERROR_MESSAGE \u003d \"This command can\u0027t be executed in this page!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final CouponStashParser couponStashParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "        couponStashParser \u003d new CouponStashParser(model.getStashSettings().getMoneySymbol());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public CommandResult execute(String commandText, CsTab selectedTab) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Command command \u003d couponStashParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (!selectedTab.equals(CsTab.COUPONS) \u0026\u0026 command instanceof IndexedCommand) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            logger.info(\"Aborting index command execution in incorrect tab\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            throw new CommandException(INCORRECT_TAB_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        CommandResult commandResult \u003d command.execute(model, commandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "            storage.saveCouponStash(model.getCouponStash());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public ReadOnlyCouponStash getCouponStash() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return model.getCouponStash();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public ObservableList\u003cCoupon\u003e getFilteredCouponList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return model.getFilteredCouponList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Path getCouponStashFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return model.getCouponStashFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public StashSettings getStashSettings() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return model.getStashSettings();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setStashSettings(StashSettings stashSettings) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alcen"
        },
        "content": "        model.setStashSettings(stashSettings);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 12,
      "alcen": 35,
      "-": 52
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_LIMIT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_PROMO_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_SAVINGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.PercentageAmount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Adds a coupon to CouponStash."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a coupon to CouponStash. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            + PREFIX_PROMO_CODE + \"PROMO CODE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            + PREFIX_EXPIRY_DATE + \"EXPIRY DATE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + PREFIX_SAVINGS + \"SAVINGS \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            + \"[\" + PREFIX_START_DATE + \"START DATE]\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \"[\" + PREFIX_SAVINGS + \"SAVINGS]...\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            + PREFIX_NAME + \"The Deck Chicken Rice \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            + PREFIX_PROMO_CODE + \"98765432 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            + PREFIX_EXPIRY_DATE + \"30-08-2020 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + PREFIX_SAVINGS + \"50\" + PercentageAmount.PERCENT_SUFFIX + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            + PREFIX_START_DATE + \"1-8-2020 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            + PREFIX_LIMIT + \"5 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            + PREFIX_TAG + \"Value \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            + PREFIX_TAG + \"ChickenRice\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New coupon added: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_COUPON \u003d \"This coupon already exists in CouponStash\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final Coupon toAdd;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Coupon}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public AddCommand(Coupon coupon) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "        requireNonNull(coupon);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "        toAdd \u003d coupon;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CommandResult execute(Model model, String commandText) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (model.hasCoupon(toAdd)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_COUPON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        model.addCoupon(toAdd, commandText);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 9,
      "ChesterSim": 2,
      "alcen": 24,
      "nelsontky": 6,
      "-": 35
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/ArchiveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Archived;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " * Archives a coupon."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class ArchiveCommand extends IndexedCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archive\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Archives the coupon identified by \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            + \"the index number used in the displayed coupon list. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            + \"This removes the coupon from the active list, and place it into the program archives. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String MESSAGE_ARCHIVE_COUPON_SUCCESS \u003d \"Archived Coupon: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String MESSAGE_COUPON_ALREADY_ARCHIVED \u003d \"Coupon: %1$s is already archived!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Creates an ArchiveCommand to archive the {@code Coupon} at the specified {@code targetIndex}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * @param targetIndex Index of the coupon to be archived."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public ArchiveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public CommandResult execute(Model model, String commandText) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        requireNonNull(model, commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        List\u003cCoupon\u003e lastShownList \u003d model.getFilteredCouponList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COUPON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon couponToBeArchived \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Archived currentStateOfArchival \u003d couponToBeArchived.getArchived();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (Boolean.parseBoolean(currentStateOfArchival.toString())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_COUPON_ALREADY_ARCHIVED,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                    couponToBeArchived.getName()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon archivedCoupon \u003d couponToBeArchived.archive();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        model.setCoupon(couponToBeArchived, archivedCoupon, commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        model.updateFilteredCouponList(Model.PREDICATE_SHOW_ALL_ACTIVE_COUPONS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ARCHIVE_COUPON_SUCCESS, archivedCoupon.getName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                || (other instanceof ArchiveCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ArchiveCommand) other).targetIndex));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 66
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.CouponStash;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Clears the CouponStash."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"CouponStash has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CommandResult execute(Model model, String commandText) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        model.setCouponStash(new CouponStash(), commandText);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 5,
      "nelsontky": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @param commandText the command that triggered this execution"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public abstract CommandResult execute(Model model, String commandText) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Executes the command and returns the result message, used for tests that do not require"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * a commandText"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return execute(model, \"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 3,
      "nelsontky": 13,
      "-": 16
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 1,
      "alcen": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/ConditionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.coupon.Archived;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Condition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.ExpiryDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Limit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.PromoCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.RemindDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.StartDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Usage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.savings.DateSavingsSumMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Savings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": " * This class represents the \"condition\" command in Coupon Stash. It set command of a coupon in a CouponStash"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "public class ConditionCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"condition\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the Terms \u0026 Condition of the identified coupon \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            + \"by the index number used in the coupon listing.\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            + \"Exising Terms \u0026 Condition will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            + PREFIX_CONDITION + \" [T\u0026C]\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            + \"c/ Min Spending of $15.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private static String messageSuccess \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private final Condition condition;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * @param index of the coupon in the filtered coupon list to edit the condition"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * @param condition of the coupon to be updated to"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public ConditionCommand(Index index, Condition condition) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        requireAllNonNull(index, condition);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        this.condition \u003d condition;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public CommandResult execute(Model model, String commandText) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        List\u003cCoupon\u003e lastShownList \u003d model.getFilteredCouponList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Coupon conditionCoupon;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // index is out of range"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COUPON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (!commandText.contains(\"c/\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            throw new CommandException(MESSAGE_USAGE + \"\\n\" + Condition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        commandText \u003d commandText.substring(commandText.lastIndexOf(\"c/\") + 2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (commandText.equals(\"\") || commandText.equals(\" \")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            throw new CommandException(Condition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        String edittedText \u003d commandText.replaceAll(\"\\\\p{Punct}\", \" \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        int wordCount \u003d edittedText.split(\"\\\\s+\").length;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (wordCount \u003e 50) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            throw new CommandException(Condition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Coupon couponToBeConditioned \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        conditionCoupon \u003d createConditionCoupon(couponToBeConditioned, commandText);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        model.setCoupon(couponToBeConditioned, conditionCoupon, commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        model.updateFilteredCouponList(Model.PREDICATE_SHOW_ALL_ACTIVE_COUPONS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        messageSuccess \u003d \"Changes have been made to coupon: \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                + conditionCoupon.getName().toString() + \"\u0027s condition statement.\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                + \"Edited condition: \" + commandText;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return new CommandResult(String.format(messageSuccess, conditionCoupon));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), condition));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (!(other instanceof ConditionCommand)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        ConditionCommand e \u003d (ConditionCommand) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                \u0026\u0026 condition.equals(e.condition);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Creates and returns a {@code Coupon} with the new condition"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private static Coupon createConditionCoupon(Coupon couponToBeConditioned, String commandText) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Name name \u003d couponToBeConditioned.getName();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Savings savingsForEachUse \u003d couponToBeConditioned.getSavingsForEachUse();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        PromoCode promoCode \u003d couponToBeConditioned.getPromoCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        ExpiryDate expiryDate \u003d couponToBeConditioned.getExpiryDate();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        StartDate startDate \u003d couponToBeConditioned.getStartDate();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Limit limit \u003d couponToBeConditioned.getLimit();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        RemindDate remindDate \u003d couponToBeConditioned.getRemindDate();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Set\u003cTag\u003e tags \u003d couponToBeConditioned.getTags();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Usage updatedUsage \u003d couponToBeConditioned.getUsage();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        DateSavingsSumMap totalSavings \u003d couponToBeConditioned.getSavingsMap();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Archived archived \u003d couponToBeConditioned.getArchived();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Condition condition \u003d new Condition(commandText);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return new Coupon(name, promoCode, savingsForEachUse, expiryDate, startDate, updatedUsage, limit,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                tags, totalSavings, remindDate, condition, archived);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KEVVVINN": 133,
      "nelsontky": 4
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/CopyCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_LIMIT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_PROMO_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_SAVINGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.awt.Toolkit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.awt.datatransfer.Clipboard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.awt.datatransfer.StringSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.ExpiryDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.Limit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.PromoCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Saveable;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Savings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * Copies a coupon identified using it\u0027s displayed index from the CouponStash."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class CopyCommand extends IndexedCommand {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"copy\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            + \": Copies the coupon identified by the index number used in the displayed coupon list.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final String MESSAGE_COPY_COUPON_SUCCESS \u003d \"Copied coupon: %1$s.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            + \"Copied to your clipboard! Ctrl + v to paste this coupon!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private Coupon coupon;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public CopyCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CommandResult execute(Model model, String commandText) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        List\u003cCoupon\u003e lastShownList \u003d model.getFilteredCouponList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COUPON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.coupon \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String copyCommand \u003d getCopyCommand(coupon);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        copyToClipboard(copyCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_COPY_COUPON_SUCCESS, coupon.getName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public String getCopyCommand(Coupon coupon) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        Name name \u003d coupon.getName();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        PromoCode promoCode \u003d coupon.getPromoCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        ExpiryDate expiryDate \u003d coupon.getExpiryDate();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        Limit limit \u003d coupon.getLimit();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        Savings savings \u003d coupon.getSavingsForEachUse();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String totalSavings \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        if (savings.hasMonetaryAmount()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            totalSavings +\u003d addPrefixAndDetails(PREFIX_SAVINGS, savings.getMonetaryAmount().get().toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        if (savings.hasPercentageAmount()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            totalSavings +\u003d addPrefixAndDetails(PREFIX_SAVINGS, savings.getPercentageAmount().get().toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        if (savings.hasSaveables()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            List\u003cSaveable\u003e saveableList \u003d savings.getSaveables().get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            for (Saveable s: saveableList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                String saving \u003d s.toString().substring(3);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                totalSavings +\u003d addPrefixAndDetails(PREFIX_SAVINGS, saving);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String copyCommand \u003d AddCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                + PREFIX_NAME.getPrefix() + name + \" \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                + PREFIX_PROMO_CODE + promoCode + \" \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                + PREFIX_EXPIRY_DATE + expiryDate + \" \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                + totalSavings"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                + PREFIX_LIMIT + limit + \" \";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return copyCommand;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private String addPrefixAndDetails(Prefix prefix, String details) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String result \u003d prefix.getPrefix();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        result +\u003d (details + \" \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Copies the {@String copyCommand} to the system\u0027s clipboard;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param copyCommand Copied add command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private void copyToClipboard(String copyCommand) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        Toolkit defaultToolkit \u003d Toolkit.getDefaultToolkit();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        Clipboard clipboard \u003d defaultToolkit.getSystemClipboard();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        clipboard.setContents(new StringSelection(copyCommand), null);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                || (other instanceof CopyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((CopyCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 113,
      "ChesterSim": 2,
      "nelsontky": 1
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Deletes a coupon identified using it\u0027s displayed index from the CouponStash."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class DeleteCommand extends IndexedCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \": Deletes the coupon identified by the index number used in the displayed coupon list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_DELETE_COUPON_SUCCESS \u003d \"Deleted Coupon: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CommandResult execute(Model model, String commandText) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "        List\u003cCoupon\u003e lastShownList \u003d model.getFilteredCouponList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COUPON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon couponToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        model.deleteCoupon(couponToDelete, commandText);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_COUPON_SUCCESS, couponToDelete));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 2,
      "alcen": 13,
      "nelsontky": 2,
      "-": 34
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Archived;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Condition;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.ExpiryDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Limit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.coupon.PromoCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.RemindDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.StartDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Usage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Savings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Edits the details of an existing coupon in the CouponStash."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class EditCommand extends IndexedCommand {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the coupon identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \"by the index number used in the displayed coupon list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_PROMO_CODE + \"PROMO_CODE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_SAVINGS + \"SAVINGS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_EXPIRY_DATE + \"30-08-2020] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_START_DATE + \"1-08-2020] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_LIMIT + \"5 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            + CliSyntax.PREFIX_PROMO_CODE + \"ILOVESTASH\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_EDIT_COUPON_SUCCESS \u003d \"Edited Coupon: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_COUPON \u003d \"This coupon already exists in the CouponStash.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String MESSAGE_CANNOT_EDIT_USAGE \u003d \"The usage of the coupon cannot be edited, \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            + \"due to changes in the concrete savings.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String MESSAGE_LIMIT_LESS_THAN_USAGE \u003d \"The new limit of the coupon cannot be less than \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            + \"the current usage (%d) of the coupon.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final EditCouponDescriptor editCouponDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param index of the coupon in the filtered coupon list to edit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param editCouponDescriptor details to edit the coupon with"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public EditCommand(Index index, EditCouponDescriptor editCouponDescriptor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "        requireNonNull(editCouponDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.editCouponDescriptor \u003d new EditCouponDescriptor(editCouponDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CommandResult execute(Model model, String commandText) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "        List\u003cCoupon\u003e lastShownList \u003d model.getFilteredCouponList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COUPON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon couponToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon editedCoupon \u003d createEditedCoupon(couponToEdit, editCouponDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (!couponToEdit.isSameCoupon(editedCoupon) \u0026\u0026 model.hasCoupon(editedCoupon)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_COUPON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Integer currentUsage \u003d Integer.parseInt(couponToEdit.getUsage().value);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Integer editedLimit \u003d Integer.parseInt(editedCoupon.getLimit().value);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (currentUsage \u003e editedLimit) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_LIMIT_LESS_THAN_USAGE, currentUsage));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        model.setCoupon(couponToEdit, editedCoupon, commandText);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        model.updateFilteredCouponList(Model.PREDICATE_SHOW_ALL_ACTIVE_COUPONS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_COUPON_SUCCESS, editedCoupon));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Creates and returns a {@code Coupon} with the details of {@code couponToEdit}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * edited with {@code editCouponDescriptor}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static Coupon createEditedCoupon(Coupon couponToEdit, EditCouponDescriptor editCouponDescriptor) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assert couponToEdit !\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Name updatedName \u003d editCouponDescriptor.getName().orElse(couponToEdit.getName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        PromoCode updatedPromoCode \u003d editCouponDescriptor.getPromoCode().orElse(couponToEdit.getPromoCode());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Savings updatedSavings \u003d editCouponDescriptor.getSavings().orElse(couponToEdit.getSavingsForEachUse());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        ExpiryDate updatedExpiryDate \u003d editCouponDescriptor.getExpiryDate().orElse(couponToEdit.getExpiryDate());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        StartDate updatedStartDate \u003d editCouponDescriptor.getStartDate().orElse(couponToEdit.getStartDate());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Limit updatedLimit \u003d editCouponDescriptor.getLimit().orElse(couponToEdit.getLimit());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editCouponDescriptor.getTags().orElse(couponToEdit.getTags());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Condition updatedCondition \u003d editCouponDescriptor.getCondition().orElse(couponToEdit.getCondition());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Archived archived \u003d new Archived(String.valueOf(Usage.isUsageAtLimit(couponToEdit.getUsage(), updatedLimit)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        RemindDate remindDate \u003d editCouponDescriptor.getExpiryDate().isPresent()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                ? new RemindDate(updatedExpiryDate)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                : editCouponDescriptor.getRemindDate().orElse(couponToEdit.getRemindDate());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return new Coupon(updatedName, updatedPromoCode, updatedSavings, updatedExpiryDate, updatedStartDate,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                // avoid changing the usage"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                couponToEdit.getUsage(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                updatedLimit, updatedTags,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alcen"
        },
        "content": "                // avoid changing the total savings and dates mappings"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alcen"
        },
        "content": "                couponToEdit.getSavingsMap(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alcen"
        },
        "content": "                // avoid changing the reminder"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                remindDate,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                updatedCondition,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                // avoid changing the archival state"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                archived);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return targetIndex.equals(e.targetIndex)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alcen"
        },
        "content": "                \u0026\u0026 editCouponDescriptor.equals(e.editCouponDescriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Stores the details to edit the coupon with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * corresponding field value of the coupon."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static class EditCouponDescriptor {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        private PromoCode promoCode;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alcen"
        },
        "content": "        private Savings savings;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        private ExpiryDate expiryDate;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        private StartDate startDate;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        private Usage usage;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        private Limit limit;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        private RemindDate remindDate;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        private Condition condition;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        private Archived archived;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public EditCouponDescriptor() {}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public EditCouponDescriptor(EditCouponDescriptor toCopy) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            setPromoCode(toCopy.promoCode);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alcen"
        },
        "content": "            setSavings(toCopy.savings);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            setExpiryDate(toCopy.expiryDate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            setUsage(toCopy.usage);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            setLimit(toCopy.limit);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            setRemindDate(toCopy.remindDate);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            setCondition(toCopy.condition);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            setArchived(toCopy.archived);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, promoCode, savings, expiryDate, startDate, usage, limit, tags,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    remindDate, condition, archived);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        public void setPromoCode(PromoCode promoCode) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            this.promoCode \u003d promoCode;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        public Optional\u003cPromoCode\u003e getPromoCode() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            return Optional.ofNullable(promoCode);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alcen"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alcen"
        },
        "content": "         * Sets the Savings field in this EditCouponDescriptor."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alcen"
        },
        "content": "         * @param sv Savings to be set in EditCouponDescriptor."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alcen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public void setSavings(Savings sv) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.savings \u003d sv;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alcen"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alcen"
        },
        "content": "         * Gets the Savings that have been set in this"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alcen"
        },
        "content": "         * EditCouponDescriptor in an Optional (if it"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alcen"
        },
        "content": "         * was never set, an Optional.empty() is returned)."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alcen"
        },
        "content": "         * @return Optional with Savings representing the"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alcen"
        },
        "content": "         *     Savings value stored in this"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alcen"
        },
        "content": "         *     EditCouponDescriptor, if any."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alcen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public Optional\u003cSavings\u003e getSavings() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return Optional.ofNullable(this.savings);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        public void setExpiryDate(ExpiryDate expiryDate) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        public Optional\u003cExpiryDate\u003e getExpiryDate() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return Optional.ofNullable(expiryDate);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        public void setStartDate(StartDate startDate) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        public Optional\u003cStartDate\u003e getStartDate() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        public void setUsage(Usage usage) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            this.usage \u003d usage;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        public Optional\u003cUsage\u003e getUsage() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            return Optional.ofNullable(usage);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        public void setLimit(Limit limit) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            this.limit \u003d limit;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        public Optional\u003cLimit\u003e getLimit() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            return Optional.ofNullable(limit);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        public Optional\u003cRemindDate\u003e getRemindDate() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            return Optional.ofNullable(this.remindDate);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        public void setRemindDate(RemindDate remindDate) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            this.remindDate \u003d remindDate;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        public void setCondition(Condition condition) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            this.condition \u003d condition;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        public Optional\u003cCondition\u003e getCondition() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            return Optional.ofNullable(condition);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        public Optional\u003cArchived\u003e getArchived() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            return Optional.ofNullable(this.archived);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        public void setArchived(Archived archived) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            this.archived \u003d archived;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "alcen"
        },
        "content": "            if (!(other instanceof EditCouponDescriptor)) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "alcen"
        },
        "content": "            EditCouponDescriptor e \u003d (EditCouponDescriptor) other;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                    \u0026\u0026 getPromoCode().equals(e.getPromoCode())"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    \u0026\u0026 getSavings().equals(e.getSavings())"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                    \u0026\u0026 getExpiryDate().equals(e.getExpiryDate())"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                    \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                    \u0026\u0026 getUsage().equals(e.getUsage())"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                    \u0026\u0026 getLimit().equals(e.getLimit())"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                    \u0026\u0026 getRemindDate().equals(e.getRemindDate())"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    \u0026\u0026 getCondition().equals(e.getCondition())"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                    \u0026\u0026 getArchived().equals(e.getArchived());"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 68,
      "Denise-Ng": 28,
      "alcen": 72,
      "KEVVVINN": 29,
      "nelsontky": 14,
      "-": 123
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting CouponStash as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CommandResult execute(Model model, String commandText) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 3,
      "nelsontky": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/ExpiringCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.DateIsBeforePredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * This class represents the \"expiring\" command in Coupon Stash. It shows the user all expiring coupons before the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * specified date in the CouponStash."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "public class ExpiringCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"expiring\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all coupons whose expiry date is before \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            + \"the specified dates (in D-M-YYYY format) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            + \"Parameters: Future date in D-M-YYYY format\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 31-12-2020\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private final DateIsBeforePredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public ExpiringCommand(DateIsBeforePredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.date \u003d predicate.getDate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Executes the ExpiringCommand with a given Model representing the current state of the Coupon Stash application"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @return Returns the CommandResult that encompasses the message that is shown to the user, and any"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * external actions that should occur."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CommandResult execute(Model model, String commandText) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        model.updateFilteredCouponList(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        int filteredListSize \u003d model.getFilteredCouponList().size();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        if (filteredListSize \u003e 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                    String.format(Messages.MESSAGE_COUPONS_LISTED_OVERVIEW, filteredListSize)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                            + \" \" + String.format(Messages.MESSAGE_COUPONS_EXPIRING_BEFORE_DATE, date));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } else { //Empty list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return new CommandResult(String.format(Messages.MESSAGE_COUPONS_LISTED_OVERVIEW, filteredListSize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                    + \" Try a later date!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                || (other instanceof ExpiringCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                \u0026\u0026 predicate.equals(((ExpiringCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 58,
      "nelsontky": 1
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Finds and lists all coupons in CouponStash whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all coupons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CommandResult execute(Model model, String commandText) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "        model.updateFilteredCouponList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "                String.format(Messages.MESSAGE_COUPONS_LISTED_OVERVIEW, model.getFilteredCouponList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 8,
      "nelsontky": 1,
      "-": 33
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            + \": Shows program user guide in a browser window.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened program user guide in a browser window.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public static final String UNSUPPORTED_OS \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            \"Your operating system does not allow the opening of the browser automatically. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                    + \"Visit https://ay1920s2-cs2103t-f09-1.github.io/main/UserGuide.html with your web browser \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                    + \"to view the user guide.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public static final String ERROR \u003d \"An error has occurred. Please try the help command again.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private static final String FILE_PATH \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            \"https://ay1920s2-cs2103t-f09-1.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CommandResult execute(Model model, String commandText) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        openBrowser(FILE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Open path in system browser."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @param path"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private static void openBrowser(String path) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        String os \u003d System.getProperty(\"os.name\").toLowerCase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        if (os.contains(\"linux\") || os.contains((\"unix\"))) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            Runtime runtime \u003d Runtime.getRuntime();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                if (runtime.exec(\"which xdg-open\").getInputStream().read() !\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                    runtime.exec(\"xdg-open \" + path);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                    throw new CommandException(UNSUPPORTED_OS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                throw new CommandException(ERROR);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        } else if (Desktop.isDesktopSupported() \u0026\u0026 Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                Desktop.getDesktop().browse(new URI(path));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                throw new CommandException(ERROR);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            } catch (URISyntaxException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                throw new CommandException(\"The link has error\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            throw new CommandException(UNSUPPORTED_OS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "nelsontky": 57,
      "-": 16
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/IndexedCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " * Represents a {@code Command} that requires a specified index to execute upon."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " * IndexedCommands can only be executed in Coupons tab."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public abstract class IndexedCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    protected final Index targetIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public IndexedCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 18
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_ARCHIVE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.parser.Prefix;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Lists all coupons in the CouponStash to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all %s coupons!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            COMMAND_WORD + \": Lists the coupons in CouponStash. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                    + \"You can view 3 types of lists: \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                    + \"1. List of active coupons (without archived coupons)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                    + \"2. List of archived coupons\\n \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                    + \"3. List of used coupons.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                    + \"Parameters: The list you want to view.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                    + \"Examples: \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                    + COMMAND_WORD + \"(list of active coupon)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                    + COMMAND_WORD + \" \" + PREFIX_ARCHIVE + \" (list of archived coupons)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                    + COMMAND_WORD + \" \" + PREFIX_USAGE + \" (list of used coupons)\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private Prefix prefixToList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.prefixToList \u003d new Prefix(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public ListCommand(Prefix prefixToList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        requireNonNull(prefixToList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.prefixToList \u003d prefixToList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CommandResult execute(Model model, String commandText) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String view \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        if (prefixToList.toString().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            model.updateFilteredCouponList(Model.PREDICATE_SHOW_ALL_ACTIVE_COUPONS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            view \u003d \"active\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } else if (prefixToList.equals(PREFIX_ARCHIVE)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            model.updateFilteredCouponList(Model.PREDICATE_SHOW_ALL_ARCHIVED_COUPONS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            view \u003d \"archived\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } else if (prefixToList.equals(PREFIX_USAGE)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            model.updateFilteredCouponList(Model.PREDICATE_SHOW_ALL_USED_COUPONS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            view \u003d \"used\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, view));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        if (!(other instanceof ListCommand)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        ListCommand e \u003d (ListCommand) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return prefixToList.equals(((ListCommand) other).prefixToList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 52,
      "ChesterSim": 1,
      "alcen": 3,
      "nelsontky": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/RedoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " * Redo previously undone command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undone command redone: %s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public static final String MESSAGE_NO_STATE_TO_REDO_TO \u003d \"Nothing to redo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CommandResult execute(Model model, String commandText) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        if (!model.canRedoCouponStash()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            throw new CommandException(MESSAGE_NO_STATE_TO_REDO_TO);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        String command \u003d model.redoCouponStash();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, command));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nelsontky": 30
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/RemindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_REMIND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Archived;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Condition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.ExpiryDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Limit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.PromoCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.RemindDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.StartDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Usage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.DateSavingsSumMap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Savings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.ui.RemindWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "/** --13"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": " * This class represents the remind command in Coupon Stash"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": " * The remind command allows the user to set date to be reminded"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": " * for a coupon. Upon the date of the reminder, Coupon Stash will"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": " * notify the user in a form of a pop when Coupon Stash is launched."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class RemindCommand extends IndexedCommand {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remind\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private static String messageSuccess \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            + \": set a reminder of a coupon, identified by the index number \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            + \"used in coupon listing. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            + \"Existing reminder will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            + PREFIX_REMIND + \" [Date] or [String]\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            + PREFIX_REMIND + \" 25-12-2020\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            + \"\\n\" + \"Example: \" + COMMAND_WORD + \" 2 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            + PREFIX_REMIND + \" 2 days\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private static final String MESSAGE_ARGUMENTS \u003d \"Reminder has been set on %2$s for Coupon %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private LocalDate remindDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * @param index of the coupon in the coupon lists to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * @param input details to remind the coupon on"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public RemindCommand(Index index, String input) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        this.remindDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Executes the RemindCommand with a given Model representing"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * the current state of the Coupon Stash application"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * @return Returns the CommandResult that encompasses the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     *     message that should be shown to the user, as well as"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     *     any other external actions that should occur."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * @throws CommandException is thrown either when"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     *     the remind date is set after the coupon\u0027s expiry date or the coupon"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     *     index is out of range (Coupon does not exist)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CommandResult execute(Model model, String commandText) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        List\u003cCoupon\u003e lastShownList \u003d model.getFilteredCouponList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Coupon remindCoupon;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // index is out of range"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COUPON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon couponToBeRemind \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // if \"days before scenario\", straightaway calculate the remindDate;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (input.contains(\"days before\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            int daysBefore \u003d Integer.parseInt(input.replaceAll(\"[^0-9]\", \"\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            remindDate \u003d (couponToBeRemind.getExpiryDate().date).minusDays(daysBefore);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            remindCoupon \u003d createRemindCoupon(couponToBeRemind, remindDate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            model.setCoupon(couponToBeRemind, remindCoupon, commandText);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            model.updateFilteredCouponList(Model.PREDICATE_SHOW_ALL_ACTIVE_COUPONS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            messageSuccess \u003d \"Reminder has been set to remind on \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    + remindCoupon.getRemindDate().toString()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    + \" (\" + daysBefore + \" days before coupon\u0027s expiry: \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    + remindCoupon.getExpiryDate().value + \")\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            LocalDate tempDate \u003d LocalDate.parse(input, DATE_FORMATTER);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            //check if input\u0027s date is not after the coupon\u0027s expiry date"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            if (tempDate.isAfter(couponToBeRemind.getExpiryDate().date)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_REMIND_DATE_EXCEED_EXPIRY_DATE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            } else if (tempDate.isBefore((LocalDate.now()))) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_REMIND_DATE_BEFORE_TODAYS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                remindDate \u003d tempDate;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                remindCoupon \u003d createRemindCoupon(couponToBeRemind, remindDate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                model.setCoupon(couponToBeRemind, remindCoupon, commandText);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                model.updateFilteredCouponList(Model.PREDICATE_SHOW_ALL_ACTIVE_COUPONS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                messageSuccess \u003d \"Reminder has been set to remind on \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        + remindCoupon.getRemindDate().toString()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        + \" (Coupon\u0027s expiry : \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        + remindCoupon.getExpiryDate().value + \")\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (remindCoupon.getRemindDate().hasReminder()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            return new CommandResult(messageSuccess);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return new CommandResult(String.format(messageSuccess, remindCoupon));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (!(other instanceof RemindCommand)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        RemindCommand e \u003d (RemindCommand) other;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return targetIndex.equals(e.targetIndex)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                \u0026\u0026 input.equals(e.input);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * This method is to check all coupon\u0027s remind date against today\u0027s and"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * formulate the entire coupons that has to be reminded today as a string"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * @param list - the current coupon\u0027s list"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static void showRemind(List\u003cCoupon\u003e list) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        String remindMessage \u003d \"\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        boolean remindFlag \u003d false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        for (Coupon temp : list) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            if (temp.getRemindDate().getDate().equals(LocalDate.now())) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                remindFlag \u003d true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                remindMessage \u003d remindMessage + count + \". \""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        + temp.getName().toString()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        + \" (Expires on \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        + temp.getExpiryDate().toString()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        + \")\" + \"\\n\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                count \u003d count + 1;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (remindFlag) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            RemindWindow.displayRemind(remindMessage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Creates and returns a {@code Coupon} with the new remind date"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private static Coupon createRemindCoupon(Coupon couponToBeReminded, LocalDate date) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Name name \u003d couponToBeReminded.getName();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Savings savingsForEachUse \u003d couponToBeReminded.getSavingsForEachUse();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        PromoCode promoCode \u003d couponToBeReminded.getPromoCode();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        ExpiryDate expiryDate \u003d couponToBeReminded.getExpiryDate();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        StartDate startDate \u003d couponToBeReminded.getStartDate();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Limit limit \u003d couponToBeReminded.getLimit();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        RemindDate remindDate \u003d new RemindDate();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        remindDate.setRemindDate(date);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Set\u003cTag\u003e tags \u003d couponToBeReminded.getTags();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Usage updatedUsage \u003d couponToBeReminded.getUsage();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alcen"
        },
        "content": "        DateSavingsSumMap totalSavings \u003d couponToBeReminded.getSavingsMap();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Condition condition \u003d couponToBeReminded.getCondition();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Archived archived \u003d couponToBeReminded.getArchived();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return new Coupon(name, promoCode, savingsForEachUse, expiryDate, startDate, updatedUsage, limit,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                tags, totalSavings, remindDate, condition, archived);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 11,
      "KEVVVINN": 184,
      "alcen": 2,
      "nelsontky": 8
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/SavedCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.DateSavingsSumMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.PureMonetarySavings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Saveable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": " * This class represents the \"saved\" command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": " * in Coupon Stash. The \"saved\" command shows the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": " * user how much he/she has saved on a certain date,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": " * or over a range of time represented by two dates."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Coupon Stash will look through the Coupons"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": " * to produce the final \"saved\" amount displayed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class SavedCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "    // the word used to run this command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"saved\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \"all the savings accumulated in Coupons stored in the \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \"Coupon Stash (if no date is provided), savings earned \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \"on a particular date in D-M-YYYY format, or savings \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \"earned between two specified dates (inclusive).\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_START_DATE + \"START_DATE \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + CliSyntax.PREFIX_EXPIRY_DATE + \"END_DATE] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 17-6-2020 \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_FUTURE_DATE \u003d \"Savings cannot be\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \" shown for future dates!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_RANGE \u003d \"End date must\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \" be later than start date!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_ONLY_ONE_DATE_OF_RANGE \u003d \"To specify a\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \" range of dates, both start date and end date must be provided!\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_UNEXPECTED_EXTRA_WORDS \u003d \"Did you mean to\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \" specify a date, or a range of dates?\\n\" + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final LocalDate startDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final LocalDate endDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final boolean hasDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructs a SavedCommand with the given dates."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * If no dates are given, the SavedCommand will execute"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * over all the Coupons in the Stash. If one date is given,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * SavedCommand will execute only for that date. If two dates"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * are given, SavedCommand will sum all the Savings between"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * those two dates (inclusive)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param dates The dates given to the SavedCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *              by the user, maximum of two."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public SavedCommand(LocalDate... dates) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (dates.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.startDate \u003d dates[0];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.endDate \u003d dates[0];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.hasDate \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else if (dates.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "            // assume that the dates are arranged in order"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.startDate \u003d dates[0];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.endDate \u003d dates[1];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.hasDate \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alcen"
        },
        "content": "            // the length is 0"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "            // could also be more than 2, but this should not happen"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": "            // as the parser would not have allowed more than 2 dates"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.startDate \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.endDate \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.hasDate \u003d false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Executes the SavedCommand with a given Model representing"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * the current state of the Coupon Stash application"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return Returns the CommandResult that encompasses the"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     message that should be shown to the user, as well as"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     any other external actions that should occur."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @throws CommandException CommandException is thrown when"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     the date provided is in the future, according to the"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     system time retrieved by the application (most"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     likely an error by the user, as you cannot see"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     what you have saved in the future)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CommandResult execute(Model model, String commandText) throws CommandException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        ObservableList\u003cCoupon\u003e couponsList \u003d model.getCouponStash().getCouponList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alcen"
        },
        "content": "        StringBuilder moneySaved \u003d new StringBuilder(\"You have saved \");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // add the custom money symbol to the String"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alcen"
        },
        "content": "        moneySaved.append(model.getStashSettings().getMoneySymbol());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alcen"
        },
        "content": "        PureMonetarySavings pms \u003d new PureMonetarySavings();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (!this.hasDate) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alcen"
        },
        "content": "            // add up all the Savings to get total Savings"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alcen"
        },
        "content": "            for (Coupon c : couponsList) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alcen"
        },
        "content": "                PureMonetarySavings toBeAdded \u003d c.getTotalSavings();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alcen"
        },
        "content": "                pms \u003d pms.add(toBeAdded);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alcen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alcen"
        },
        "content": "            // sum up over the range of dates"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alcen"
        },
        "content": "            LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alcen"
        },
        "content": "            if (this.startDate.isAfter(today)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alcen"
        },
        "content": "                throw new CommandException(SavedCommand.MESSAGE_FUTURE_DATE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alcen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alcen"
        },
        "content": "            // add up Savings for the dates given"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alcen"
        },
        "content": "            for (Coupon c : couponsList) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alcen"
        },
        "content": "                DateSavingsSumMap savingsMap \u003d c.getSavingsMap();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alcen"
        },
        "content": "                for (LocalDate ld \u003d startDate;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alcen"
        },
        "content": "                     ld.isBefore(endDate) || ld.isEqual(endDate);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alcen"
        },
        "content": "                     ld \u003d ld.plusDays(1)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    PureMonetarySavings toBeAdded \u003d savingsMap.get(ld);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    if (toBeAdded !\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alcen"
        },
        "content": "                        pms \u003d pms.add(toBeAdded);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alcen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alcen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // get monetary amount"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alcen"
        },
        "content": "        moneySaved.append(String.format(\"%.2f\", pms.getMonetaryAmountAsDouble()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // get saveables"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alcen"
        },
        "content": "        List\u003cSaveable\u003e saveables \u003d pms.getListOfSaveables();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (!saveables.isEmpty()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alcen"
        },
        "content": "            moneySaved.append(\" as well as earned \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alcen"
        },
        "content": "            for (Saveable sv : saveables) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alcen"
        },
        "content": "                moneySaved.append(sv.toString()).append(\", \");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alcen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    moneySaved.substring(0, moneySaved.length() - 2) + \".\", false, false);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new CommandResult(moneySaved.append(\".\").toString(), false, false);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 1,
      "alcen": 145,
      "nelsontky": 1
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/SetPrefCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_MONEY_SYMBOL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Edits the user preferences in Coupon Stash, for example"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": " * the money symbol/currency type used to display monetary"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": " * amounts of the Coupon\u0027s savings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class SetPrefCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setpref\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \": Sets the user preferences for Coupon Stash\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \"Parameters: \" + PREFIX_MONEY_SYMBOL + \" A new symbol for currency type\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \" used in Coupon Stash.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_MISSING_VALUES \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \" requires at least one value to be set!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Money symbol changed from %s to \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final String moneySymbol;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public SetPrefCommand(String newMoneySymbol) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.moneySymbol \u003d newMoneySymbol;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public CommandResult execute(Model model, String commandText) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "        String oldSymbol \u003d model.setMoneySymbol(this.moneySymbol);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "                String.format(MESSAGE_SUCCESS, oldSymbol) + this.moneySymbol + \"!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 38
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/ShareCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.ui.CouponCard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import javafx.embed.swing.SwingFXUtils;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import javafx.scene.SnapshotParameters;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import javafx.scene.image.WritableImage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import javafx.stage.FileChooser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " * Share a Coupon in the CouponStash."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class ShareCommand extends IndexedCommand {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"share\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shares the coupon identified by the \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            + \"index number with the world! Coupon will be rendered and saved as an image file \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            + \"for easy sharing.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public static final String MESSAGE_SHARE_COUPON_SUCCESS \u003d \"Coupon successfully saved to: %s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public static final String MESSAGE_WRITE_TO_IMAGE_ERROR \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            \"Problem encountered while saving to image. Please try sharing again!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public static final String MESSAGE_DIALOG_CLOSED \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            \"Coupon was not saved, save dialog was closed without choosing a directory.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private static final String FORMAT \u003d \"png\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @param index of the coupon in the filtered coupon list to edit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public ShareCommand(Index index) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CommandResult execute(Model model, String commandText) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        List\u003cCoupon\u003e lastShownList \u003d model.getFilteredCouponList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COUPON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon couponToShare \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        // Create new CouponCard and get the Region"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Region couponRegion \u003d new CouponCard("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                couponToShare,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                targetIndex.getOneBased(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                model.getStashSettings().getMoneySymbol().toString()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        ).getRoot();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        // Need to create a scene for the Region so CSS would work."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Scene scene \u003d new Scene(couponRegion);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        // Create a snapshot of the CouponRegion."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        WritableImage image \u003d couponRegion.snapshot(new SnapshotParameters(), null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        // Hacky way to ensure scene is freed from memory."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        scene \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        FileChooser fileChooser \u003d new FileChooser();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        fileChooser.setInitialFileName(couponToShare.getName().toString() + \".\" + FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        File file \u003d fileChooser.showSaveDialog(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        // If save dialog is closed without choosing a directory."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        if (file \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            throw new CommandException(MESSAGE_DIALOG_CLOSED);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            ImageIO.write(SwingFXUtils.fromFXImage(image, null), FORMAT, file);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            throw new CommandException(MESSAGE_WRITE_TO_IMAGE_ERROR);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SHARE_COUPON_SUCCESS, file.getAbsolutePath()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 5,
      "nelsontky": 91
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.logic.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " * Creates an SortCommand to sort by specified prefix."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts the coupons in CouponStash. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            + \"It is possible to sort by coupon name or expiry date. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            + \"The field you want to sort by, either \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            + PREFIX_NAME + \" or \" + PREFIX_EXPIRY_DATE + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            + \"Examples: \\n\" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            + PREFIX_NAME + \" (sort by name)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            + PREFIX_EXPIRY_DATE + \" (sort by expiry date)\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully sorted by %s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private Prefix prefixToSortBy;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Creates a SortCommand that sorts the coupons according to the prefix specified"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @param prefixToSortBy prefix to sort by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public SortCommand(Prefix prefixToSortBy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        requireNonNull(prefixToSortBy);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        this.prefixToSortBy \u003d prefixToSortBy;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CommandResult execute(Model model, String commandText) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        model.sortCoupons(prefixToSortBy, commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                String.format(MESSAGE_SUCCESS, prefixToSortBy.toString())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        if (!(other instanceof SortCommand)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        SortCommand e \u003d (SortCommand) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return prefixToSortBy.equals(((SortCommand) other).prefixToSortBy);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nelsontky": 70
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/UnarchiveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Archived;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " * Unarchive a coupon."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class UnarchiveCommand extends IndexedCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unarchive\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"Unarchive the coupon identified by the \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            + \"index number used in the displayed coupon list. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            + \"This removes the coupon frmo the archives, and place it back into the active coupon list. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            + \"Parameters: INDEX (must be a postive integer) \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String MESSAGE_UNARCHIVE_COUPON_SUCCESS \u003d \"Unarchived Coupon: %1s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String MESSAGE_COUPON_ALREADY_ACTIVE \u003d \"Coupon: %1s is already active!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Creates an UnarchiveCommand to unarchive the {@code Coupon} at the specified {@code targetIndex}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * @param targetIndex   Index of the coupon to be unarchived."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public UnarchiveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public CommandResult execute(Model model, String commandText) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        requireNonNull(model, commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        List\u003cCoupon\u003e lastShownList \u003d model.getFilteredCouponList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COUPON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon couponToBeUnarchived \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Archived currentStateOfArchival \u003d couponToBeUnarchived.getArchived();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (!Boolean.parseBoolean(currentStateOfArchival.toString())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            throw new CommandException(MESSAGE_COUPON_ALREADY_ACTIVE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon activeCoupon \u003d couponToBeUnarchived.unarchive();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        model.setCoupon(couponToBeUnarchived, activeCoupon, commandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        model.updateFilteredCouponList(Model.PREDICATE_SHOW_ALL_ACTIVE_COUPONS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNARCHIVE_COUPON_SUCCESS,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                couponToBeUnarchived.getName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                || (other instanceof UnarchiveCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((UnarchiveCommand) other).targetIndex));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 66
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/UndoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " * Undo previous command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Previous command undone: %s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public static final String MESSAGE_NO_STATE_TO_UNDO_TO \u003d \"No commands to undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CommandResult execute(Model model, String commandText) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        if (!model.canUndoCouponStash()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            throw new CommandException(MESSAGE_NO_STATE_TO_UNDO_TO);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        String command \u003d model.undoCouponStash();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, command));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nelsontky": 29
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/UsedCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Limit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Usage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.savings.MonetaryAmount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.PureMonetarySavings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.SavingsConversionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " * Increases the usage of a coupon."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class UsedCommand extends IndexedCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"used\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Increases the usage of the coupon \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            + \"identified by the index number used in the displayed coupon list. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            + \"This increases the value of its usage by one.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \"[%s\" + \"(Original amount of purchase)]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \"Example with Savings: \" + COMMAND_WORD + \" 1 \" + \"%s100\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String MESSAGE_USED_COUPON_SUCCESS \u003d \"Used Coupon: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String MESSAGE_USAGE_LIMIT_REACHED \u003d \"Coupon usage limit has been reached!\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            + \"You can only use it for a maximum of %s time(s).\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String MESSAGE_MISSING_ORIGINAL_AMOUNT \u003d \"Coupon has percentage savings \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            + \"that requires the input of the original amount of purchase.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 $100\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private final MonetaryAmount originalAmount;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Creates a UsedCommand to increase the usage of the specified {@code Coupon}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public UsedCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        this.originalAmount \u003d new MonetaryAmount(0.0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Creates a UsedCommand to increase the usage of the specified {@code Coupon},"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * and also keep track of the amount saved by the usage of this coupon."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public UsedCommand(Index targetIndex, MonetaryAmount originalAmount) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        requireNonNull(originalAmount);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        this.originalAmount \u003d originalAmount;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CommandResult execute(Model model, String commandText) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        List\u003cCoupon\u003e lastShownList \u003d model.getFilteredCouponList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COUPON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon couponToBeUsed \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Usage currentUsage \u003d couponToBeUsed.getUsage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Limit limit \u003d couponToBeUsed.getLimit();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "        boolean hasPercentageSavings \u003d couponToBeUsed.getSavingsForEachUse().hasPercentageAmount();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (Usage.isUsageAtLimit(currentUsage, limit)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_USAGE_LIMIT_REACHED, limit.getLimit()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // checks if original amount of purchase is provided if the type of Savings is of percentage amount"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (hasPercentageSavings \u0026\u0026 (originalAmount.equals(new MonetaryAmount(0.0)))) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_MISSING_ORIGINAL_AMOUNT));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon usedCoupon;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (hasPercentageSavings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            usedCoupon \u003d createUsedCouponPercentageValue(couponToBeUsed, originalAmount);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            usedCoupon \u003d createUsedCouponMonetaryValue(couponToBeUsed);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Optional\u003cCoupon\u003e archivedUsedCoupon \u003d Optional.empty();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Usage newUsage \u003d usedCoupon.getUsage();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (Usage.isUsageAtLimit(newUsage, limit)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            archivedUsedCoupon \u003d Optional.of(usedCoupon.archive());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon newCoupon \u003d archivedUsedCoupon.orElse(usedCoupon);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        model.setCoupon(couponToBeUsed, newCoupon, commandText);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        model.updateFilteredCouponList(Model.PREDICATE_SHOW_ALL_ACTIVE_COUPONS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return new CommandResult((String.format(MESSAGE_USED_COUPON_SUCCESS, usedCoupon.getName())));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            || (other instanceof UsedCommand"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((UsedCommand) other).targetIndex))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            \u0026\u0026 originalAmount.equals(((UsedCommand) other).originalAmount);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Creates and returns a {@code Coupon} with an increase in usage by one."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Also adds to the total savings for the current date."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * To be used for a Coupon with PercentageAmount savings (requires"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * the original price of the item bought as a MonetaryAmount)."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static Coupon createUsedCouponPercentageValue(Coupon couponToBeUsed,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alcen"
        },
        "content": "                                                          MonetaryAmount originalAmount) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alcen"
        },
        "content": "        PureMonetarySavings newTotalSavings \u003d SavingsConversionUtil"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .convertToPure(couponToBeUsed.getSavingsForEachUse(), originalAmount);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return couponToBeUsed.addToTotalSavings(LocalDate.now(), newTotalSavings)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .increaseUsageByOne();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Creates and returns a {@code Coupon} with an increase in usage by one."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Also adds to the total savings for the current date."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * To be used for a Coupon with concrete MonetaryAmount savings."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static Coupon createUsedCouponMonetaryValue(Coupon couponToBeUsed) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alcen"
        },
        "content": "        PureMonetarySavings newTotalSavings \u003d SavingsConversionUtil"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .convertToPure(couponToBeUsed.getSavingsForEachUse());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return couponToBeUsed.addToTotalSavings(LocalDate.now(), newTotalSavings)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .increaseUsageByOne();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 112,
      "alcen": 26,
      "nelsontky": 1
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/commands/exceptions/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_LIMIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_PROMO_CODE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_REMIND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_SAVINGS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_USAGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.commons.util.DateUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Condition;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.ExpiryDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Limit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.PromoCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.StartDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Usage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Savings;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final String moneySymbol;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructor for a AddCommandParser. Requires the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * money symbol set in UserPrefs as this will be"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * used as the prefix for the monetary amount"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * in the savings field."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param moneySymbol String representing the money symbol."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public AddCommandParser(String moneySymbol) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.moneySymbol \u003d moneySymbol;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PROMO_CODE, PREFIX_SAVINGS, PREFIX_EXPIRY_DATE,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        PREFIX_START_DATE, PREFIX_USAGE, PREFIX_LIMIT, PREFIX_TAG, PREFIX_REMIND, PREFIX_CONDITION);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_EXPIRY_DATE)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        PromoCode promoCode \u003d ParserUtil.parsePromoCode("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                argMultimap.getValueForOptionalField(PREFIX_PROMO_CODE, \"-\").get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Savings savings \u003d ParserUtil.parseSavings(argMultimap.getAllValues(PREFIX_SAVINGS), this.moneySymbol);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        ExpiryDate expiryDate \u003d ParserUtil.parseExpiryDate(argMultimap.getValue(PREFIX_EXPIRY_DATE).get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        StartDate startDate \u003d ParserUtil.parseStartDate(argMultimap.getValueForOptionalField(PREFIX_START_DATE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                        DateUtil.formatDate(LocalDate.now())).get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Usage usage \u003d ParserUtil.parseUsage(argMultimap.getValueForOptionalField(PREFIX_USAGE, \"0\").get());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Limit limit \u003d ParserUtil.parseLimit(argMultimap.getValueForOptionalField(PREFIX_LIMIT, \"1\").get());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Condition condition \u003d ParserUtil.parseCondition("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                argMultimap.getValueForOptionalField(PREFIX_CONDITION, \"No condition stated.\").get());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Coupon coupon \u003d new Coupon(name, promoCode, savings, expiryDate, startDate, usage, limit, tagList, condition);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return new AddCommand(coupon);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 7,
      "ChesterSim": 5,
      "alcen": 25,
      "KEVVVINN": 20,
      "-": 36
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/ArchiveCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " * Parses input arguments and creates a new ArchiveCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class ArchiveCommandParser implements Parser\u003cArchiveCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ArchiveCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * and returns an ArchiveCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public ArchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            return new ArchiveCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ArchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 28
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns the default value if no values of {@code prefix} is found in {@code argMultiMap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Used for optional fields only."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public Optional\u003cString\u003e getValueForOptionalField(Prefix prefix, String defaultValue) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return values.isEmpty() ? Optional.of(defaultValue) : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 8,
      "Denise-Ng": 1,
      "alcen": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/ArgumentTokenizer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final Prefix PREFIX_ARCHIVE \u003d new Prefix(\"a/\"); //For ListCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final Prefix PREFIX_CONDITION \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final Prefix PREFIX_EXPIRY_DATE \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final Prefix PREFIX_LIMIT \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final Prefix PREFIX_PROMO_CODE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final Prefix PREFIX_REMIND \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final Prefix PREFIX_SAVINGS \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final Prefix PREFIX_USAGE \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Prefix PREFIX_MONEY_SYMBOL \u003d new Prefix(\"ms/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 10,
      "ChesterSim": 1,
      "alcen": 3,
      "KEVVVINN": 2,
      "-": 8
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/ConditionCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.logic.commands.ConditionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Condition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": " * Parses input arguments and creates a new {@code ConditionCommand} object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "public class ConditionCommandParser implements Parser\u003cConditionCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code ConditionCommand}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * and returns a ConditionCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public ConditionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CONDITION);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    ConditionCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        String condition \u003d argMultimap.getValue(PREFIX_CONDITION).orElse(\"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return new ConditionCommand(index, new Condition(condition));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KEVVVINN": 39
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/CopyCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.commands.CopyCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * Parses input arguments and creates a new CopyCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "public class CopyCommandParser implements Parser\u003cCopyCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CopyCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * and returns a CopyCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public CopyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return new CopyCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CopyCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 30
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/CouponStashParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.moneysymbol.MoneySymbol;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.logic.commands.ConditionCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.commands.CopyCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.commands.ExpiringCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.logic.commands.RemindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.SavedCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.SetPrefCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.logic.commands.ShareCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.logic.commands.UsedCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class CouponStashParser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final MoneySymbol moneySymbol;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructor for a CouponStashParser. Requires the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * money symbol set in UserPrefs as this will be"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * used in the parsing of many commands like"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * AddCommandParser and EditCommandParser."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param moneySymbol MoneySymbol representing the money symbol."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public CouponStashParser(MoneySymbol moneySymbol) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.moneySymbol \u003d moneySymbol;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new AddCommandParser(this.moneySymbol.getString()).parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "        case ArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new ArchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": "        case ConditionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new ConditionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alcen"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new EditCommandParser(this.moneySymbol.getString()).parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alcen"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        case ExpiringCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return new ExpiringCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        case CopyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return new CopyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alcen"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alcen"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        case RemindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            return new RemindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alcen"
        },
        "content": "        case SavedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new SavedCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alcen"
        },
        "content": "        case SetPrefCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new SetPrefCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        case ShareCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            return new ShareCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        case UnarchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            return new UnarchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alcen"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alcen"
        },
        "content": "        case UsedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new UsedCommandParser(this.moneySymbol.getString()).parse(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 5,
      "Denise-Ng": 9,
      "alcen": 55,
      "KEVVVINN": 5,
      "nelsontky": 15,
      "-": 52
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/DeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/EditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Savings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final String moneySymbol;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructor for a EditCommandParser. Requires the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * money symbol set in UserPrefs as this will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * used as the prefix for the monetary amount"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * in the savings field."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param moneySymbol String representing the money symbol."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public EditCommandParser(String moneySymbol) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.moneySymbol \u003d moneySymbol;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "                        args,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "                        CliSyntax.PREFIX_NAME,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        CliSyntax.PREFIX_PROMO_CODE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                        CliSyntax.PREFIX_EXPIRY_DATE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        CliSyntax.PREFIX_START_DATE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "                        CliSyntax.PREFIX_SAVINGS,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        CliSyntax.PREFIX_USAGE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        CliSyntax.PREFIX_LIMIT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        CliSyntax.PREFIX_TAG,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        CliSyntax.PREFIX_REMIND,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        CliSyntax.PREFIX_CONDITION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "        EditCommand.EditCouponDescriptor editCouponDescriptor \u003d new EditCommand.EditCouponDescriptor();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "            editCouponDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(CliSyntax.PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_PROMO_CODE).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            editCouponDescriptor.setPromoCode("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    ParserUtil.parsePromoCode(argMultimap.getValue(CliSyntax.PREFIX_PROMO_CODE).get()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "        parseSavingsForEdit(argMultimap.getAllValues(CliSyntax.PREFIX_SAVINGS))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .ifPresent(editCouponDescriptor::setSavings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_EXPIRY_DATE).isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            editCouponDescriptor.setExpiryDate(ParserUtil.parseExpiryDate(argMultimap"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                    .getValue(CliSyntax.PREFIX_EXPIRY_DATE).get()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_REMIND).isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            editCouponDescriptor.setRemindDate(ParserUtil.parserRemindDate(argMultimap"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    .getValue(CliSyntax.PREFIX_REMIND).get()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            editCouponDescriptor.setStartDate(ParserUtil.parseStartDate(argMultimap"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    .getValue(CliSyntax.PREFIX_START_DATE).get()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // usage is not allowed to be edited due to potential changes in savings"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_USAGE).isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_CANNOT_EDIT_USAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_LIMIT).isPresent()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            editCouponDescriptor.setLimit(ParserUtil.parseLimit(argMultimap"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                    .getValue(CliSyntax.PREFIX_LIMIT).get()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(CliSyntax.PREFIX_TAG))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                .ifPresent(editCouponDescriptor::setTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (!editCouponDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_CONDITION).isPresent()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            editCouponDescriptor.setCondition(ParserUtil.parseCondition(argMultimap"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    .getValue(CliSyntax.PREFIX_CONDITION).get()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return new EditCommand(index, editCouponDescriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e savings} into a {@code Collection\u003cString\u003e} if {@code savings}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * is non-empty. If {@code savings} contain only elements which are empty strings, it will be"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * parsed into an Optional.empty()."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param savings The Collection of Strings to be checked."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return Returns an Optional possibly containing the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * non-empty Collection of Strings."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @throws ParseException If the Collection received has both"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                        a monetary amount and an percentage amount, or has"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                        blank Strings."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private Optional\u003cSavings\u003e parseSavingsForEdit(Collection\u003cString\u003e savings) throws ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assert savings !\u003d null;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (savings.isEmpty()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return Optional.of(ParserUtil.parseSavings(savings, this.moneySymbol));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 8,
      "ChesterSim": 10,
      "alcen": 54,
      "KEVVVINN": 27,
      "nelsontky": 2,
      "-": 54
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/ExpiringCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.commands.ExpiringCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.DateIsBeforePredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.ExpiryDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * Parses input arguments and creates a new ExpiringCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "public class ExpiringCommandParser implements Parser\u003cExpiringCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExpiringCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * and returns a ExpiringCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public ExpiringCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            ExpiryDate expiryDate \u003d ParserUtil.parseExpiryDate(args.trim());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return new ExpiringCommand(new DateIsBeforePredicate(expiryDate.value));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExpiringCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 31
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/FindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 5,
      "-": 28
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/ListCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_ARCHIVE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_USAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * and returns an SortCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ARCHIVE, PREFIX_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        if (args.trim().isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            //Has no argument"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } else if (argMultiMap.getValue(PREFIX_ARCHIVE).isPresent()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                \u0026\u0026 !argMultiMap.getValue(PREFIX_USAGE).isPresent()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            // Only has PREFIX_ARCHIVE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return new ListCommand(PREFIX_ARCHIVE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } else if (!argMultiMap.getValue(PREFIX_ARCHIVE).isPresent()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                \u0026\u0026 argMultiMap.getValue(PREFIX_USAGE).isPresent()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            // Only has PREFIX_USAGE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return new ListCommand(PREFIX_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 38
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.model.coupon.RemindDate.DATE_FORMATTER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Condition;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.ExpiryDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Limit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.PromoCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.RemindDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.StartDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Usage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.MonetaryAmount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.PercentageAmount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Saveable;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Savings;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Parses a {@code String promoCode} into a {@code PromoCode}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * @throws ParseException if the given {@code promoCode} is invalid."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static PromoCode parsePromoCode(String promoCode) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        requireNonNull(promoCode);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        String trimmedPromoCode \u003d promoCode.trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return new PromoCode(trimmedPromoCode);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Parses a {@code String savings} into a {@code Savings}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param savings The Collection of Strings that each represent"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                certain savings entered by the user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param moneySymbol The symbol to be used for monetary amounts,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                    as specified in the UserPrefs."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @throws ParseException If the given {@code savings} is invalid."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     (if no savings are given, or if both a monetary amount"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     and a percentage amount is given)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static Savings parseSavings(Collection\u003cString\u003e savings, String moneySymbol) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alcen"
        },
        "content": "        requireNonNull(savings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alcen"
        },
        "content": "        boolean hasMoney \u003d false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alcen"
        },
        "content": "        boolean hasPercent \u003d false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alcen"
        },
        "content": "        MonetaryAmount monetaryAmount \u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alcen"
        },
        "content": "        PercentageAmount percentageAmount \u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alcen"
        },
        "content": "        List\u003cSaveable\u003e saveables \u003d new ArrayList\u003cSaveable\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alcen"
        },
        "content": "        for (String str : savings) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alcen"
        },
        "content": "            if (str.startsWith(moneySymbol)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alcen"
        },
        "content": "                // last monetary amount will be taken"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alcen"
        },
        "content": "                hasMoney \u003d true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alcen"
        },
        "content": "                String trimmedMonetaryAmount \u003d str.trim().substring(moneySymbol.length());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alcen"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    monetaryAmount \u003d new MonetaryAmount(Double.parseDouble(trimmedMonetaryAmount));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alcen"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    throw new ParseException(Savings.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alcen"
        },
        "content": "                } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alcen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alcen"
        },
        "content": "            } else if (str.endsWith(PercentageAmount.PERCENT_SUFFIX)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alcen"
        },
        "content": "                // last percentage amount will be taken"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alcen"
        },
        "content": "                hasPercent \u003d true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alcen"
        },
        "content": "                String trimmedPercentage \u003d str.trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alcen"
        },
        "content": "                String rawNumber \u003d trimmedPercentage"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alcen"
        },
        "content": "                        .substring(0, trimmedPercentage.length() - PercentageAmount.PERCENT_SUFFIX.length());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alcen"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    percentageAmount \u003d new PercentageAmount(Double.parseDouble(rawNumber));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alcen"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    throw new ParseException(Savings.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alcen"
        },
        "content": "                } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alcen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alcen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alcen"
        },
        "content": "                String trimmedSaveable \u003d str.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alcen"
        },
        "content": "                if (!trimmedSaveable.isBlank()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    // avoid adding blank Strings"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    saveables.add(new Saveable(trimmedSaveable));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alcen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alcen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if ((saveables.isEmpty() \u0026\u0026 !hasMoney \u0026\u0026 !hasPercent) || (hasMoney \u0026\u0026 hasPercent)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alcen"
        },
        "content": "            // throw an exception if no savings, or savings contains both"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alcen"
        },
        "content": "            // monetary amount and percentage amount"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new ParseException(Savings.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else if (saveables.isEmpty()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alcen"
        },
        "content": "            if (hasMoney) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alcen"
        },
        "content": "                return new Savings(monetaryAmount);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alcen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alcen"
        },
        "content": "                // hasPercent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alcen"
        },
        "content": "                return new Savings(percentageAmount);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alcen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else if (hasMoney) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new Savings(monetaryAmount, saveables);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else if (hasPercent) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new Savings(percentageAmount, saveables);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new Savings(saveables);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Parses a {@code String expiryDate} into an {@code ExpiryDate}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * @throws ParseException if the given {@code expiryDate} is invalid."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static ExpiryDate parseExpiryDate(String expiryDate) throws ParseException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        requireNonNull(expiryDate);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        String trimmedDate \u003d expiryDate.trim();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (!ExpiryDate.isValidExpiryDate(trimmedDate)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            throw new ParseException(ExpiryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return new ExpiryDate(trimmedDate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Parses a {@code String startDate} into an {@code StartDate}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * @throws ParseException if the given {@code startDate} is invalid."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static StartDate parseStartDate(String startDate) throws ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        requireNonNull(startDate);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        String trimmedDate \u003d startDate.trim();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (!StartDate.isValidStartDate(trimmedDate)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            throw new ParseException(StartDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return new StartDate(trimmedDate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Parses a {@code String usage} into a {@code Usage}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * @throws ParseException if the given {@code usage} is invalid."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static Usage parseUsage(String usage) throws ParseException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        requireNonNull(usage);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        String trimmedUsage \u003d usage.trim();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (!Usage.isValidUsage(trimmedUsage)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            throw new ParseException(Usage.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return new Usage(trimmedUsage);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Parses a {@code String limit} into a {@code Limit}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * @throws ParseException if the given {@code limit} is invalid."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static Limit parseLimit(String limit) throws ParseException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        requireNonNull(limit);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        String trimmedLimit \u003d limit.trim();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (!Limit.isValidLimit(trimmedLimit)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            throw new ParseException(Limit.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return new Limit(trimmedLimit);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Parses a {@code String condition} into a {@code Condtion}."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * @throws ParseException if the given {@code condition} is invalid."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static Condition parseCondition(String condition) throws ParseException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        requireNonNull(condition);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        String trimmedCondition \u003d condition.trim();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (!Condition.isValidCondition(trimmedCondition)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            throw new ParseException(Condition.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return new Condition(trimmedCondition);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Parses a {@code String monetaryAmount} into a {@code MonetaryAmount}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * @throws ParseException if the given {@code originalAmount} is invalid."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static MonetaryAmount parseMonetaryAmount(String monetaryAmount) throws ParseException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        requireNonNull(monetaryAmount);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        String trimmedMonetaryAmount \u003d monetaryAmount.trim();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            Double convertedMonetaryAmount \u003d Double.parseDouble(trimmedMonetaryAmount);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            if (!MonetaryAmount.isValidMonetaryAmount(convertedMonetaryAmount)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                throw new ParseException(MonetaryAmount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            return new MonetaryAmount(convertedMonetaryAmount);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            throw new ParseException(MonetaryAmount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Parses a {@code String remindDate} into a {@code RemindDate}."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * @throws ParseException if the given {@code remindDate} is invalid."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static RemindDate parserRemindDate(String remindDate) throws ParseException {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        requireNonNull(remindDate);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        String trimmedDate \u003d remindDate.trim();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (!RemindDate.isValidRemindDate(trimmedDate)) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            throw new ParseException(RemindDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        RemindDate remind \u003d new RemindDate();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        remind.setRemindDate(LocalDate.parse(trimmedDate, DATE_FORMATTER));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return remind;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 1,
      "ChesterSim": 47,
      "alcen": 85,
      "KEVVVINN": 83,
      "-": 75
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/Prefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/RemindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_REMIND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.logic.commands.RemindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": " * Parses input arguments and creates a new RemindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "public class RemindCommandParser implements Parser\u003cRemindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * and returns a RemindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public RemindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REMIND);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    RemindCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        String remark \u003d argMultimap.getValue(PREFIX_REMIND).orElse(\"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return new RemindCommand(index, remark);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KEVVVINN": 35,
      "alcen": 1,
      "nelsontky": 1
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/SavedCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.commons.util.DateUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.SavedCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": " * This class contains logic for parsing a"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": " * given String into a SavedCommand that"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": " * can be executed by Coupon Stash"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class SavedCommandParser implements Parser\u003cSavedCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Parses a String (which will be taken from the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * application when a user types in a command) into"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * the corresponding SavedCommand that it represents"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param userInput The String representing raw command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                  from the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return Returns the corresponding SavedCommand,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     if parsing is successful."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @throws ParseException If the user\u0027s input does"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     not match the exact format for the \"saved\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     command (e.g. wrong prefix for the date)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public SavedCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "                 ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "                         userInput,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "                         CliSyntax.PREFIX_DATE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "                         CliSyntax.PREFIX_START_DATE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "                         CliSyntax.PREFIX_EXPIRY_DATE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Optional\u003cString\u003e specificDate \u003d argMultimap.getValue(CliSyntax.PREFIX_DATE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Optional\u003cString\u003e startDate \u003d argMultimap.getValue(CliSyntax.PREFIX_START_DATE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Optional\u003cString\u003e endDate \u003d argMultimap.getValue(CliSyntax.PREFIX_EXPIRY_DATE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Supplier\u003cParseException\u003e dateRangeException \u003d () -\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "            new ParseException(SavedCommand.MESSAGE_ONLY_ONE_DATE_OF_RANGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (specificDate.isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "            if (startDate.isPresent() || endDate.isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "                throw dateRangeException.get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "            LocalDate specDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                specDate \u003d DateUtil.parseString(specificDate.get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                throw new ParseException(DateUtil.MESSAGE_DATE_WRONG_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new SavedCommand(specDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else if (startDate.isPresent() || endDate.isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "            String strStart \u003d startDate.orElseThrow(dateRangeException);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "            String strEnd \u003d endDate.orElseThrow(dateRangeException);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "            LocalDate sDate;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "            LocalDate eDate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                sDate \u003d DateUtil.parseString(strStart);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                eDate \u003d DateUtil.parseString(strEnd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                throw new ParseException(DateUtil.MESSAGE_DATE_WRONG_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "            if (sDate.isAfter(eDate) || sDate.equals(eDate)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "                throw new ParseException(SavedCommand.MESSAGE_INVALID_DATE_RANGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new SavedCommand(sDate, eDate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else if (userInput.isBlank()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alcen"
        },
        "content": "            // no dates provided"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new SavedCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new ParseException(SavedCommand.MESSAGE_UNEXPECTED_EXTRA_WORDS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 6,
      "alcen": 74
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/SetPrefCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.SetPrefCommand.MESSAGE_MISSING_VALUES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.SetPrefCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.SetPrefCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Parses input arguments and creates a new SetPrefCommand object,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": " * given that the input arguments are valid and there is at least"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": " * one preference to be changed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class SetPrefCommandParser implements Parser\u003cSetPrefCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Parses the raw String from Coupon Stash\u0027s command line"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * into a SetPrefCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param userInput String representing raw input from user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                  (without the command word)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return Returns a new SetPrefCommand with the fields that"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *         need to be changed, as supplied by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @throws ParseException If zero fields are supplied in"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                        the SetPrefCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public SetPrefCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "             ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "                     userInput,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "                     CliSyntax.PREFIX_MONEY_SYMBOL);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "        String newSymbol \u003d argMultimap.getValue(CliSyntax.PREFIX_MONEY_SYMBOL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .orElseThrow(() -\u003e new ParseException(MESSAGE_MISSING_VALUES"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "                        + \"\\n\" + MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return new SetPrefCommand(newSymbol);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 40
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/ShareCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.logic.commands.ShareCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " * Parses input arguments and creates a new ShareCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "public class ShareCommandParser implements Parser\u003cShareCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ShareCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * and returns an ShareCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public ShareCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShareCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return new ShareCommand(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nelsontky": 34
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/SortCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " * and returns an SortCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                .tokenize(args, PREFIX_NAME, PREFIX_EXPIRY_DATE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        if ("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                argMultiMap.getValue(PREFIX_NAME).isPresent()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                        \u0026\u0026 !argMultiMap.getValue(PREFIX_EXPIRY_DATE).isPresent()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            // Only has PREFIX_NAME"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            return new SortCommand(PREFIX_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        } else if ("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                !argMultiMap.getValue(PREFIX_NAME).isPresent()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                        \u0026\u0026 argMultiMap.getValue(PREFIX_EXPIRY_DATE).isPresent()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            // Only has PREFIX_EXPIRY_DATE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            return new SortCommand(PREFIX_EXPIRY_DATE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            // Has both prefixes or has none"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                            SortCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nelsontky": 44
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/UnarchiveCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " * Parses input arguments and creates a new UnarchiveCommand Object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class UnarchiveCommandParser implements Parser\u003cUnarchiveCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnarchiveCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * and returns an UnarchiveCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public UnarchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            return new UnarchiveCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                    UnarchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 28
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/UsedCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.logic.commands.UsedCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.savings.MonetaryAmount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " * Parses input arguments and creates a new UsedCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class UsedCommandParser implements Parser\u003cUsedCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private final String moneySymbol;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Constructor for a UsedCommandParser. Requires the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * money symbol set in UserPrefs as this will be"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * used as the prefix for the monetary amount"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * in the savings field."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * @param moneySymbol String representing the money symbol."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public UsedCommandParser(String moneySymbol) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "        System.out.println(moneySymbol);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        this.moneySymbol \u003d moneySymbol;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * and returns a UsedCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public UsedCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Prefix moneySymbolPrefix \u003d new Prefix(moneySymbol);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        args,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        CliSyntax.PREFIX_NAME,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                        CliSyntax.PREFIX_PROMO_CODE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        CliSyntax.PREFIX_EXPIRY_DATE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        CliSyntax.PREFIX_SAVINGS,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        CliSyntax.PREFIX_USAGE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        CliSyntax.PREFIX_LIMIT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        CliSyntax.PREFIX_TAG,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        moneySymbolPrefix);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            Optional\u003cString\u003e savingsArgument \u003d argMultimap.getValue(moneySymbolPrefix);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            if (savingsArgument.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                return new UsedCommand(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                MonetaryAmount originalAmount \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        ParserUtil.parseMonetaryAmount(argMultimap.getValue(moneySymbolPrefix).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                return new UsedCommand(index, originalAmount);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    String.format(UsedCommand.MESSAGE_USAGE, moneySymbol, moneySymbol)), pe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 63,
      "alcen": 3,
      "nelsontky": 1
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/logic/parser/exceptions/ParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/CouponStash.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import java.util.stream.StreamSupport;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.UniqueCouponList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Wraps all data at the CouponStash level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Duplicates are not allowed (by .isSameCoupon comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class CouponStash implements ReadOnlyCouponStash {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final UniqueCouponList coupons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    // The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    // between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    //"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    // note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    // among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "        coupons \u003d new UniqueCouponList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CouponStash() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Creates an CouponStash using the Coupons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public CouponStash(ReadOnlyCouponStash toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Replaces the contents of the coupon list with {@code coupons}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * {@code coupons} must not contain duplicate coupons."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCoupons(List\u003cCoupon\u003e coupons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.coupons.setCoupons(coupons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Resets the existing data of this {@code CouponStash} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void resetData(ReadOnlyCouponStash newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "        setCoupons(newData.getCouponList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "    //// coupon-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns true if a coupon with the same identity as {@code coupon} exists in the CouponStash."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public boolean hasCoupon(Coupon coupon) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "        requireNonNull(coupon);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return coupons.contains(coupon);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Adds a coupon to the CouponStash."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * The coupon must not already exist in the CouponStash."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void addCoupon(Coupon p) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "        coupons.add(p);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Replaces the given coupon {@code target} in the list with {@code editedCoupon}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * {@code target} must exist in the CouponStash."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * The coupon identity of {@code editedCoupon} must not be the same as another existing coupon in the CouponStash."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCoupon(Coupon target, Coupon editedCoupon) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alcen"
        },
        "content": "        requireNonNull(editedCoupon);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": "        coupons.setCoupon(target, editedCoupon);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Removes {@code key} from this {@code CouponStash}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * {@code key} must exist in the CouponStash."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void removeCoupon(Coupon key) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alcen"
        },
        "content": "        coupons.remove(key);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Archives expired coupons from this {@code CouponStash}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * @return A {@code CouponStash} whose expired coupons have been archived."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public CouponStash archiveExpiredCoupons() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Iterable\u003cCoupon\u003e iterable \u003d () -\u003e coupons.iterator();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        CouponStash updatedCouponStash \u003d new CouponStash();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        final LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        updatedCouponStash.setCoupons(StreamSupport.stream(iterable.spliterator(), false)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .map(coupon -\u003e coupon.getExpiryDate().date.isBefore(today) ? coupon.archive() : coupon)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return updatedCouponStash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Copies all the contents of this {@code CouponStash} to another {@code CouponStash}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @return A copied {@code CouponStash}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public CouponStash copy() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        CouponStash copy \u003d new CouponStash();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        for (Coupon coupon : coupons) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            copy.addCoupon(coupon.copy());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return coupons.asUnmodifiableObservableList().size() + \" coupons\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public ObservableList\u003cCoupon\u003e getCouponList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return coupons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alcen"
        },
        "content": "                || (other instanceof CouponStash // instanceof handles nulls"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alcen"
        },
        "content": "                \u0026\u0026 coupons.equals(((CouponStash) other).coupons));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return coupons.hashCode();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 18,
      "alcen": 45,
      "nelsontky": 22,
      "-": 69
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.StashSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.logic.parser.Prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * {@code Predicate} to filter active coupons only"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    Predicate\u003cCoupon\u003e PREDICATE_SHOW_ALL_ACTIVE_COUPONS \u003d coupon -\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            !Boolean.valueOf(coupon.getArchived().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * {@code Predicate} to filter archived coupons only"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    Predicate\u003cCoupon\u003e PREDICATE_SHOW_ALL_ARCHIVED_COUPONS \u003d coupon -\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            Boolean.valueOf(coupon.getArchived().toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * {@code Predicate} to filter used coupons only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    Predicate\u003cCoupon\u003e PREDICATE_SHOW_ALL_USED_COUPONS \u003d coupon -\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            Integer.parseInt(coupon.getUsage().toString()) \u003e 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns the user prefs\u0027 StashSettings, which"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * are application settings set by the user"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "    StashSettings getStashSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Sets the user prefs\u0027 StashSettings, which"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * are application settings set by the user"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "    void setStashSettings(StashSettings stashSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns the user prefs\u0027 CouponStash file path."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "    Path getCouponStashFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Sets the user prefs\u0027 CouponStash file path."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "    void setCouponStashFilePath(Path couponStashFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Replaces CouponStash data with the data in {@code couponStash}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    void setCouponStash(ReadOnlyCouponStash couponStash, String commandText);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns the CouponStash"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alcen"
        },
        "content": "    ReadOnlyCouponStash getCouponStash();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns true if a coupon with the same identity as {@code coupon} exists in the CouponStash."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "    boolean hasCoupon(Coupon coupon);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Deletes the given coupon."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * The coupon must exist in the CouponStash."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    void deleteCoupon(Coupon target, String commandText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Adds the given coupon."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * {@code coupon} must not already exist in the CouponStash."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    void addCoupon(Coupon coupon, String commandText);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Replaces the given coupon {@code target} with {@code editedCoupon}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * {@code target} must exist in the CouponStash."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * The coupon identity of {@code editedCoupon} must not be the same as another existing coupon in the CouponStash."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    void setCoupon(Coupon target, Coupon editedCoupon, String commandText);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns an unmodifiable view of the filtered coupon list"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alcen"
        },
        "content": "    ObservableList\u003cCoupon\u003e getFilteredCouponList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Updates the filter of the filtered coupon list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alcen"
        },
        "content": "    void updateFilteredCouponList(Predicate\u003c? super Coupon\u003e predicate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Saves current coupon stash state in its history."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @param command The command that triggered the commit. (i.e. add, edit, delete, or clear)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    void commitCouponStash(String command);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Restores the previous coupon statsh state from its history."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @return Command undone to"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    String undoCouponStash();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Restores a previously undone coupon stash state from its history."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @return Command redone to"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    String redoCouponStash();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Check if there is a coupon stash state to undo to."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @return true if there is a state to undo to, false otherwise"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    boolean canUndoCouponStash();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Check if there is a coupon stash state to redo to."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @return true if there is a state to redo to, false otherwise"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    boolean canRedoCouponStash();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Sorts coupons in the coupon stash according to the field specified"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * by the prefix."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    void sortCoupons(Prefix prefixToSortBy, String commandText);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Sets the money symbol in the user prefs to a new value."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param moneySymbol The new value of money symbol."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return Returns the old money symbol."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alcen"
        },
        "content": "    String setMoneySymbol(String moneySymbol);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 26,
      "ChesterSim": 5,
      "alcen": 43,
      "nelsontky": 40,
      "-": 57
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.StashSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.history.HistoryManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Represents the in-memory model of the CouponStash data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final CouponStash couponStash;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final FilteredList\u003cCoupon\u003e filteredCoupons;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private final SortedList\u003cCoupon\u003e sortedCoupons;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private HistoryManager history;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Initializes a ModelManager with the given couponStash and userPrefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public ModelManager(ReadOnlyCouponStash couponStash, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "        requireAllNonNull(couponStash, userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "        logger.fine(\"Initializing with CouponStash: \" + couponStash + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        this.couponStash \u003d new CouponStash(couponStash).archiveExpiredCoupons();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        sortedCoupons \u003d new SortedList\u003c\u003e(this.couponStash.getCouponList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        filteredCoupons \u003d new FilteredList\u003c\u003e(sortedCoupons,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                PREDICATE_SHOW_ALL_ACTIVE_COUPONS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        history \u003d new HistoryManager(this.couponStash.copy());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this(new CouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public StashSettings getStashSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return userPrefs.getStashSettings();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setStashSettings(StashSettings ss) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alcen"
        },
        "content": "        requireNonNull(ss);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alcen"
        },
        "content": "        userPrefs.setStashSettings(ss);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Path getCouponStashFilePath() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return userPrefs.getCouponStashFilePath();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCouponStashFilePath(Path couponStashFilePath) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alcen"
        },
        "content": "        requireNonNull(couponStashFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alcen"
        },
        "content": "        userPrefs.setCouponStashFilePath(couponStashFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public String setMoneySymbol(String moneySymbol) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alcen"
        },
        "content": "        String oldSymbol \u003d this.getStashSettings().getMoneySymbol().setString(moneySymbol);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // force refresh of the JavaFX list so Coupons will show the new symbol"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Predicate\u003c? super Coupon\u003e pred \u003d this.filteredCoupons.getPredicate();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alcen"
        },
        "content": "        updateFilteredCouponList(coupon -\u003e false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // restore the old list after a short moment"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Platform.runLater(() -\u003e updateFilteredCouponList(pred));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return oldSymbol;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alcen"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CouponStash \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    // Please run commitCouponStash() every time couponsStash is mutated."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void setCouponStash(ReadOnlyCouponStash couponStash, String commandText) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.couponStash.resetData(couponStash);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        commitCouponStash(commandText);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public ReadOnlyCouponStash getCouponStash() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return couponStash;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public boolean hasCoupon(Coupon coupon) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alcen"
        },
        "content": "        requireNonNull(coupon);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return couponStash.hasCoupon(coupon);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void deleteCoupon(Coupon target, String commandText) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alcen"
        },
        "content": "        couponStash.removeCoupon(target);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        commitCouponStash(commandText);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void addCoupon(Coupon coupon, String commandText) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alcen"
        },
        "content": "        couponStash.addCoupon(coupon);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        updateFilteredCouponList(PREDICATE_SHOW_ALL_ACTIVE_COUPONS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        commitCouponStash(commandText);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void setCoupon(Coupon target, Coupon editedCoupon, String commandText) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alcen"
        },
        "content": "        requireAllNonNull(target, editedCoupon);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alcen"
        },
        "content": "        couponStash.setCoupon(target, editedCoupon);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        updateFilteredCouponList(PREDICATE_SHOW_ALL_ACTIVE_COUPONS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        commitCouponStash(commandText);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void sortCoupons(Prefix prefixToSortBy, String commandText) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        requireNonNull(prefixToSortBy);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Comparator\u003cCoupon\u003e cmp \u003d null;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        if (prefixToSortBy.equals(PREFIX_NAME)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            cmp \u003d (x, y) -\u003e x"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                    .toString()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                    .toLowerCase()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                    .compareTo(y.toString().toLowerCase());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        } else if (prefixToSortBy.equals(PREFIX_EXPIRY_DATE)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            cmp \u003d (x, y) -\u003e x"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                    .getExpiryDate()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                    .getDate()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                    .compareTo("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                            y.getExpiryDate().getDate()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        sortedCoupons.setComparator(cmp);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alcen"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Coupon List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Coupon} backed by the internal list of"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * {@code versionedCouponStash}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public ObservableList\u003cCoupon\u003e getFilteredCouponList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return filteredCoupons;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void updateFilteredCouponList(Predicate\u003c? super Coupon\u003e predicate) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alcen"
        },
        "content": "        filteredCoupons.setPredicate(predicate);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo functionality \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void commitCouponStash(String commandText) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        history.commitState(couponStash.copy(), commandText);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public String undoCouponStash() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        couponStash.resetData(history.undo());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return history.getNextCommandText();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public String redoCouponStash() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        String nextCommand \u003d history.getNextCommandText();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        couponStash.resetData(history.redo());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return nextCommand;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public boolean canUndoCouponStash() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return history.canUndo();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public boolean canRedoCouponStash() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return history.canRedo();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d End of Undo/Redo functionality \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return couponStash.equals(other.couponStash)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alcen"
        },
        "content": "                \u0026\u0026 filteredCoupons.equals(other.filteredCoupons);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 3,
      "alcen": 66,
      "KEVVVINN": 1,
      "nelsontky": 76,
      "-": 103
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/ReadOnlyCouponStash.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Unmodifiable view of a CouponStash"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "public interface ReadOnlyCouponStash {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns an unmodifiable view of the coupons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * This list will not contain any duplicate coupons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "    ObservableList\u003cCoupon\u003e getCouponList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 9,
      "-": 9
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.StashSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Gets the StashSettings representing user-set application"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * settings from the UserPrefs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return The StashSettings that holds application settings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     like symbol to be used for money."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "    StashSettings getStashSettings();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "    Path getCouponStashFilePath();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 12,
      "-": 13
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.StashSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private StashSettings stashSettings \u003d new StashSettings();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private Path couponStashFilePath \u003d Paths.get(\"data\" , \"couponStash.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "        setStashSettings(newUserPrefs.getStashSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "        setCouponStashFilePath(newUserPrefs.getCouponStashFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public StashSettings getStashSettings() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.stashSettings;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Sets the new StashSettings that contains application"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * settings that were set by the user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param ss StashSettings that holds the application"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *           settings set by the user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setStashSettings(StashSettings ss) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "        requireNonNull(ss);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.stashSettings \u003d ss;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Path getCouponStashFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return couponStashFilePath;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCouponStashFilePath(Path couponStashFilePath) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alcen"
        },
        "content": "        requireNonNull(couponStashFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.couponStashFilePath \u003d couponStashFilePath;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "                \u0026\u0026 stashSettings.equals(o.stashSettings)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alcen"
        },
        "content": "                \u0026\u0026 couponStashFilePath.equals(o.couponStashFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return Objects.hash(guiSettings, stashSettings, couponStashFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alcen"
        },
        "content": "        sb.append(\"\\nStash Settings : \" + stashSettings);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alcen"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + couponStashFilePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 33,
      "-": 75
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/Archived.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " * Represents a Coupon\u0027s state of archive in the CouponStash."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidState(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class Archived {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Archive state should only be true or false\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(true|false)$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Constructs a false {@code state} of archival."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public Archived() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        this.value \u003d \"false\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Constructs a {@code state} of {@code Archived}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * @param value A valid state of archival."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public Archived(String value) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        checkArgument(isValidState(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Returns true if a given string is a valid state of archival."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static boolean isValidState(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                || (other instanceof Archived"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                \u0026\u0026 value.equals(((Archived) other).value));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 61
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/Condition.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": " * Represents a Person\u0027s remark in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "public class Condition {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            \"Do input a term and condition, if neccessary. Please limit to a max of 50 words.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public Condition(String condition) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        requireNonNull(condition);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        value \u003d condition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Returns true if a given string is a valid condition."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static boolean isValidCondition(String test) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        int wordCount \u003d test.trim().split(\"\\\\s+\").length;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (wordCount \u003e 50) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                || (other instanceof Condition // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                \u0026\u0026 value.equals(((Condition) other).value)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KEVVVINN": 46
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/Coupon.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.DateSavingsSumMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.PureMonetarySavings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Savings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Represents a Coupon in the CouponStash."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": " * All fields are immutable except for total savings."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class Coupon {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "    // (\"immutable\" properties of Coupon that will never"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "    // change unless edited)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private final PromoCode promoCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private final ExpiryDate expiryDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private final StartDate startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final Savings savingsForEachUse;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final Limit limit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private final Condition condition;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "    // (\"mutable\" properties of Coupon that will change,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "    // for implementation of certain commands)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private final Usage usage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private final RemindDate remind;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final DateSavingsSumMap totalSavings;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private final Archived archived;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Standard constructor for a new Coupon (when"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * a Coupon is added for the first time, with 0"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * total savings, no reminder, and not archived)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param name The Name of this Coupon."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @param promoCode Promo code for this Coupon."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param savingsForEachUse How much Savings saved"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                          when this Coupon is used."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param expiryDate The ExpiryDate for this Coupon."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param startDate The StartDate for this Coupon."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param usage The Usage for this Coupon."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param limit The usage Limit for this Coupon."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param tags The List of tags for this Coupon."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public Coupon(Name name, PromoCode promoCode, Savings savingsForEachUse, ExpiryDate expiryDate, StartDate startDate,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                  Usage usage, Limit limit, Set\u003cTag\u003e tags, Condition condition) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        this(name, promoCode, savingsForEachUse, expiryDate, startDate, usage,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                limit, tags, new DateSavingsSumMap(), new RemindDate(expiryDate), condition, new Archived());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructor for a Coupon, given every required field."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Each field should not be null, otherwise a"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * NullPointerException will be thrown!"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param name The Name of this Coupon."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @param promoCode Promo code for this Coupon.."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param savingsForEachUse How much Savings saved"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                          when this Coupon is used."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param expiryDate The ExpiryDate for this Coupon."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param startDate The StartDate for this Coupon."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param usage The Usage for this Coupon."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param limit The usage Limit for this Coupon."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param tags The List of tags for this Coupon."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param totalSavings DateSavingsSumMap representing"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                     the total savings accumulated."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param remind Remind representing a reminder for"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *               this Coupon."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Coupon("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alcen"
        },
        "content": "            Name name,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            PromoCode promoCode,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alcen"
        },
        "content": "            Savings savingsForEachUse,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alcen"
        },
        "content": "            ExpiryDate expiryDate,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": "            StartDate startDate,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "            Usage usage,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alcen"
        },
        "content": "            Limit limit,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alcen"
        },
        "content": "            Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alcen"
        },
        "content": "            DateSavingsSumMap totalSavings,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            RemindDate remind,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            Condition condition,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            Archived archived) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        requireAllNonNull(name, promoCode, savingsForEachUse, expiryDate, usage, limit, tags,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                totalSavings, remind, condition, archived);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        this.promoCode \u003d promoCode;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.savingsForEachUse \u003d savingsForEachUse;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.totalSavings \u003d totalSavings;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.remind \u003d remind;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        this.usage \u003d usage;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        this.limit \u003d limit;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        this.archived \u003d archived;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        this.condition \u003d condition;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public Condition getCondition() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return condition;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public RemindDate getRemindDate() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return remind;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public PromoCode getPromoCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return promoCode;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Gets the Savings per use associated with this Coupon."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return Savings representing either the monetary"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     amount saved, percentage amount saved, or"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     unquantifiable items (Saveables) that will"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     be earned for every use of this Coupon."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Savings getSavingsForEachUse() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return savingsForEachUse;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Gets the total Savings stored with this Coupon as"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * a PureMonetarySavings. This total Savings will be"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * increased whenever the Coupon is marked as used."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return PureMonetarySavings representing total"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     amount of money saved from using this"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     Coupon, as well as unquantifiable"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     items (Saveables) earned."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public PureMonetarySavings getTotalSavings() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.totalSavings.values().stream()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .reduce(new PureMonetarySavings(), PureMonetarySavings::add);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Gets a shallow clone of the date and savings map"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * that is associated with this Coupon. LocalDate"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * and PureMonetarySavings are immutable, however."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return DateSavingsSumMap representing the savings"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     earned for specific dates."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public DateSavingsSumMap getSavingsMap() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return (DateSavingsSumMap) this.totalSavings.clone();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public ExpiryDate getExpiryDate() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return expiryDate;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public StartDate getStartDate() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public Usage getUsage() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return usage;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public Limit getLimit() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return limit;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public Archived getArchived() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return archived;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Associates a certain PureMonetarySavings to a LocalDate,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * and adds it to the DateSavingsSumMap in the totalSavings"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * field of this Coupon, which keeps track of how much has"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * been saved on which date by using this Coupon (for SavedCommand)."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param ld The LocalDate representing when the"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *           savings value pms was earned."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param pms The PureMonetarySavings to be added."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return A new Coupon with total savings modified."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Coupon addToTotalSavings(LocalDate ld, PureMonetarySavings pms) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alcen"
        },
        "content": "        DateSavingsSumMap updatedMap \u003d (DateSavingsSumMap) this.totalSavings.clone();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alcen"
        },
        "content": "        updatedMap.add(ld, pms);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return new Coupon(this.name, this.promoCode, this.savingsForEachUse,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alcen"
        },
        "content": "                this.expiryDate, this.startDate, this.usage, this.limit,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                this.tags, updatedMap, this.remind, this.condition, this.archived);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns a new Coupon with total usage increased by one."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return A new Coupon with total usage increased by one."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Coupon increaseUsageByOne() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Usage newUsage \u003d this.usage.increaseUsageByOne();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return new Coupon(this.name, this.promoCode, this.savingsForEachUse,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                this.expiryDate, this.startDate, newUsage,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                this.limit, this.tags, this.totalSavings, this.remind, this.condition, this.archived);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Returns a new archived Coupon."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public Coupon archive() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return setArchive(true);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Returns a new active Coupon."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public Coupon unarchive() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return setArchive(false);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Helper function to set the state of archival for a Coupon."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * @param state State of archival."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private Coupon setArchive(boolean state) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return new Coupon(this.name, this.promoCode, this.savingsForEachUse,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                this.expiryDate, this.startDate, this.usage, this.limit,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                this.tags, this.totalSavings, this.remind, this.condition, new Archived(String.valueOf(state)));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns true if both coupons have the same name, and all"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * of the fields of promo code, savings for each use, expiry date or"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * start date is the same. However, if either of the coupon is archived,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * they are immediately considered different coupons."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * This defines a weaker notion of equality between two coupons."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public boolean isSameCoupon(Coupon otherCoupon) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (otherCoupon \u003d\u003d this) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (otherCoupon \u003d\u003d null || Boolean.valueOf(archived.toString())"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                || Boolean.valueOf(otherCoupon.archived.toString())) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return otherCoupon.getName().equals(getName())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                \u0026\u0026 otherCoupon.getPromoCode().equals(getPromoCode())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                \u0026\u0026 otherCoupon.getExpiryDate().equals(getExpiryDate())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alcen"
        },
        "content": "                \u0026\u0026 otherCoupon.getSavingsForEachUse().equals(getSavingsForEachUse());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns true if both coupons have the same identity and data fields."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * This defines a stronger notion of equality between two coupons."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * \u003cp\u003eHowever, total savings is ignored as this field is just used to"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * cache an amount representing how much the Coupon was used to save,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * and two Coupons with different total savings recorded"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * does not necessarily translate to different Coupons."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (!(other instanceof Coupon)) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon otherCoupon \u003d (Coupon) other;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        // Loop through the tags to check for equality"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        if (getTags().size() !\u003d otherCoupon.getTags().size()) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            for (Tag tag : getTags()) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                if (!otherCoupon.getTags().contains(tag)) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return otherCoupon.getName().equals(getName())"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                \u0026\u0026 otherCoupon.getPromoCode().equals(getPromoCode())"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "alcen"
        },
        "content": "                \u0026\u0026 otherCoupon.getSavingsForEachUse().equals(getSavingsForEachUse())"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                \u0026\u0026 otherCoupon.getExpiryDate().equals(getExpiryDate())"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                \u0026\u0026 otherCoupon.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                \u0026\u0026 otherCoupon.getUsage().equals(getUsage())"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                \u0026\u0026 otherCoupon.getLimit().equals(getLimit())"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                \u0026\u0026 otherCoupon.getTags().equals(getTags())"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                \u0026\u0026 otherCoupon.getArchived().equals(getArchived());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return Objects.hash(name, promoCode, savingsForEachUse, expiryDate,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                startDate, usage, limit, tags, totalSavings, archived);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                .append(\" Promo Code: \")"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                .append(getPromoCode())"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .append(\" Savings: \")"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .append(getSavingsForEachUse())"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                .append(\" Expiry Date: \")"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                .append(getExpiryDate())"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                .append(\" Start Date: \")"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                .append(getStartDate())"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .append(\" Usage: \")"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .append(getUsage())"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .append(\" Limit: \")"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .append(getLimit())"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .append(\" Remind Date: \")"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .append(getRemindDate())"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .append(\" Condition: \")"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .append(getCondition())"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .append(\" Archived: \")"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .append(getArchived())"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Deep copy of a coupon."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @return The copy of the coupon"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public Coupon copy() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        // Copy all the tags"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Set\u003cTag\u003e copiedTags \u003d new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Coupon copy \u003d new Coupon("
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new Name(name.toString()), new PromoCode(promoCode.toString()),"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                savingsForEachUse.copy(), new ExpiryDate(expiryDate.value),"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new StartDate(startDate.value),"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new Usage(usage.value), new Limit(limit.value), copiedTags,"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                totalSavings.copy(), remind.copy(), new Condition(condition.toString()),"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                new Archived(archived.toString())"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        );"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 19,
      "ChesterSim": 66,
      "alcen": 142,
      "KEVVVINN": 22,
      "nelsontky": 48,
      "-": 71
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/DateIsBeforePredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.commons.util.DateUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * Tests that a {@code Coupon}\u0027s {@code ExpiryDate} is before the specified date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "public class DateIsBeforePredicate implements Predicate\u003cCoupon\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public DateIsBeforePredicate(String date) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public boolean test(Coupon coupon) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        LocalDate ed \u003d coupon.getExpiryDate().getDate();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        LocalDate givenDate \u003d DateUtil.parseString(date);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        LocalDate yesterday \u003d LocalDate.now().minusDays(1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return ed.isBefore(givenDate) \u0026\u0026 ed.isAfter(yesterday);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                || (other instanceof DateIsBeforePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                \u0026\u0026 date.equals(((DateIsBeforePredicate) other).date)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 38
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/ExpiryDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.commons.util.DateUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * Represents a Coupon\u0027s expiry date in the CouponStash."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidExpiryDate(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "public class ExpiryDate {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \"Expiry Dates should be a date in the D-M-YYYY format.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,2}-\\\\d{1,2}-\\\\d{4}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public final LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Constructs a {@code ExpiryDate}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param expiryDate A valid expiry date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public ExpiryDate(String expiryDate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        requireNonNull(expiryDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        checkArgument(isValidExpiryDate(expiryDate), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        value \u003d expiryDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        date \u003d getDate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns true if a given string is a valid expiry date."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static boolean isValidExpiryDate(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            DateUtil.parseString(test);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns the expiry date as a LocalDate."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @return Expiry Date as a LocalDate"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return DateUtil.parseString(value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                || (other instanceof ExpiryDate// instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                \u0026\u0026 value.equals(((ExpiryDate) other).value)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 70,
      "ChesterSim": 2
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/Limit.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " * Represents a Coupon\u0027s usage limit in the CouponStash."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLimit(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class Limit {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            \"Limit should only contain numbers with a minimum value of 1 \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            + \"or a number less than 1 to indicate unlimited usage\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(\\\\+|-)?\\\\d+$|Infinity\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Constructs a {@code Limit}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * If {@code limit} is an empty String, it will default to 1."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * If {@code limit} is given as a hyphen only or a negative number string,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * it will default to max value to indicate limitless usage of the encapsulating Coupon."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * @param limit Maximum number of times the coupon can be used."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public Limit(String limit) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        requireNonNull(limit);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        checkArgument(isValidLimit(limit));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (\"Infinity\".equals(limit) || Integer.parseInt(limit) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            this.value \u003d String.valueOf(Double.POSITIVE_INFINITY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            this.value \u003d limit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Returns true if a given string is a valid usage limit."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * @param test String to be validated."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static boolean isValidLimit(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public String getLimit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public Double getParsedLimit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (\"Infinity\".equals(value)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            return Double.POSITIVE_INFINITY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            return Double.parseDouble(value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public String toUiLabelText() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return String.format(\"You can only use it %s time(s).\", value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                || (other instanceof Limit)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                \u0026\u0026 value.equals(((Limit) other).value);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 77
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Represents a Coupon\u0027s name in the CouponStash."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "            \"Names should only contain alphanumeric characters, spaces or apostrophes,\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \"and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * The first character of the Coupon must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}{\\\u0027}][\\\\p{Alnum}{\\\u0027} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 7,
      "-": 53
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/NameContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Tests that a {@code Coupon}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cCoupon\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public boolean test(Coupon coupon) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(coupon.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 6,
      "-": 25
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/PromoCode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " * Represents a Coupon\u0027s promo code in the CouponStash."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "public class PromoCode {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Constructs a {@code PromoCode}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @param promoCode A promoCode."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public PromoCode(String promoCode) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        requireNonNull(promoCode);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        value \u003d promoCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                || (other instanceof PromoCode // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                \u0026\u0026 value.equals(((PromoCode) other).value)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nelsontky": 40
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/RemindDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": " * Represents a Coupon\u0027s remind date in the CouponStash."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRemindDate(String, String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "public class RemindDate {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            \"Remind Dates should be a date in the D-M-YYYY format and not after the expiry date\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,2}-\\\\d{1,2}-\\\\d{4}\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d-M-yyyy\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private boolean remindFlag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Constructs a {@code RemindDate}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * @param remindDate A valid remind date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public RemindDate(String remindDate, String expiryDate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (remindDate.equals(\"\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            date \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            remindFlag \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            value \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        requireNonNull(remindDate, expiryDate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        checkArgument(isValidRemindDate(remindDate, expiryDate), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        value \u003d remindDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        this.date \u003d getDate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        remindFlag \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public RemindDate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        date \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        remindFlag \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public RemindDate(ExpiryDate expiryDate) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        value \u003d expiryDate.value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        date \u003d getDate().minusDays(3);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        setRemindDate(date);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Private constructor to facilitate copying of a new RemindDate"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private RemindDate(LocalDate date, boolean remindFlag, String value) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        this.remindFlag \u003d remindFlag;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Returns true if a given string reminddate and string expirydate are a valid remind date."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static boolean isValidRemindDate(String remindTest, String expiryTest) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        LocalDate remindDate \u003d LocalDate.parse(remindTest, DATE_FORMATTER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        LocalDate expiryDate \u003d LocalDate.parse(expiryTest, DATE_FORMATTER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return remindTest.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                \u0026\u0026 !(remindDate.isAfter(expiryDate));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Returns true if a given string reminddate are a valid remind date."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static boolean isValidRemindDate(String remindTest) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        LocalDate remindDate \u003d LocalDate.parse(remindTest, DATE_FORMATTER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return remindTest.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Returns remindFlag if coupon has reminder set."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public boolean hasReminder() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return this.remindFlag;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Set remindDate to a coupon"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public void setRemindDate(LocalDate date) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        remindFlag \u003d true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        value \u003d date.format(DATE_FORMATTER);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Returns remind date"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return LocalDate.parse(value, DATE_FORMATTER);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Make a new copy of current RemindDate"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @return a copy of the current RemindDate"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public RemindDate copy() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return new RemindDate(date, remindFlag, value);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                || (other instanceof RemindDate// instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                \u0026\u0026 value.equals(((RemindDate) other).value)); // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 4,
      "KEVVVINN": 107,
      "nelsontky": 18
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/StartDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.commons.util.DateUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * Represents a Coupon\u0027s start date in the CouponStash."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStartDate(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "public class StartDate {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \"Start Dates should be a date in the D-M-YYYY format.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,2}-\\\\d{1,2}-\\\\d{4}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public final LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Constructs a {@code startDate}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param startDate A valid start date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public StartDate(String startDate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        requireNonNull(startDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        checkArgument(isValidStartDate(startDate), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        value \u003d startDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        date \u003d getDate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns true if a given string is a valid start date."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static boolean isValidStartDate(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            DateUtil.parseString(test);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return (test.matches(VALIDATION_REGEX));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns the start date as a {@LocalDate}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @return Start Date as a {@LocalDate}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return DateUtil.parseString(value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                || (other instanceof StartDate// instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                \u0026\u0026 value.equals(((StartDate) other).value)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 71,
      "ChesterSim": 1
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/UniqueCouponList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.exceptions.CouponNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.exceptions.DuplicateCouponException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": " * A list of coupons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": " * A coupon is considered unique by comparing using {@code Coupon#isSameCoupon(Coupon)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": " * coupons uses Coupon#isSameCoupon(Coupon) for equality so as to ensure that the coupon being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": " * unique in terms of identity in the UniqueCouponList. However, the removal of a coupon uses Coupon#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": " * as to ensure that the coupon with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": " * @see Coupon#isSameCoupon(Coupon)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class UniqueCouponList implements Iterable\u003cCoupon\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final ObservableList\u003cCoupon\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final ObservableList\u003cCoupon\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns true if the list contains an equivalent coupon as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public boolean contains(Coupon toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameCoupon);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Adds a coupon to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * The coupon must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void add(Coupon toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new DuplicateCouponException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Replaces the coupon {@code target} in the list with {@code editedCoupon}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * The coupon identity of {@code editedCoupon} must not be the same as another existing coupon in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCoupon(Coupon target, Coupon editedCoupon) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "        requireAllNonNull(target, editedCoupon);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new CouponNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (!target.isSameCoupon(editedCoupon) \u0026\u0026 contains(editedCoupon)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new DuplicateCouponException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "        internalList.set(index, editedCoupon);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Removes the equivalent coupon from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * The coupon must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void remove(Coupon toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new CouponNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCoupons(UniqueCouponList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Replaces the contents of this list with {@code coupons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * {@code coupons} must not contain duplicate coupons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCoupons(List\u003cCoupon\u003e coupons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alcen"
        },
        "content": "        requireAllNonNull(coupons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (!couponsAreUnique(coupons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new DuplicateCouponException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alcen"
        },
        "content": "        internalList.setAll(coupons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public ObservableList\u003cCoupon\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Iterator\u003cCoupon\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alcen"
        },
        "content": "                || (other instanceof UniqueCouponList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alcen"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueCouponList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns true if {@code coupons} contains only unique coupons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private boolean couponsAreUnique(List\u003cCoupon\u003e coupons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alcen"
        },
        "content": "        for (int i \u003d 0; i \u003c coupons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alcen"
        },
        "content": "            for (int j \u003d i + 1; j \u003c coupons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alcen"
        },
        "content": "                if (coupons.get(i).isSameCoupon(coupons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 50,
      "-": 87
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/Usage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " * Represents a Coupon\u0027s usage in the CouponStash."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidUsage(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class Usage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            \"Usage should only contain numbers, and it should at least be a value of 0\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d+$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Constructs a {@code Usage}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * @param usage Valid usage number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public Usage(String usage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        requireNonNull(usage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        checkArgument(isValidUsage(usage), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        value \u003d usage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Constructs a {@code Usage} that defaults the current value to 0."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public Usage() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        this(\"0\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /** Returns true if a given string is a valid usage number."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * @param test String to be validated."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static boolean isValidUsage(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Returns true if {@code usage} current value is equals or greater than its {@code maxUsage}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * @param usage The usage of the coupon."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static boolean isUsageAtLimit(Usage usage, Limit limit) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Double currentUsage \u003d Double.parseDouble(usage.value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Double usageLimit \u003d limit.getParsedLimit();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return currentUsage \u003e\u003d usageLimit;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Returns new {@code Usage} with an increase of 1 in value."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public Usage increaseUsageByOne() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return increaseUsage(\"1\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Returns new {@code Usage} with an increase of {@code numberOfTimes} in value."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public Usage increaseUsage(String numberOfTimes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Integer currentValue \u003d Integer.parseInt(value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Integer finalValue \u003d Integer.parseInt(numberOfTimes) + currentValue;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return new Usage(finalValue.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public String toUiLabelText() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return String.format(\"You have used it %s time(s)\", value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                || (other instanceof Usage"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                \u0026\u0026 value.equals(((Usage) other).value));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 90
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/exceptions/CouponNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model.coupon.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Signals that the operation is unable to find the specified coupon."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class CouponNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "alcen": 6
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/exceptions/DuplicateCouponException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model.coupon.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Signals that the operation will result in duplicate Coupons (Coupons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class DuplicateCouponException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public DuplicateCouponException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "        super(\"Operation would result in duplicate coupons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 11
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/exceptions/InvalidSavingsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model.coupon.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": " * This Exception will be thrown when some error is"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": " * detected when trying to compare Savings"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class InvalidSavingsException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public InvalidSavingsException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "        super(\"Invalid savings format detected, cannot be compared due to\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "                + \" savings not having any data\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public InvalidSavingsException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 16
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/savings/DateSavingsSumMap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model.coupon.savings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": " * A wrapper class for a HashMap, this class allows"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": " * multiple PureMonetarySavings to be associated with a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": " * certain LocalDate by adding up the PureMonetarySavings"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": " * whenever the value already exists in the Map. Hence"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": " * putting new entries should always return null."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": " * \u003cp\u003eWARNING: This class is mutable, just like HashMap!"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class DateSavingsSumMap extends HashMap\u003cLocalDate, PureMonetarySavings\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructs a new empty DateSavingsSumMap."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public DateSavingsSumMap() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructs a DateSavingsSumMap with a single entry,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * given the key and value that make up this entry."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param ld LocalDate that acts as the key of the first entry."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param pms PureMonetarySavings that acts as the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *            associated value for this entry."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public DateSavingsSumMap(LocalDate ld, PureMonetarySavings pms) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.add(ld, pms);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Private constructor facilitating copy of HashMap"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @param map current map DateSavingsSumMapToCopy"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private DateSavingsSumMap(DateSavingsSumMap map) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        for (LocalDate key : map.keySet()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            this.add(key, map.get(key).copy());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Associates the specified LocalDate with the specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * PureMonetarySavings in this DateSavingsSumMap. The old"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * savings value will never be replaced, but instead"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * DateSavingsSumMap will add the new value to that"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * PureMonetarySavings value to represent the sum"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * of savings on a certain date."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param ld LocalDate with which pms is to be associated."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param pms PureMonetarySavings value to be associated"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *            with the specified ld."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return The previous value associated with {@code ld}, or"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *         {@code null} if there was no mapping for {@code key}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public PureMonetarySavings add(LocalDate ld, PureMonetarySavings pms) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "        requireAllNonNull(ld, pms);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (super.containsKey(ld)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "            PureMonetarySavings oldValue \u003d super.get(ld);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return super.put(ld, oldValue.add(pms));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return super.put(ld, pms);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Adds all of the mappings from the specified map to this map."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * The effect of this call is equivalent to that"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * of calling {@link #add(LocalDate, PureMonetarySavings) add(k, v)}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * for every mapping of key {@code k} to value {@code v}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * PureMonetarySavings values for a certain date will never"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * be overwritten, but instead summed up to produce a new value."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param m The mappings to be stored in this DateSavingsSumMap."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void addAll(Map\u003c? extends LocalDate, ? extends PureMonetarySavings\u003e m) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alcen"
        },
        "content": "        requireNonNull(m);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alcen"
        },
        "content": "        m.forEach(this::add);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Copies current DateSavingsSumMap"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @return copy of current DateSavingsSumMap"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public DateSavingsSumMap copy() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return new DateSavingsSumMap(this);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 78,
      "nelsontky": 19
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/savings/MonetaryAmount.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model.coupon.savings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Represents a monetary amount that"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": " * can be saved by a coupon."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class MonetaryAmount implements Comparable\u003cMonetaryAmount\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            \"Monetary amount should be a positive integer, and accurate to at most 2 decimal places\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "    // to avoid floating point errors"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static final double THRESHHOLD \u003d 0.0000000000001;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final double monetaryAmount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public MonetaryAmount(double amount) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "        checkArgument(MonetaryAmount.isValidMonetaryAmount(amount),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "                MonetaryAmount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.monetaryAmount \u003d amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Gets the value of this MonetaryAmount"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * as a non-negative double that has only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * 2 decimal places at most."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return Double representing MonetaryAmount."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public double getValue() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.monetaryAmount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Checks if this double is suitable for use"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * in the MonetaryAmount (should be at most"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * 2 decimal places)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param monetaryAmount The double to be checked."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static boolean isValidMonetaryAmount(double monetaryAmount) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // when multiplied by 100, it should be a whole number"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "        double remainder \u003d (monetaryAmount * 100) % 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // use THRESHHOLD to avoid floating point errors"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return monetaryAmount \u003e\u003d 0 \u0026\u0026 ((remainder \u003c THRESHHOLD) || (remainder \u003e (1 - THRESHHOLD)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Adds this MonetaryAmount to another MonetaryAmount,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * resulting in a new MonetaryAmount with value"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * greater than the original two."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param ma The other MonetaryAmount to add to."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return Returns a new MonetaryAmount with"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     value that was obtained by adding both"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     original MonetaryAmounts."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public MonetaryAmount add(MonetaryAmount ma) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return new MonetaryAmount(this.monetaryAmount + ma.monetaryAmount);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Given a custom money symbol, represent this"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * MonetaryAmount as a String using that money"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * symbol (e.g. \"$2.50\", \"£4.20\")."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param symbol String representing money symbol"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *               to be used in the final String."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return Returns a String that has the amount"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     set to 2 decimal places, and prefixed by"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     the given money symbol in String symbol."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public String getStringWithMoneySymbol(String symbol) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return symbol + String.format(\"%.2f\", this.monetaryAmount);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public int compareTo(MonetaryAmount m) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return (int) Math.signum(this.monetaryAmount - m.monetaryAmount);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return o \u003d\u003d this"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alcen"
        },
        "content": "                || (o instanceof MonetaryAmount"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alcen"
        },
        "content": "                \u0026\u0026 this.monetaryAmount \u003d\u003d ((MonetaryAmount) o).monetaryAmount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return Double.hashCode(this.monetaryAmount);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // use $ as default symbol just to denote a monetary amount"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.getStringWithMoneySymbol(\"$\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 1,
      "alcen": 95
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/savings/PercentageAmount.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model.coupon.savings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Represents a percentage amount that"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": " * can be saved by a coupon."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class PercentageAmount implements Comparable\u003cPercentageAmount\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String PERCENT_SUFFIX \u003d \"%\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "            \"Percentage should be between 0\" + PercentageAmount.PERCENT_SUFFIX"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \" and 100\" + PercentageAmount.PERCENT_SUFFIX;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final double percentage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public PercentageAmount(double percent) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "        checkArgument(PercentageAmount.isValidPercentage(percent),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "                PercentageAmount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.percentage \u003d percent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Gets the value of this PercentageAmount"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * as a double between 0 and 100."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return Double representing PercentageAmount."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public double getValue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.percentage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Checks if this double is suitable for use"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * in the PercentageAmount (should be between"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * 0 and 100 inclusive)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param percentage The double to be checked."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return True, if the double is between 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     and 100 inclusive. False, if not."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static boolean isValidPercentage(double percentage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return percentage \u003e\u003d 0 \u0026\u0026 percentage \u003c\u003d 100;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public int compareTo(PercentageAmount p) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return (int) Math.signum(this.percentage - p.percentage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return o \u003d\u003d this"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "                || (o instanceof PercentageAmount"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "                \u0026\u0026 this.percentage \u003d\u003d ((PercentageAmount) o).percentage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return Double.hashCode(this.percentage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // rounds the double to nearest integer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return String.format(\"%.0f\", this.percentage) + PercentageAmount.PERCENT_SUFFIX;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 67
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/savings/PureMonetarySavings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model.coupon.savings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.exceptions.InvalidSavingsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Represents a certain amount of Savings in"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": " * CouponStash, but with the restriction that"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": " * the Saving must be an actual MonetaryAmount."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": " * \u003cp\u003eSaveables are allowed as well, but not"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": " * required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": " * \u003cp\u003eIn practice, PureMonetarySavings is used"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": " * to represent a sum of many Coupons\u0027 Savings,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": " * while Savings is used for individual Coupons."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class PureMonetarySavings extends Savings {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"PureMonetarySavings \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \"must have a double representing MonetaryAmount.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructor for a PureMonetarySavings that"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * represents no money saved (MonetaryAmount"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * wil be set to 0)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public PureMonetarySavings() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "        super(new MonetaryAmount(0));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructor for a PureMonetarySavings that"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * represents no money saved (MonetaryAmount"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * wil be set to 0), but contains certain"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Saveables (this will be stored as usual)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param saveables The saveables to be stored"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                  as Savings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public PureMonetarySavings(List\u003cSaveable\u003e saveables) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "        super(new MonetaryAmount(0), saveables);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public PureMonetarySavings(MonetaryAmount monetaryAmount) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "        super(monetaryAmount);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public PureMonetarySavings(MonetaryAmount monetaryAmount, List\u003cSaveable\u003e saveables) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "        super(monetaryAmount, saveables);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Cloning constructor for PureMonetarySavings. The internal"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * MonetaryAmount and Saveables will not be cloned, as they"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * are immutable. But the Saveables List will be cloned."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Assumes pms is a valid PureMonetarySavings."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param pms The PureMonetarySavings to be cloned."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public PureMonetarySavings(PureMonetarySavings pms) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "        super(pms);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Combines two PureMonetarySavings, giving a new"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * PureMonetarySavings that takes into account"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * monetary amounts in both PureMonetarySavings,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * as well as the Saveable items."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param pms The other PureMonetarySavings to be"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *            combined with this PureMonetarySavings."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return Returns a new PureMonetarySavings that adds the"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * monetary amounts, and contains all the Saveables"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * from both PureMonetarySavings."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public PureMonetarySavings add(PureMonetarySavings pms) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alcen"
        },
        "content": "        MonetaryAmount newAmount \u003d new MonetaryAmount("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alcen"
        },
        "content": "                this.getMonetaryAmountAsDouble() + pms.getMonetaryAmountAsDouble());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alcen"
        },
        "content": "        List\u003cSaveable\u003e originalSaveables \u003d this.getListOfSaveables();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alcen"
        },
        "content": "        List\u003cSaveable\u003e newSaveables \u003d pms.getListOfSaveables();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alcen"
        },
        "content": "        List\u003cSaveable\u003e combinedSaveables \u003d new ArrayList\u003cSaveable\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // try to increase count of Saveables with same name"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Map\u003cString, Saveable\u003e saveableMap \u003d originalSaveables.stream()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .collect(Collectors.toMap(Saveable::getValue, sva -\u003e sva));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alcen"
        },
        "content": "        for (Saveable s : newSaveables) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alcen"
        },
        "content": "            // try to get from map"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alcen"
        },
        "content": "            String value \u003d s.getValue();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alcen"
        },
        "content": "            Saveable retrieveFromMap \u003d saveableMap.get(value);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alcen"
        },
        "content": "            if (retrieveFromMap !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alcen"
        },
        "content": "                combinedSaveables.add(s.increaseCount(retrieveFromMap));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alcen"
        },
        "content": "                saveableMap.remove(value);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alcen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alcen"
        },
        "content": "                combinedSaveables.add(s);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alcen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alcen"
        },
        "content": "        combinedSaveables.addAll(saveableMap.values());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (combinedSaveables.isEmpty()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new PureMonetarySavings(newAmount);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new PureMonetarySavings(newAmount, combinedSaveables);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Gets the double value of monetary savings"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * that is represented by this PureMonetarySavings."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return Double representing all the money"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * saved in this PureMonetarySavings."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public double getMonetaryAmountAsDouble() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (!super.hasMonetaryAmount()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alcen"
        },
        "content": "            // should never throw this as all PureMonetarySavings"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alcen"
        },
        "content": "            // can only be created with MonetaryAmounts"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new InvalidSavingsException(\"PureMonetarySavings without MonetaryAmount\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return super.getMonetaryAmount().get().getValue();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Gets the List of all Saveables represented in"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * this PureMonetarySavings. If there are no items,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * it returns an empty list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return List representing all Saveables in this"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * PureMonetarySavings (can be empty)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public List\u003cSaveable\u003e getListOfSaveables() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (super.hasSaveables()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return super.getSaveables().get();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new ArrayList\u003cSaveable\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Make a new copy of current PureMonetarySavings"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @return a copy of the current PureMonetarySavings"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public PureMonetarySavings copy() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Optional\u003cMonetaryAmount\u003e monetaryAmountCopy \u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                getMonetaryAmount().map(x -\u003e new MonetaryAmount(x.getValue()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Optional\u003cList\u003cSaveable\u003e\u003e savablesCopy \u003d getSaveables().map(x -\u003e new ArrayList\u003c\u003e(x));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        if (monetaryAmountCopy.isEmpty() \u0026\u0026 savablesCopy.isEmpty()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            return new PureMonetarySavings();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        } else if (monetaryAmountCopy.isEmpty()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            return new PureMonetarySavings(savablesCopy.get());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        } else if (savablesCopy.isEmpty()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            return new PureMonetarySavings(monetaryAmountCopy.get());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            return new PureMonetarySavings(monetaryAmountCopy.get(), savablesCopy.get());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 137,
      "nelsontky": 27
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/savings/Saveable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model.coupon.savings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Represents benefits (tangible and intangible) that coupons"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": " * may offer that are not necessarily associated with a"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": " * quantifiable monetary value."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Guaranteed to be immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class Saveable implements Comparable\u003cSaveable\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Saveables should not be blank \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \"or null, and must have a non-negative count field.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final String savedItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final int count;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructor for a Saveable, given a String"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * that represents the saved item. The count of"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * the Saveable will be set to 1, to represent"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * the existence of a singular item."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param s String representing saved item."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Saveable(String s) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.savedItem \u003d s;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.count \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructor for a Saveable, given a String"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * that represents the saved item as well as"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * the number of such items"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param s String representing saved item."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param count Int representing number of the"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *              saved item."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Saveable(String s, int count) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.savedItem \u003d s;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.count \u003d count;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Checks whether this String and this int forms"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * a valid Saveable value. Used by JsonAdaptedSaveable"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * and Savings classes."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param s The String to be checked."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static boolean isValidSaveableValue(String s, int count) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return s !\u003d null \u0026\u0026 !s.isBlank() \u0026\u0026 count \u003e 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Gets the value of this Saveable as a String. The"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * main difference from the toString() method is that"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * getValue() may return null in exceptional cases, and"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * getValue() will not change depending on the count,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * but toString() will never return null, and will"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * change depending on the count of the item."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return String stored in the Saveable."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.savedItem;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Gets the count value of this Saveable as an"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * int, which represents the quantity of the item"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * that is represented by the Saveable."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return Int representing count, or quantity,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     of this Saveable item."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public int getCount() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.count;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns a new Saveable representing the same"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * saved item, just with the count increased by"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * increment (new count \u003d old count + increment)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param increment Int representing the amount to"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                  increase the count by."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return Returns a new Saveable with the modified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     count obtained by adding the old count"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     and the increment provided."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Saveable increaseCount(int increment) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return new Saveable(this.savedItem, this.count + increment);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Given a Saveable that represents the same"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * saved item (same String value when getValue()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * is executed), adds the counts of both Saveables"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * together and returns a new Saveable with the"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * combined count value (with the same String"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * value representing Saveable item)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * \u003cp\u003eIf the Saveable does not represent the same"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * saved item, this instance of Saveable will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * be returned instead, with no changes."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param s The Saveable that represents the"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *          same item, to be \"combined\" with"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *          this Saveable."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return Returns a new Saveable with modified"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     count, or returns this."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Saveable increaseCount(Saveable s) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (!this.savedItem.equals(s.savedItem)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return this.increaseCount(s.count);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public int compareTo(Saveable p) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // compare count first, before comparing length of string"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (this.count \u003d\u003d p.count) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return (int) Math.signum(this.savedItem.length() - p.savedItem.length());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return (int) Math.signum(this.count - p.count);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else if (o instanceof Saveable) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alcen"
        },
        "content": "            Saveable s \u003d (Saveable) o;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return this.savedItem.equals(s.savedItem)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    \u0026\u0026 this.count \u003d\u003d s.count;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return Objects.hash(this.savedItem, this.count);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return count + \"x \" + this.savedItem;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 148
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/savings/Savings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model.coupon.savings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.exceptions.InvalidSavingsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Represents a certain amount of savings in CouponStash"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": " * that can be associated to a Coupon. Savings can either be"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": " * a monetary amount, a percentage of some original price, or"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": " * certain items that cannot be easily translatable to a"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": " * monetary value."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": " * \u003cp\u003eIt must be either one of the three. It"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": " * can also be a combination of a monetary amount and certain"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": " * unquantifiable items, or a percentage amount and certain"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": " * unquantifiable items, but should not be both a monetary"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": " * amount and a percentage amount."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": " * \u003cp\u003eThis is because coupons rarely offer both a monetary"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": " * value and a percentage value, for example you never see"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": " * (50% + $1) off for a box of chicken nuggets, but you only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": " * see 50% off by itself, or $1 off by itself."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class Savings implements Comparable\u003cSavings\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Savings should not be blank, \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \"and savings cannot have both a monetary amount and a percentage amount.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String EMPTY_LIST_ERROR \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "            \"ERROR: Parser identified that this Savings should have\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \"Saveables, but no Saveables received in class Savings\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "    // coupons could have a certain monetary value"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final Optional\u003cMonetaryAmount\u003e monetaryAmount;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "    // coupons could have a certain percentage value"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final Optional\u003cPercentageAmount\u003e percentage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "    // coupons could offer some gifts which their"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "    // value is not easily quantifiable"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final Optional\u003cList\u003cSaveable\u003e\u003e saveables;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Private constructor facilitating copy of current Savings"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private Savings("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            Optional\u003cMonetaryAmount\u003e monetaryAmount,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            Optional\u003cPercentageAmount\u003e percentage,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            Optional\u003cList\u003cSaveable\u003e\u003e saveables"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        this.monetaryAmount \u003d monetaryAmount;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        this.percentage \u003d percentage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        this.saveables \u003d saveables;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructor for a Savings value, given only"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * a MonetaryAmount representing the amount"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * in terms of some denomination of currency."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param monetaryAmount MonetaryAmount representing"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                       amount of money."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Savings(MonetaryAmount monetaryAmount) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.monetaryAmount \u003d Optional.of(monetaryAmount);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.percentage \u003d Optional.empty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.saveables \u003d Optional.empty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructor for a Savings value, given only"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * a PercentageAmount representing the percentage"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * off original price of a certain product."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param percentage PercentageAmount representing"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                   percentage off."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Savings(PercentageAmount percentage) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.monetaryAmount \u003d Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.percentage \u003d Optional.of(percentage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.saveables \u003d Optional.empty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructor for a Savings value, given only"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * certain Saveables that cannot be easily represented"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * in terms of numerical values"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param saveables The List of Saveables that are to be"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                  associated with this Savings. This"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                  List should have 1 item, at least."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Savings(List\u003cSaveable\u003e saveables) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alcen"
        },
        "content": "        checkArgument(isValidSaveablesList(saveables),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alcen"
        },
        "content": "                Savings.EMPTY_LIST_ERROR);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.monetaryAmount \u003d Optional.empty();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.percentage \u003d Optional.empty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.saveables \u003d Optional.of(condenseSaveablesList(saveables));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructor for a Savings value, given monetary"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * amount and other Saveables that cannot be easily"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * represented in terms of numerical values"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param monetaryAmount MonetaryAmount representing"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                       amount of money."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param saveables The List of Saveables that are to be"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                  associated with this Savings. This"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                  List should have 1 item, at least."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Savings(MonetaryAmount monetaryAmount, List\u003cSaveable\u003e saveables) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alcen"
        },
        "content": "        checkArgument(isValidSaveablesList(saveables),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alcen"
        },
        "content": "                Savings.EMPTY_LIST_ERROR);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.monetaryAmount \u003d Optional.of(monetaryAmount);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.percentage \u003d Optional.empty();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.saveables \u003d Optional.of(condenseSaveablesList(saveables));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructor for a Savings value, given percentage"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * amount and other Saveables that cannot be easily"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * represented in terms of numerical values"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param percentage PercentageAmount representing"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                   percentage off."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param saveables The List of Saveables that are to be"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                  associated with this Savings. This"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                  List should have 1 item, at least."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Savings(PercentageAmount percentage, List\u003cSaveable\u003e saveables) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alcen"
        },
        "content": "        checkArgument(isValidSaveablesList(saveables),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alcen"
        },
        "content": "                Savings.EMPTY_LIST_ERROR);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.monetaryAmount \u003d Optional.empty();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.percentage \u003d Optional.of(percentage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.saveables \u003d Optional.of(condenseSaveablesList(saveables));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Cloning constructor for Savings. The internal"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * MonetaryAmount, PercentageAmount and Saveables"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * will not be cloned, as they are immutable. But"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * the Saveables List will be cloned. Assumes s is a"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * valid Savings that obeys the rules of Savings"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * (at least one field, does not have both monetary"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * amount and percentage amount)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param s The Savings to be cloned."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Savings(Savings s) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.monetaryAmount \u003d s.monetaryAmount;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.percentage \u003d s.percentage;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.saveables \u003d s.saveables.map(ArrayList::new);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Checks whether this Savings has a MonetaryAmount."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return True, if this Savings has a MonetaryAmount."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     False, if it does not."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public boolean hasMonetaryAmount() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.monetaryAmount.isPresent();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Checks whether this Savings has a PercentageAmount."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return True, if this Savings has a PercentageAmount."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     False, if it does not."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public boolean hasPercentageAmount() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.percentage.isPresent();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Checks whether this Savings has Saveables."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return True, if this Savings has Saveables."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     False, if it does not."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public boolean hasSaveables() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.saveables.isPresent();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Optional\u003cMonetaryAmount\u003e getMonetaryAmount() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.monetaryAmount;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Optional\u003cPercentageAmount\u003e getPercentageAmount() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.percentage;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Optional\u003cList\u003cSaveable\u003e\u003e getSaveables() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.saveables;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Make a new copy of current Savings"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @return a copy of the current Savings"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public Savings copy() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Optional\u003cMonetaryAmount\u003e monetaryAmountCopy \u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                monetaryAmount.map(x -\u003e new MonetaryAmount(x.getValue()));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Optional\u003cPercentageAmount\u003e percentageCopy \u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                percentage.map(x -\u003e new PercentageAmount(x.getValue()));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Optional\u003cList\u003cSaveable\u003e\u003e savablesCopy \u003d saveables.map(x -\u003e new ArrayList\u003c\u003e(x));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return new Savings(monetaryAmountCopy, percentageCopy, savablesCopy);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public int compareTo(Savings s) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (this.hasMonetaryAmount() || s.hasMonetaryAmount()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alcen"
        },
        "content": "            // first, compare monetary amount"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alcen"
        },
        "content": "            if (this.hasMonetaryAmount() \u0026\u0026 s.hasMonetaryAmount()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alcen"
        },
        "content": "                return this.monetaryAmount.get().compareTo(s.monetaryAmount.get());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alcen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alcen"
        },
        "content": "                // prioritise the one with actual monetary amount"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alcen"
        },
        "content": "                return this.hasMonetaryAmount() ? 1 : -1;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alcen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else if (this.hasPercentageAmount() || s.hasPercentageAmount()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alcen"
        },
        "content": "            // next, compare percentage"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alcen"
        },
        "content": "            if (this.hasPercentageAmount() \u0026\u0026 s.hasPercentageAmount()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alcen"
        },
        "content": "                return this.percentage.get().compareTo(s.percentage.get());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alcen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alcen"
        },
        "content": "                // prioritise the one with percentage"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alcen"
        },
        "content": "                return this.hasPercentageAmount() ? 1 : -1;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alcen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else if (this.hasSaveables() || s.hasSaveables()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alcen"
        },
        "content": "            // last resort, compare saveables list"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alcen"
        },
        "content": "            if (this.hasSaveables() \u0026\u0026 s.hasSaveables()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alcen"
        },
        "content": "                return this.saveables.get().size() - s.saveables.get().size();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alcen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alcen"
        },
        "content": "                // error, either this or s has no information at all"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alcen"
        },
        "content": "                throw new InvalidSavingsException();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alcen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alcen"
        },
        "content": "            // error, both this or s have no information at all"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new InvalidSavingsException();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Given a custom money symbol, represent this"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Savings using that symbol, provided the savings"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * has some MonetaryAmount that will use that"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * custom money symbol."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param symbol String representing Savings,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *               with custom money symbol for"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *               exact monetary amounts."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return Returns a String that represents this"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     Savings, only with a custom money symbol."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public String getStringWithMoneySymbol(String symbol) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alcen"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (!this.hasMonetaryAmount() \u0026\u0026 !this.hasPercentageAmount()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alcen"
        },
        "content": "            sb.append(\"You get \");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alcen"
        },
        "content": "            sb.append(\"You save \");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.monetaryAmount.ifPresent(ma -\u003e {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alcen"
        },
        "content": "                sb.append(ma.getStringWithMoneySymbol(symbol));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alcen"
        },
        "content": "                sb.append(\", \");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alcen"
        },
        "content": "            });"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.percentage.ifPresent(pc -\u003e {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alcen"
        },
        "content": "                sb.append(pc.toString());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alcen"
        },
        "content": "                sb.append(\", \");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alcen"
        },
        "content": "            });"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.saveables.ifPresent(s -\u003e sb.append(\" and you get \"));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.saveables.ifPresent(savedItems -\u003e {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alcen"
        },
        "content": "            for (Saveable sv : savedItems) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alcen"
        },
        "content": "                sb.append(sv.toString());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alcen"
        },
        "content": "                sb.append(\", \");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alcen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alcen"
        },
        "content": "        });"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // remove last comma and space (extra length 2)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return sb.substring(0, sb.length() - 2);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else if (!(o instanceof Savings)) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alcen"
        },
        "content": "            Savings s \u003d (Savings) o;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return this.monetaryAmount.equals(s.monetaryAmount)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    \u0026\u0026 this.percentage.equals(s.percentage)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    // does not take order of saveables list into account"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    \u0026\u0026 ((this.saveables.isEmpty() \u0026\u0026 s.saveables.isEmpty())"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    || (this.saveables.isPresent() \u0026\u0026 s.saveables.isPresent()"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    \u0026\u0026 this.saveables.get().containsAll(s.saveables.get())));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return Objects.hash(this.monetaryAmount, this.percentage, this.saveables);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // use $ symbol as default"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.getStringWithMoneySymbol(\"$\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Utility function used by Savings.java to check if"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * the List\u0026lt;Saveable\u0026gt; is non-empty, and none"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * of the Saveables are empty Strings or null."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * This should never return false, as if no Saveables"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * are given, the SavingsParser would have determined"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * that the command did not have any Saveables and"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * not passed a list to Savings.java in the first place."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param list The list to be checked."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return True, if the list is non-empty."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     False if the list is empty."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static boolean isValidSaveablesList(List\u003cSaveable\u003e list) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return !list.isEmpty() \u0026\u0026 list.stream()"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .allMatch(sva -\u003e Saveable.isValidSaveableValue(sva.getValue(), sva.getCount()));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Given a Saveables list that possibly has duplicate items,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * find these duplicate items and put them together instead,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * increasing the count value of the item accordingly."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param list The original Saveables list."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return A new Saveables list without any duplicates."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static List\u003cSaveable\u003e condenseSaveablesList(List\u003cSaveable\u003e list) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "alcen"
        },
        "content": "        HashMap\u003cString, Integer\u003e nameToCountMap \u003d new HashMap\u003cString, Integer\u003e();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "alcen"
        },
        "content": "        list.forEach(sva -\u003e {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "alcen"
        },
        "content": "            nameToCountMap.merge(sva.getValue(), sva.getCount(), Integer::sum);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "alcen"
        },
        "content": "        });"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return nameToCountMap.entrySet().stream()"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .map(mapping -\u003e new Saveable(mapping.getKey(), mapping.getValue()))"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 311,
      "nelsontky": 27
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/coupon/savings/SavingsConversionUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model.coupon.savings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": " * A class that contains static methods for"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": " * converting Savings into PureMonetarySavings."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": " * This disentangles the two classes and makes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": " * them easier to test individually, avoiding"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": " * circular dependency."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class SavingsConversionUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Converts a Savings to a PureMonetarySavings. If"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * it does not already have a monetary amount, all"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * other fields will be discarded and monetary amount"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * set to 0."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param impureSavings The Savings that could possibly"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                      contain percentage amounts."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return Returns a PureMonetarySavings that represents"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     monetary amount saved if possible. If it is not"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     possible, monetary amount saved is set to 0."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static PureMonetarySavings convertToPure(Savings impureSavings) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (impureSavings.hasMonetaryAmount() \u0026\u0026 impureSavings.hasSaveables()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new PureMonetarySavings(impureSavings.getMonetaryAmount().get(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    impureSavings.getSaveables().get());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else if (impureSavings.hasMonetaryAmount()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new PureMonetarySavings(impureSavings.getMonetaryAmount().get());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else if (impureSavings.hasSaveables()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new PureMonetarySavings(impureSavings.getSaveables().get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new PureMonetarySavings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Converts a Savings to a PureMonetarySavings. Requires"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * the price of the original item so that the actual"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * monetary amount saved from the percentage amount"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * can be calculated. If the Savings does not have"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * percentage amounts, it will be converted anyway."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param impureSavings The Savings that could possibly"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                      contain percentage amounts."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param priceOfOriginal Price of the original item"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                        represented by a MonetaryAmount."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return Returns a PureMonetarySavings that represents"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     monetary amount saved if possible. If it is not"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     possible, monetary amount saved is set to 0."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static PureMonetarySavings convertToPure(Savings impureSavings, MonetaryAmount priceOfOriginal) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (impureSavings.hasPercentageAmount()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "            double percentage \u003d impureSavings.getPercentageAmount().get().getValue();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "            double originalPrice \u003d priceOfOriginal.getValue();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "            double amount \u003d Math.round(percentage * originalPrice) / 100d;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "            MonetaryAmount ma \u003d new MonetaryAmount(amount);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "            if (impureSavings.hasSaveables()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "                return new PureMonetarySavings(ma, impureSavings.getSaveables().get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "                return new PureMonetarySavings(ma);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return SavingsConversionUtil.convertToPure(impureSavings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 64
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/history/CommandTextHistory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "package csdev.couponstash.model.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " * This class stores all the commandText that was executed in STASH. Does not matter"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " * if the commands had errors, they are still stored and can be retrieved by pressing up or down on"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " * the keyboard."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "public class CommandTextHistory {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private static final String EMPTY_COMMAND \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private LinkedList\u003cString\u003e commandTextHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private int currIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CommandTextHistory() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        commandTextHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        commandTextHistory.push(EMPTY_COMMAND);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        currIndex \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Add commandText to history."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @param commandText commandText to add to history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void add(String commandText) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        commandTextHistory.pop(); // remove empty command from top of stack"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        commandTextHistory.push(commandText); // add newest command to top of stack"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        commandTextHistory.push(EMPTY_COMMAND); // add empty command to top of stack again"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        currIndex \u003d 0; // let index point to top of stack"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Undo the up button press."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @return commandText before up button was pressed"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public String getDown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return currIndex \u003d\u003d 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                ? EMPTY_COMMAND"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                : commandTextHistory.get(--currIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Gets the last input commandText."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @return last input commandText."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public String getUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return currIndex \u003d\u003d commandTextHistory.size() - 1"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                ? commandTextHistory.get(currIndex) // No more previous command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                : commandTextHistory.get(++currIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nelsontky": 52
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/history/HistoryManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "package csdev.couponstash.model.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.CouponStash;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " * Stores the historic state of the coupons."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelsontky"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "public class HistoryManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private List\u003cCouponStash\u003e couponStashStateList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private List\u003cString\u003e commandTextHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private int currStateIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public HistoryManager(CouponStash initialState) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        this.currStateIndex \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        this.couponStashStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        this.commandTextHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        this.couponStashStateList.add(initialState);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        // Empty string as initial state had no commands"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        this.commandTextHistory.add(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Add {@code newState} to {@code couponStashList}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * {@code command} is the command that triggered the commit."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Increments {@code currStateIndex} subsequently."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * If {@code currentStatePointer} is not pointing at the end of the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * {@code couponStashStateList}, all coupon stash states after the"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * {@code currentStatePointer} will be purged."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @param newState State to add to {@code couponStashList}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void commitState(CouponStash newState, String command) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        this.couponStashStateList.add(newState);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        this.commandTextHistory.add(command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        currStateIndex++;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        int stateSize \u003d couponStashStateList.size();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        if (currStateIndex !\u003d stateSize - 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            // Purging all coupon stash states and commandText histories after the currentStatePointer."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            for (int i \u003d currStateIndex + 1; i \u003c stateSize; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                couponStashStateList.remove(couponStashStateList.size() - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                commandTextHistory.remove(couponStashStateList.size() - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Returns the next commandText from the commandText history."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @return Next command string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public String getNextCommandText() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return this.commandTextHistory.get(currStateIndex + 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Revert to previous state. Decrements {@code currStateIndex} subsequently."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @return Previous state"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CouponStash undo() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.couponStashStateList.get(--currStateIndex).copy();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Revert to state before undo. Increments {@code currStateIndex} subsequently."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @return State before undo"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CouponStash redo() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.couponStashStateList.get(++currStateIndex).copy();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Check if there is a state to undo to."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @return True if there is a state to undo to, false otherwise"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return currStateIndex !\u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Check if there is a state to redo to."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * @return True if there is a state to redo to, false otherwise"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return currStateIndex !\u003d couponStashStateList.size() - 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 2,
      "nelsontky": 88
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/tag/Tag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Represents a Tag in the CouponStash."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.CouponStash;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ReadOnlyCouponStash;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Condition;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.ExpiryDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Limit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.PromoCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.StartDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Usage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.MonetaryAmount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.PercentageAmount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Saveable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Savings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Contains utility methods for populating {@code CouponStash} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static Coupon[] getSampleCoupons() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return new Coupon[] {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            new Coupon(new Name(\"Auntie Azah\u0027s Nasi Lemak\"), new PromoCode(\"AZAH BAIK LA\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                new Savings(new MonetaryAmount(5.50)), new ExpiryDate(\"30-12-2020\"), new StartDate(\"01-12-2020\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    new Usage(\"0\"), new Limit(\"1\"), getTagSet(\"sedap\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    new Condition(\"Min spending of $15 on sambal sauce\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            new Coupon(new Name(\"Boszini Clothing\"), new PromoCode(\"NAKED SUMMER\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                new Savings(new PercentageAmount(25d)), new ExpiryDate(\"30-11-2020\"), new StartDate(\"01-11-2020\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    new Usage(\"0\"), new Limit(\"1\"), getTagSet(\"trendy\", \"cheap\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    new Condition(\"Only applicable to selected beachwear\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            new Coupon(new Name(\"Capple oPhone\"), new PromoCode(\"ILOVECAP_5.0\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                new Savings(new PercentageAmount(12.5d)), new ExpiryDate(\"30-10-2020\"), new StartDate(\"01-10-2020\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    new Usage(\"0\"), new Limit(\"1\"), getTagSet(\"silver\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    new Condition(\"Need to trade in one apple phone\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            new Coupon(new Name(\"Daidas Shoes\"), new PromoCode(\"JUSTDOIT\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "                new Savings(new PercentageAmount(10d),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "                        Arrays.asList(new Saveable(\"Water Bottle\"), new Saveable(\"Notebook\"))),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                            new ExpiryDate(\"30-09-2020\"), new StartDate(\"01-08-2020\"), new Usage(\"0\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    new Limit(\"1\"), getTagSet(\"whilestockslast\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    new Condition(\"While Stocks Last\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            new Coupon(new Name(\"IKEEA\"), new PromoCode(\"BRATTBY_IS_YOUR_FRIEND\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "                new Savings(new MonetaryAmount(1d),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        Arrays.asList(new Saveable(\"Brattby Bag\"))), new ExpiryDate(\"01-10-2020\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    new StartDate(\"01-09-2020\"), new Usage(\"0\"), new Limit(\"1\"), getTagSet(\"limitededition\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    new Condition(\"Meatball are made of horsemeat\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            new Coupon(new Name(\"Rab\u0027s Kebabs\"), new PromoCode(\"UPZ KEBABZ\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                new Savings(new PercentageAmount(100d)), new ExpiryDate(\"11-09-2020\"), new StartDate(\"01-8-2020\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    new Usage(\"0\"), new Limit(\"1\"), getTagSet(\"lunch\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    new Condition(\"Muslim students get an additional begedil (Worth $50)\"))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static ReadOnlyCouponStash getSampleCouponStash() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CouponStash sampleAb \u003d new CouponStash();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "        for (Coupon sampleCoupon : getSampleCoupons()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "            sampleAb.addCoupon(sampleCoupon);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 1,
      "ChesterSim": 2,
      "alcen": 20,
      "KEVVVINN": 28,
      "-": 24
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/storage/CouponStashStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.CouponStash;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ReadOnlyCouponStash;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Represents a storage for {@link CouponStash}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "public interface CouponStashStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "    Path getCouponStashFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns CouponStash data as a {@link ReadOnlyCouponStash}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "    Optional\u003cReadOnlyCouponStash\u003e readCouponStash() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @see #getCouponStashFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "    Optional\u003cReadOnlyCouponStash\u003e readCouponStash(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Saves the given {@link ReadOnlyCouponStash} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param couponStash cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "    void saveCouponStash(ReadOnlyCouponStash couponStash) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @see #saveCouponStash(ReadOnlyCouponStash)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "    void saveCouponStash(ReadOnlyCouponStash couponStash, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 16,
      "-": 30
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/storage/JsonAdaptedCoupon.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Archived;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Condition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.ExpiryDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Limit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.coupon.PromoCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.RemindDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.StartDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Usage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.DateSavingsSumMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Savings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Jackson-friendly version of {@link Coupon}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "class JsonAdaptedCoupon {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Coupon\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private final String promoCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final JsonAdaptedSavings savingsPerUse;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private final String expiryDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private final String usage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private final String limit;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private final String remindDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private final String archived;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final JsonAdaptedDssm totalSaved;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private final String condition;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructs a {@code JsonAdaptedCoupon} with the given coupon details."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public JsonAdaptedCoupon(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                             @JsonProperty(\"promoCode\") String promoCode,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "                             @JsonProperty(\"savingsPerUse\") JsonAdaptedSavings savingsPerUse,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                             @JsonProperty(\"expiry date\") String expiryDate,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                             @JsonProperty(\"start date\") String startDate,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                             @JsonProperty(\"usage\") String usage,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                             @JsonProperty(\"limit\") String limit,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "                             @JsonProperty(\"totalSaved\") JsonAdaptedDssm totalSaved,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                             @JsonProperty(\"remind date\") String remindDate,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                             @JsonProperty(\"condition\") String condition,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                             @JsonProperty(\"archived\") String archived"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        this.promoCode \u003d promoCode;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.savingsPerUse \u003d savingsPerUse;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        this.usage \u003d usage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        this.limit \u003d limit;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.totalSaved \u003d totalSaved;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        this.remindDate \u003d remindDate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        this.condition \u003d condition;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        this.archived \u003d archived;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Converts a given {@code Coupon} into this class for Jackson use."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public JsonAdaptedCoupon(Coupon source) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        promoCode \u003d source.getPromoCode().value;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alcen"
        },
        "content": "        savingsPerUse \u003d new JsonAdaptedSavings(source.getSavingsForEachUse());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        expiryDate \u003d source.getExpiryDate().value;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        startDate \u003d source.getStartDate().value;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        usage \u003d source.getUsage().value;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        limit \u003d source.getLimit().value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "        totalSaved \u003d new JsonAdaptedDssm(source.getSavingsMap());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        remindDate \u003d source.getRemindDate().toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        condition \u003d source.getCondition().value;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        archived \u003d source.getArchived().toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Converts this Jackson-friendly adapted coupon object into the model\u0027s {@code Coupon} object."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted coupon."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Coupon toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alcen"
        },
        "content": "        final List\u003cTag\u003e couponTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alcen"
        },
        "content": "            couponTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        if (promoCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, PromoCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        final PromoCode modelPromoCode \u003d new PromoCode(promoCode);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (savingsPerUse \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Savings.class.getSimpleName()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alcen"
        },
        "content": "        final Savings modelSavings \u003d savingsPerUse.toModelType();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        if (expiryDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                    ExpiryDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        if (!ExpiryDate.isValidExpiryDate(expiryDate)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            throw new IllegalValueException(ExpiryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        final ExpiryDate modelExpiryDate \u003d new ExpiryDate(expiryDate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                    StartDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        if (!StartDate.isValidStartDate(startDate)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            throw new IllegalValueException(StartDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        final StartDate modelStartDate \u003d new StartDate(startDate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (usage \u003d\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Usage.class.getSimpleName()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (!Usage.isValidUsage(usage)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            throw new IllegalValueException(Usage.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        final Usage modelUsage \u003d new Usage(usage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (limit \u003d\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Limit.class.getSimpleName()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (!Limit.isValidLimit(limit)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            throw new IllegalValueException(Limit.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        final Limit modelLimit \u003d new Limit(limit);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (condition \u003d\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Condition.class.getSimpleName()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        final Condition modelCondition \u003d new Condition(condition);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (!Archived.isValidState(archived)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            throw new IllegalValueException(Archived.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        final Archived modelArchived \u003d new Archived(archived);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alcen"
        },
        "content": "        final DateSavingsSumMap modelTotalSaved;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (totalSaved \u003d\u003d null) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alcen"
        },
        "content": "            // could not find totalSaved data"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alcen"
        },
        "content": "            // just set total savings to nothing"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alcen"
        },
        "content": "            modelTotalSaved \u003d new DateSavingsSumMap();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alcen"
        },
        "content": "            modelTotalSaved \u003d totalSaved.toModelType();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        if (!RemindDate.isValidRemindDate(remindDate, expiryDate)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            throw new IllegalValueException(RemindDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        final RemindDate modelRemindDate \u003d new RemindDate(remindDate, expiryDate);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alcen"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(couponTags);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return new Coupon(modelName, modelPromoCode, modelSavings,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                modelExpiryDate, modelStartDate, modelUsage, modelLimit,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                modelTags, modelTotalSaved, modelRemindDate, modelCondition,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                modelArchived);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 36,
      "Denise-Ng": 29,
      "alcen": 45,
      "KEVVVINN": 22,
      "nelsontky": 12,
      "-": 52
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/storage/JsonAdaptedDssm.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.commons.util.DateUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.DateSavingsSumMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.PureMonetarySavings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Jackson-friendly version of {@link DateSavingsSumMap}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": " * DateSavingsSumMap is used to store earned savings"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": " * information for Coupons, specifically which savings"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": " * were accumulated on a given date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class JsonAdaptedDssm {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final List\u003cJsonAdaptedDateSavingsPair\u003e mappings \u003d new ArrayList\u003cJsonAdaptedDateSavingsPair\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public JsonAdaptedDssm(@JsonProperty(\"mappings\") List\u003cJsonAdaptedDateSavingsPair\u003e mappings) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (mappings !\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.mappings.addAll(mappings);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public JsonAdaptedDssm(DateSavingsSumMap dssm) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "        dssm.forEach((ld, pms) -\u003e mappings.add(new JsonAdaptedDateSavingsPair(ld, pms)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Converts the JsonAdaptedDssm to the Model\u0027s"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * DateSavingsSumMap object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return Returns the DateSavingsSumMap that corresponds"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *      to this JsonAdaptedDssm."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public DateSavingsSumMap toModelType() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "        DateSavingsSumMap modelDssm \u003d new DateSavingsSumMap();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.mappings.forEach("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "            jdsp -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    modelDssm.add(jdsp.getDate(), jdsp.getSavings());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "                } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    // ignore invalid pairs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "            });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return modelDssm;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * This class is used to represent a key-value"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * mapping for the JsonAdaptedDssm, specifically"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * a mapping from LocalDate to PureMonetarySavings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static class JsonAdaptedDateSavingsPair {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "        private final String date;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "        private final JsonAdaptedPureMonetarySavings savings;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public JsonAdaptedDateSavingsPair(@JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "                                          @JsonProperty(\"savings\") JsonAdaptedPureMonetarySavings savings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.savings \u003d savings;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public JsonAdaptedDateSavingsPair(LocalDate ld, PureMonetarySavings pms) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            this.date \u003d DateUtil.formatDate(ld);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.savings \u003d new JsonAdaptedPureMonetarySavings(pms);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public LocalDate getDate() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return DateUtil.parseString(date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public PureMonetarySavings getSavings() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return savings.toModelType();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 3,
      "alcen": 78
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/storage/JsonAdaptedPureMonetarySavings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.MonetaryAmount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.PureMonetarySavings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Saveable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Jackson-friendly version of {@link PureMonetarySavings}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": " * PureMonetarySavings is used to represent total savings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": " * earned from using a certain Coupon, in contrast to"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Savings which represents the savings for each use."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Hence, this class has to be saved to the file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": " * separately from Savings."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class JsonAdaptedPureMonetarySavings {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final Double monetaryAmount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final List\u003cJsonAdaptedSaveable\u003e saveables;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructs a {@code JsonAdaptedPureMonetarySavings} with the given savings details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * At least one field should be non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param ma Double representing monetary amount (could be null)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param sva List of JsonAdaptedSaveables (could be null)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public JsonAdaptedPureMonetarySavings(@JsonProperty(\"monetaryAmount\") Double ma,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "                                          @JsonProperty(\"saveables\") List\u003cJsonAdaptedSaveable\u003e sva) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.monetaryAmount \u003d ma;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.saveables \u003d sva;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructor for a JsonAdaptedPureMonetarySavings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Note that PureMonetarySavings pms is assumed to be"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * a valid PureMonetarySavings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param pms The PureMonetarySavings to be used."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public JsonAdaptedPureMonetarySavings(PureMonetarySavings pms) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.monetaryAmount \u003d pms.getMonetaryAmount().map(MonetaryAmount::getValue).orElse(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Function\u003cList\u003cSaveable\u003e, List\u003cJsonAdaptedSaveable\u003e\u003e mapToJson \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "            svaList -\u003e svaList.stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    .map(JsonAdaptedSaveable::new)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.saveables \u003d pms.getSaveables().map(mapToJson).orElse(null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Converts this Jackson-friendly adapted PureMonetarySavings"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * object into the Model\u0027s {@code PureMonetarySavings} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @throws IllegalValueException If there were any data"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     constraints violated in the adapted PureMonetarySavings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public PureMonetarySavings toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (monetaryAmount \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new IllegalValueException(PureMonetarySavings.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "        List\u003cSaveable\u003e modelSaveables \u003d new ArrayList\u003cSaveable\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (saveables !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "            for (JsonAdaptedSaveable jsv : saveables) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "                modelSaveables.add(jsv.toModelType());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (modelSaveables.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new PureMonetarySavings(new MonetaryAmount(monetaryAmount));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new PureMonetarySavings(new MonetaryAmount(monetaryAmount), modelSaveables);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 82
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/storage/JsonAdaptedSaveable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Saveable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Jackson-friendly version of {@link Saveable}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class JsonAdaptedSaveable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final String saveableDesc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final int count;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructs a {@code JsonAdaptedSaveable} with the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * given {@code saveableDesc}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * \u003cp\u003eNote that String saveableDesc should be"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * non-null and non-empty, even though this"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * is not actually checked by the constructor."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Int count should also be greater than zero."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * \u003cp\u003eThis will be checked when trying to convert"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * JsonAdaptedSaveables to a Model Saveables,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * however."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param saveableDesc The String to be used."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param count Int representing count of the item."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public JsonAdaptedSaveable(@JsonProperty(\"saveableDesc\") String saveableDesc,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "                               @JsonProperty(\"count\") int count) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.saveableDesc \u003d saveableDesc;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.count \u003d count;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructor for a JsonAdaptedSaveable."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Note that Saveable sva is assumed to be"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * a valid Saveable (with non-empty String"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * and positive non-zero count)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param sva The Saveable to be used."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public JsonAdaptedSaveable(Saveable sva) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.saveableDesc \u003d sva.getValue();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.count \u003d sva.getCount();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Converts this Jackson-friendly adapted Saveable object into"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * the Model\u0027s {@code Saveable} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @throws IllegalValueException If there were any data"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     constraints violated in the adapted Saveable. The"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     most likely error would result from an empty String"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     as Saveables should not be empty Strings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Saveable toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (!Saveable.isValidSaveableValue(this.saveableDesc, this.count)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new IllegalValueException(Saveable.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return new Saveable(this.saveableDesc);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 66
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/storage/JsonAdaptedSavings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.MonetaryAmount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.PercentageAmount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Saveable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Savings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Jackson-friendly version of {@link Savings}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class JsonAdaptedSavings {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final Double monetaryAmount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final Double percentageAmount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final List\u003cJsonAdaptedSaveable\u003e saveables;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructs a {@code JsonAdaptedSavings} with the given savings details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param ma Double representing monetary amount (could be null)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param pc Double representing percentage amount (could be null)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param sva List of JsonAdaptedSaveables (could be null)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public JsonAdaptedSavings(@JsonProperty(\"monetaryAmount\") Double ma,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "                              @JsonProperty(\"percentageAmount\") Double pc,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "                              @JsonProperty(\"saveables\") List\u003cJsonAdaptedSaveable\u003e sva) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.monetaryAmount \u003d ma;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.percentageAmount \u003d pc;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.saveables \u003d sva;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructor for a JsonAdaptedSavings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Note that Savings sv is assumed to be"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * a valid Savings that does not violate"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * rules like not having both monetary amount"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * and percentage amount, or having at least"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * one non-empty field."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param sv The Savings to be used."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public JsonAdaptedSavings(Savings sv) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.monetaryAmount \u003d sv.getMonetaryAmount().map(MonetaryAmount::getValue).orElse(null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.percentageAmount \u003d sv.getPercentageAmount().map(PercentageAmount::getValue).orElse(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Function\u003cList\u003cSaveable\u003e, List\u003cJsonAdaptedSaveable\u003e\u003e mapToJson \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "            svaList -\u003e svaList.stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    .map(JsonAdaptedSaveable::new)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.saveables \u003d sv.getSaveables().map(mapToJson).orElse(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Converts this Jackson-friendly adapted Savings object into"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * the Model\u0027s {@code Savings} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @throws IllegalValueException If there were any data"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     constraints violated in the adapted Savings (e.g."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     the JsonAdaptedSavings contains both a monetary"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     amount and a percentage amount, or does not"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     contain any fields at all)."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Savings toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if ((monetaryAmount \u003d\u003d null \u0026\u0026 percentageAmount \u003d\u003d null \u0026\u0026 saveables \u003d\u003d null)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "                || (monetaryAmount !\u003d null \u0026\u0026 percentageAmount !\u003d null)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new IllegalValueException(Savings.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else if (saveables !\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "            List\u003cSaveable\u003e modelSaveables \u003d new ArrayList\u003cSaveable\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alcen"
        },
        "content": "            for (JsonAdaptedSaveable jsv : saveables) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": "                modelSaveables.add(jsv.toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alcen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alcen"
        },
        "content": "            if (monetaryAmount !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alcen"
        },
        "content": "                return new Savings(new MonetaryAmount(monetaryAmount), modelSaveables);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alcen"
        },
        "content": "            } else if (percentageAmount !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alcen"
        },
        "content": "                return new Savings(new PercentageAmount(percentageAmount), modelSaveables);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alcen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alcen"
        },
        "content": "                return new Savings(modelSaveables);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alcen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else if (monetaryAmount !\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new Savings(new MonetaryAmount(monetaryAmount));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new Savings(new PercentageAmount(percentageAmount));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 96
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/storage/JsonAdaptedStashSettings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.StashSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.moneysymbol.MoneySymbol;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Jackson-friendly version of {@link StashSettings}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Unlike StashSettings and MoneySymbol, this class"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": " * is immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class JsonAdaptedStashSettings {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final String moneySymbol;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructs a JsonAdaptedStashSettings using the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * properties from the JSON file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param ms String representing money symbol."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public JsonAdaptedStashSettings(@JsonProperty(\"moneySymbol\") String ms) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.moneySymbol \u003d ms;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructs a JsonAdaptedStashSettings using the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * application\u0027s StashSettings. When this constructor"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * is called, the current String set in MoneySymbol"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * will be used to create the JsonAdaptedStashSettings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param ss The application\u0027s StashSettings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public JsonAdaptedStashSettings(StashSettings ss) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.moneySymbol \u003d ss.getMoneySymbol().getString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Converts this JsonAdaptedStashSettings to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * normal StashSettings used in Coupon Stash."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return StashSettings object used in the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *         Coupon Stash application."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public StashSettings convertToNormalType() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // ensure that money symbol is set to the String"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "        MoneySymbol ms \u003d MoneySymbol.getMoneySymbol(moneySymbol);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "        ms.setString(moneySymbol);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return new StashSettings(ms);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 52
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/storage/JsonAdaptedTag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/storage/JsonAdaptedUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Jackson-friendly version of {@link ReadOnlyUserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Although StashSettings and MoneySymbol in UserPrefs"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": " * are mutable, this class is immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class JsonAdaptedUserPrefs {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private JsonAdaptedStashSettings stashSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private Path couponStashFilePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructs a JsonAdaptedStashSettings using the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * properties from the JSON file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public JsonAdaptedUserPrefs(@JsonProperty(\"guiSettings\") GuiSettings guiSettings,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "                                @JsonProperty(\"stashSettings\") JsonAdaptedStashSettings stashSettings,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "                                @JsonProperty(\"couponStashFilePath\") Path couponStashFilePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.stashSettings \u003d stashSettings;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.couponStashFilePath \u003d couponStashFilePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Instantiates a new JsonAdaptedUserPrefs using the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * UserPrefs provided. When this constructor is called,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * JsonAdaptedUserPrefs (immutable) will be created with"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * the current values stored in UserPrefs (mutable)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param up The UserPrefs to be adapted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public JsonAdaptedUserPrefs(ReadOnlyUserPrefs up) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.guiSettings \u003d up.getGuiSettings();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.stashSettings \u003d new JsonAdaptedStashSettings(up.getStashSettings());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.couponStashFilePath \u003d up.getCouponStashFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Converts this JsonAdaptedStashSettings to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * normal UserPrefs Object used in Coupon Stash."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return UserPrefs object used in the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *         Coupon Stash application."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public UserPrefs convertToNormalType() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "        UserPrefs newUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (this.guiSettings !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "            newUserPrefs.setGuiSettings(this.guiSettings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (this.stashSettings !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "            newUserPrefs.setStashSettings(this.stashSettings.convertToNormalType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (this.couponStashFilePath !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "            newUserPrefs.setCouponStashFilePath(this.couponStashFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return newUserPrefs;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 66
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/storage/JsonCouponStashStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ReadOnlyCouponStash;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": " * A class to access CouponStash data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class JsonCouponStashStorage implements CouponStashStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCouponStashStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public JsonCouponStashStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Path getCouponStashFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Optional\u003cReadOnlyCouponStash\u003e readCouponStash() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return readCouponStash(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Similar to {@link #readCouponStash()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Optional\u003cReadOnlyCouponStash\u003e readCouponStash(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Optional\u003cJsonSerializableCouponStash\u003e jsonCouponStash \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "                filePath, JsonSerializableCouponStash.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (!jsonCouponStash.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return Optional.of(jsonCouponStash.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void saveCouponStash(ReadOnlyCouponStash couponStash) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "        saveCouponStash(couponStash, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Similar to {@link #saveCouponStash(ReadOnlyCouponStash)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void saveCouponStash(ReadOnlyCouponStash couponStash, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": "        requireNonNull(couponStash);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCouponStash(couponStash), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 26,
      "-": 54
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/storage/JsonSerializableCouponStash.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.CouponStash;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ReadOnlyCouponStash;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": " * An Immutable CouponStash that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "@JsonRootName(value \u003d \"couponstash\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "class JsonSerializableCouponStash {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_COUPON \u003d \"Coupons list contains duplicate coupon(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final List\u003cJsonAdaptedCoupon\u003e coupons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructs a {@code JsonSerializableCouponStash} with the given coupons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public JsonSerializableCouponStash(@JsonProperty(\"coupons\") List\u003cJsonAdaptedCoupon\u003e coupons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.coupons.addAll(coupons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Converts a given {@code ReadOnlyCouponStash} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCouponStash}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public JsonSerializableCouponStash(ReadOnlyCouponStash source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "        coupons.addAll(source.getCouponList().stream().map(JsonAdaptedCoupon::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Converts this CouponStash into the model\u0027s {@code CouponStash} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public CouponStash toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CouponStash couponStash \u003d new CouponStash();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "        for (JsonAdaptedCoupon jsonAdaptedCoupon : coupons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "            Coupon coupon \u003d jsonAdaptedCoupon.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "            if (couponStash.hasCoupon(coupon)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_COUPON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "            couponStash.addCoupon(coupon);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return couponStash;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 26,
      "-": 34
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/storage/JsonUserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, JsonAdaptedUserPrefs.class)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .map(JsonAdaptedUserPrefs::convertToNormalType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonAdaptedUserPrefs(userPrefs), filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 8,
      "-": 40
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ReadOnlyCouponStash;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "public interface Storage extends CouponStashStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "    Path getCouponStashFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "    Optional\u003cReadOnlyCouponStash\u003e readCouponStash() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "    void saveCouponStash(ReadOnlyCouponStash couponStash) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ReadOnlyCouponStash;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Manages storage of CouponStash data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private CouponStashStorage couponStashStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public StorageManager(CouponStashStorage couponStashStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.couponStashStorage \u003d couponStashStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CouponStash methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Path getCouponStashFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return couponStashStorage.getCouponStashFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Optional\u003cReadOnlyCouponStash\u003e readCouponStash() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return readCouponStash(couponStashStorage.getCouponStashFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Optional\u003cReadOnlyCouponStash\u003e readCouponStash(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return couponStashStorage.readCouponStash(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void saveCouponStash(ReadOnlyCouponStash couponStash) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "        saveCouponStash(couponStash, couponStashStorage.getCouponStashFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void saveCouponStash(ReadOnlyCouponStash couponStash, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alcen"
        },
        "content": "        couponStashStorage.saveCouponStash(couponStash, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 21,
      "-": 56
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/storage/UserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/ui/CalendarPane.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.commons.util.DateUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * Calendar that is displayed at the right."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "public class CalendarPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CalendarPane.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private static final String FXML \u003d \"CalendarPane.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private static final int MAX_NUMBER_OF_WEEKS_TO_SHOW_PER_MONTH \u003d 6;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private static final int NUMBER_OF_DAYS_IN_A_WEEK \u003d 7;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private static final String MAX_YEAR_MESSAGE \u003d \"You have reached the maximum calendar year.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private static final String MIN_YEAR_MESSAGE \u003d \"You have reached the minimum calendar year.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private static final DateTimeFormatter DATE_FORMATTER \u003d DateUtil.DATE_TIME_FORMATTER_FOR_CALENDAR;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private static final DateTimeFormatter MONTH_YEAR_FORMATTER \u003d DateUtil.MONTH_YEAR_FORMATTER_FOR_CALENDAR;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private ArrayList\u003cDateCell\u003e dateCells;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private YearMonth currentYearMonth;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private ObservableList\u003cCoupon\u003e coupons;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private Text calendarPaneHeader;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private Text calendarHeader;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private GridPane calendarGrid;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Creates a new CalendarPane."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public CalendarPane(Logic logic) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        currentYearMonth \u003d YearMonth.now();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        dateCells \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.coupons \u003d logic.getFilteredCouponList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        coupons.addListener((ListChangeListener\u003c? super Coupon\u003e) change -\u003e fillUpCalendar());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        initializeUi();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        fillUpCalendar();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Initializes the calendar."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private void initializeUi() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_NUMBER_OF_WEEKS_TO_SHOW_PER_MONTH; i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            for (int j \u003d 0; j \u003c NUMBER_OF_DAYS_IN_A_WEEK; j++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                DateCell dateCell \u003d new DateCell(logic);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                addDateCellToArray(dateCell);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                StackPane calendarDateStackPane \u003d dateCell.getCalendarDateStackPane();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                calendarGrid.add(calendarDateStackPane, j, i);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Adds the specified {@DateCell} to the ArrayList of {@DateCells}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private void addDateCellToArray(DateCell dateCell) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        dateCells.add(dateCell);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Fills up the calendar with current month and year."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private void fillUpCalendar() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        updateCalendarTitle();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        LocalDate date \u003d getDateOfFirstMonday();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        for (DateCell dateCell : dateCells) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            setDateCell(dateCell, date); //sets DateCell\u0027s date, text, coupons and circle"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            dateCell.addChildren();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            date \u003d date.plusDays(1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Updates the calendar\u0027s title to the current month and year."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private void updateCalendarTitle() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String calendarTitleText \u003d currentYearMonth.format(MONTH_YEAR_FORMATTER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        calendarHeader.setText(calendarTitleText);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns a {@code LocalDate} instance of the first Monday before or on the first day of the month."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @return A {@code LocalDate} instance of the first Monday."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private LocalDate getDateOfFirstMonday() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        LocalDate dateOfFirstMonday \u003d currentYearMonth.atDay(1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        while (getDayOfWeekInInt(dateOfFirstMonday.getDayOfWeek().toString()) !\u003d 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            dateOfFirstMonday \u003d dateOfFirstMonday.minusDays(1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return dateOfFirstMonday;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Sets the display date of the specified {@code DateCell} to the specified {@code LocalDate}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param dateCell The specified {@code DateCell}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param date     The specified {@code LocalDate}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private void setDateCell(DateCell dateCell, LocalDate date) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        StackPane dateStackPane \u003d dateCell.getCalendarDateStackPane();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        dateStackPane.getChildren().clear();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        setDateCellDate(dateCell, date); //set DateCell\u0027s date"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        addExpiringCoupons(dateCell); //add coupons expiring on the date"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        setDateCellText(dateCell, date);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        setDateCellCircle(dateCell, date); //set DateCell\u0027s circle\u0027s color"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Sets the {@LocalDate} of the {@DateCell}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param dateCell The specified {@DateCell}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param date     The specified {@LocalDate}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private void setDateCellDate(DateCell dateCell, LocalDate date) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        dateCell.setDate(date);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Adds all coupons expiring on the specified {@code LocalDate} to the list in the specified {@code DateCell}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param dateCell The specified {@DateCell}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private void addExpiringCoupons(DateCell dateCell) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        dateCell.clearCoupons();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        LocalDate date \u003d dateCell.getDate();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        for (Coupon coupon : coupons) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            LocalDate couponExpiryDate \u003d coupon.getExpiryDate().getDate();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            if (date.isEqual(couponExpiryDate)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                dateCell.addCoupon(coupon);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Sets the formatted text of the specified {@DateCell}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param dateCell The specified {@DateCell}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param date     The specified {@LocalDate}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private void setDateCellText(DateCell dateCell, LocalDate date) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        boolean visible \u003d isVisible(date);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        Text dateText \u003d new Text(String.format(\"%02d\", date.getDayOfMonth()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        dateText.setFont(new Font(\"Segoe Ui SemiBold\", 14));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        dateText.setFill(Paint.valueOf(\"#FFFFFF\"));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        if (visible) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            if (dateIsInCurrentMonth(date)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                dateText.setOpacity(1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                dateText.setOpacity(0.5);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            dateText.setOpacity(0);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        dateCell.setText(dateText);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns true if the date is visible on the current Calendar."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param date Current date."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @return Boolean of whether the date is visible on the current Calendar."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private boolean isVisible(LocalDate date) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        int numDaysToOverflow \u003d getNumberOfDaysToOverflow();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        int dateOfMonth \u003d date.getDayOfMonth();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        if (dateIsInNextMonth(date) \u0026\u0026 dateOfMonth \u003e numDaysToOverflow) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns the number of days in the next month allowed on the current Calendar."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @return {@int} of the number of days in the next month allowed on the current Calender."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private int getNumberOfDaysToOverflow() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String lastDayOfTheMonth \u003d (currentYearMonth.atDay(currentYearMonth.lengthOfMonth()))"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                .getDayOfWeek().toString();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return NUMBER_OF_DAYS_IN_A_WEEK - getDayOfWeekInInt(lastDayOfTheMonth) - 1;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Sets the formatted circle of the specified {@DateCell}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param dateCell The specified {@DateCell}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param date     The specified {@LocalDate}."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private void setDateCellCircle(DateCell dateCell, LocalDate date) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        Circle circle \u003d new Circle(15);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        StackPane.setAlignment(circle, Pos.CENTER);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        if (dateCell.getNumberOfCoupons() \u003e 0 \u0026\u0026 dateIsInCurrentMonth(date)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            circle.setFill(Paint.valueOf(\"#02075D\"));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            dateCell.setCircle(circle);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            dateCell.setCursor();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } else if (date.isEqual(LocalDate.now())) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            circle.setFill(Paint.valueOf(\"#DF6D54\"));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            dateCell.setCircle(circle);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            circle \u003d new Circle(0);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            dateCell.setCircle(circle);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns a boolean if the specified {@LocalDate} is in the current month."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param date The specified {@LocalDate}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @return Boolean if the specified {@LocalDate} is in the current month."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private boolean dateIsInCurrentMonth(LocalDate date) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return date.getMonthValue() \u003d\u003d currentYearMonth.getMonthValue();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns a boolean if the specified {@LocalDate} is in the next month."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param date The specified {@LocalDate}."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @return Boolean if the specified {@LocalDate} is in the next month."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private boolean dateIsInNextMonth(LocalDate date) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return date.minusMonths(1).getMonthValue() \u003d\u003d currentYearMonth.getMonthValue();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Updates the calendar with next month\u0027s data."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @throws IllegalValueException If the next month is after the maximum year."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void updateCalendarWithNextMonth() throws IllegalValueException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        if (DateUtil.isValidYear(currentYearMonth.plusMonths(1).getYear())) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            closeAllDisplayedCouponWindows();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            currentYearMonth \u003d currentYearMonth.plusMonths(1);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            fillUpCalendar();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            logger.info(\"Calendar showing next month.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            throw new IllegalValueException(MAX_YEAR_MESSAGE);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Updates the calendar with previous month\u0027s data."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @throws IllegalValueException If the previous month is before the minimum year."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void updateCalendarWithPreviousMonth() throws IllegalValueException {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        if (DateUtil.isValidYear(currentYearMonth.minusMonths(1).getYear())) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            closeAllDisplayedCouponWindows();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            currentYearMonth \u003d currentYearMonth.minusMonths(1);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            fillUpCalendar();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            logger.info(\"Calender showing previous month.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            throw new IllegalValueException(MIN_YEAR_MESSAGE);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Closes all displayed coupon windows."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private void closeAllDisplayedCouponWindows() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        for (DateCell dateCell : dateCells) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            dateCell.closeDisplayedCoupons();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns an integer corresponding to the specified day of {@String}."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param day The specified Day {@String}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private int getDayOfWeekInInt(String day) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        int dayInInt;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        switch (day) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        case \"MONDAY\":"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            dayInInt \u003d 0;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        case \"TUESDAY\":"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            dayInInt \u003d 1;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        case \"WEDNESDAY\":"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            dayInInt \u003d 2;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        case \"THURSDAY\":"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            dayInInt \u003d 3;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        case \"FRIDAY\":"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            dayInInt \u003d 4;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        case \"SATURDAY\":"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            dayInInt \u003d 5;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        case \"SUNDAY\":"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            dayInInt \u003d 6;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            dayInInt \u003d 0;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return dayInInt;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Changes the calendar\u0027s display to the previous month."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private void changeCalendarToPreviousMonth() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            updateCalendarWithPreviousMonth();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Changes the calendar\u0027s display to the next month."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private void changeCalendarToNextMonth() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            updateCalendarWithNextMonth();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 359
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/ui/CalendarResultDisplayPane.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.Logic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * Combined Calendar and ResultDisplay displayed at the right."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "public class CalendarResultDisplayPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private static final String FXML \u003d \"CalendarResultDisplayPane.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private CalendarPane calendarPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private StackPane calendarPanePlaceholder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public CalendarResultDisplayPane(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void fillInnerParts() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        calendarPane \u003d new CalendarPane(logic);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        calendarPanePlaceholder.getChildren().add(calendarPane.getRoot());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        calendarPanePlaceholder.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Sets the result display to display feedback to user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param feedbackToUser Feedback to user of {@String}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        resultDisplay.setFeedbackToUser(feedbackToUser);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 54
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/ui/CalendarWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.Logic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "public class CalendarWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CalendarWindow.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private static final String FXML \u003d \"CalendarWindow.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private CalendarPane calendarPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private StackPane calendarPanePlaceholder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Creates a new CalendarWindow."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param root Stage to use as the root of the CalendarWindow."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public CalendarWindow(Stage root, Logic logic) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        calendarPane \u003d new CalendarPane(logic);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        calendarPanePlaceholder.getChildren().add(calendarPane.getRoot());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Creates a new CalendarWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public CalendarWindow(Logic logic) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this(new Stage(), logic);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Shows the Calendar window."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        logger.fine(\"Showing calendar.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns true if the calendar window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Hides the calendar window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Focuses on the calendar window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 86
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/ui/CommandBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.history.CommandTextHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private CommandTextHistory commandTextHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        commandTextHistory \u003d new CommandTextHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        // If key pressed is UP or DOWN, grab from commandTextHistory the corresponding"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        // commandText"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        commandTextField.setOnKeyPressed(event -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            if (event.getCode() \u003d\u003d KeyCode.UP) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                commandTextField.setText(commandTextHistory.getUp());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            } else if (event.getCode() \u003d\u003d KeyCode.DOWN) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                commandTextField.setText(commandTextHistory.getDown());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            commandTextHistory.add(commandTextField.getText()); // Add commandText to history"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alcen"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 6,
      "nelsontky": 16,
      "-": 71
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/ui/CouponCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": " * An UI component that displays information of a {@code Coupon}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class CouponCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private static final String FXML \u003d \"CouponCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on CouponStash level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public final Coupon coupon;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private Label idDup;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private Label promoCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private VBox savings;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private Label expiryDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private Label startDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private Label usage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private FlowPane tagsDup;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private Label remindDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private Label condition;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private Label archived;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructor for a new CouponCard to be shown"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * in the JavaFX GUI."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param coupon         The Coupon that is shown in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                       this CouponCard."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param displayedIndex The index of this Coupon"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                       in the displayed list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param moneySymbol    String representing the money"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                       symbol to be used for savings"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                       (saved in UserPrefs)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public CouponCard(Coupon coupon, int displayedIndex, String moneySymbol) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.coupon \u003d coupon;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        setId(id, displayedIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        setId(idDup, displayedIndex); // duplicate is needed for UI purposes"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": "        name.setText(coupon.getName().fullName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        promoCode.setText(\"Promo Code: \" + coupon.getPromoCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        expiryDate.setText(\"Expiry Date: \" + coupon.getExpiryDate().value);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        startDate.setText(\"Start Date: \" + coupon.getStartDate().value);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        usage.setText(String.format(\"Usage: %s/%s\", coupon.getUsage().value, coupon.getLimit().value));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        setTags(coupon, tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        setTags(coupon, tagsDup);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        remindDate.setText(\"Remind Date: \" + coupon.getRemindDate().toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        condition.setText(\"T\u0026C: \" + coupon.getCondition().value);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // set savings pane"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alcen"
        },
        "content": "        SavingsPane savingsPane \u003d new SavingsPane();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alcen"
        },
        "content": "        savingsPane.setSavings(coupon.getSavingsForEachUse(), moneySymbol);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alcen"
        },
        "content": "        savings.getChildren().add(savingsPane.getRoot());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        archived.setVisible(Boolean.parseBoolean(coupon.getArchived().value));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void setTags(Coupon coupon, FlowPane tagFlowPane) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        coupon.getTags().stream()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .forEach(tag -\u003e tagFlowPane.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void setId(Label idLabel, int index) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        idLabel.setText(index + \"\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (!(other instanceof CouponCard)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CouponCard card \u003d (CouponCard) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alcen"
        },
        "content": "                \u0026\u0026 coupon.equals(card.coupon);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 26,
      "Denise-Ng": 9,
      "alcen": 30,
      "KEVVVINN": 6,
      "nelsontky": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/ui/CouponListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.moneysymbol.MoneySymbol;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Panel containing the list of coupons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class CouponListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static final String FXML \u003d \"CouponListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CouponListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private ListView\u003cCoupon\u003e couponListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Constructor for a CouponListPanel."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param couponList  The ObservableList of Coupons to be shown."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param moneySymbol The money symbol for the Savings of the Coupons."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public CouponListPanel(ObservableList\u003cCoupon\u003e couponList, MoneySymbol moneySymbol) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "        couponListView.setItems(couponList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "        couponListView.setCellFactory(listView -\u003e new CouponListViewCell(moneySymbol));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Coupon} using a {@code CouponCard}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "    class CouponListViewCell extends ListCell\u003cCoupon\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "        private final MoneySymbol moneySymbol;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "         * Constructor for a new CouponListViewCell."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "         *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "         * @param moneySymbol The MoneySymbol representing the"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "         *                    money symbol to be displayed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "         *                    on the Coupon\u0027s Savings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public CouponListViewCell(MoneySymbol moneySymbol) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.moneySymbol \u003d moneySymbol;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "        protected void updateItem(Coupon coupon, boolean empty) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "            super.updateItem(coupon, empty);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "            if (empty || coupon \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                setGraphic(new CouponCard(coupon, getIndex() + 1, this.moneySymbol.getString()).getRoot());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 3,
      "alcen": 35,
      "-": 28
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/ui/CouponsOnDateWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.moneysymbol.MoneySymbol;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.commons.util.DateUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * Controller for the display window of the date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "public class CouponsOnDateWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(csdev.couponstash.ui.CouponsOnDateWindow.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private static final String FXML \u003d \"CouponsOnDateWindow.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private Stage root;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private CouponListPanel couponList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private ObservableList\u003cCoupon\u003e coupons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private MoneySymbol moneySymbol;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private StackPane couponListPlaceholder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Creates a new {@code CouponsOnDateWindow}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param root Stage to use as the root of the {@code CouponsOnDateWindow}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public CouponsOnDateWindow(Stage root, ObservableList\u003cCoupon\u003e coupons, MoneySymbol moneySymbol) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.root \u003d root;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.coupons \u003d coupons;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.moneySymbol \u003d moneySymbol;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        couponList \u003d new CouponListPanel(coupons, moneySymbol);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        couponListPlaceholder.getChildren().add(couponList.getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Creates a new {@code CouponsOnDateWindow}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public CouponsOnDateWindow(ObservableList\u003cCoupon\u003e coupons, MoneySymbol moneySymbol) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this(new Stage(), coupons, moneySymbol);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Sets the date to the specified {@LocalDate}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param date The specified {@LocalDate}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        root.setTitle(getWindowTitle());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns the title of the window of the date."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @return Title of the window of the date."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private String getWindowTitle() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String title \u003d String.format(\"Coupons expiring on %s\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                date.format(DateUtil.DAY_MONTH_YEAR_FORMATTER_FOR_CALENDAR));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Shows the display window for the date."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        logger.fine(\"Showing coupons display window.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns true if the display window of the day is shown."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Hides the display window of the day."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Focuses on the display window of the day."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 101,
      "alcen": 4
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/ui/CsTab.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " * Tabs that are available to use in Coupon Stash."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public enum CsTab {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    COUPONS,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    SAVED,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    HELP"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 10
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/ui/DateCell.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.Cursor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * An UI component that displays information of a calendar date in the calendar."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "public class DateCell extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private static final String FXML \u003d \"DateCell.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private ObservableList\u003cCoupon\u003e coupons;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private CouponsOnDateWindow couponsDisplayWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private Text displayText;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private Circle displayCircle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private StackPane dateStackPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Constructs a calendar date cell."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public DateCell(Logic logic) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        coupons \u003d FXCollections.observableList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        couponsDisplayWindow \u003d new CouponsOnDateWindow(coupons, logic.getStashSettings().getMoneySymbol());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        //logger.info(\"Initializing new DateCell.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns the {@code StackPane} that is used to mount this {@code DateCell}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @return The {@code StackPane} that is used to mount this {@code DateCell}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public StackPane getCalendarDateStackPane() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return dateStackPane;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void setText(Text dateText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        displayText \u003d dateText;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void setCircle(Circle formattedCircle) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        displayCircle \u003d formattedCircle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void setCursor() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        displayCircle.setCursor(Cursor.HAND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        displayText.setCursor(Cursor.HAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void addChildren() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        dateStackPane.getChildren().addAll(displayCircle, displayText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Adds the specified coupon to the list of coupons corresponding to this {@code DateCell}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param coupon The specified coupon."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void addCoupon(Coupon coupon) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        coupons.add(coupon);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Clears all coupons from this {@code DateCell}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void clearCoupons() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        coupons.clear();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Sets the date of this {@code DateCell} to the specified date."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @param date The specified date."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        couponsDisplayWindow.setDate(date);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns the date of this {@code DateCell}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @return The date of this {@code DateCell}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns the text of this {@code DateCell}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * @return The date of this {@code DateCell}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public Text getText() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return displayText;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Returns the number of Coupons in this {@code DateCell}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public int getNumberOfCoupons() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return coupons.size();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Closes the displayed coupons list if it is opened."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void closeDisplayedCoupons() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        couponsDisplayWindow.hide();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Displays the coupons for the day represented by this {@code DateCell}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void displayCoupons() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        if (coupons.isEmpty()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } else if (!couponsDisplayWindow.isShowing()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            couponsDisplayWindow.show();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            couponsDisplayWindow.focus();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 146
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/ui/HelpPane.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " * Help page for usage of CouponStash."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class HelpPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private static final String FXML \u003d \"HelpPane.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private Label label;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public HelpPane(Logic logic) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        label.setText(\"THIS SPACE IS FOR HELP!!!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 26
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-f09-1.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 3,
      "-": 99
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private CalendarResultDisplayPane calendarResultPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private TabsPanel tabPanel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private StackPane calendarPanePlaceholder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private StackPane calendarResultPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private StackPane tabPanePlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        tabPanel \u003d new TabsPanel(logic);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        tabPanePlaceholder.getChildren().add(tabPanel.getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        tabPanel.fillInnerParts();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        calendarResultPane \u003d new CalendarResultDisplayPane(logic);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        calendarResultPlaceholder.getChildren().add(calendarResultPane.getRoot());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        calendarResultPane.fillInnerParts();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * @see Logic#execute(String, CsTab)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            CsTab currentSelectedTab \u003d tabPanel.selectedTab();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText, currentSelectedTab);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            if (!currentSelectedTab.equals(CsTab.COUPONS)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                tabPanel.selectTab(CsTab.COUPONS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            calendarResultPane.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            calendarResultPane.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 19,
      "ChesterSim": 10,
      "alcen": 7,
      "-": 95
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/ui/RemindWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "public class RemindWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String REMIND_MESSAGE \u003d \"Halt! \" + \"Remember to use these coupon(s) before it expires!\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            + \"\\n \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(RemindWindow.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private static final String FXML \u003d \"RemindWindow.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private Button okButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private Label remindMessage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Creates a new RemindWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * @param root Stage to use as the root of the RemindWindow."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public RemindWindow(Stage root) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        remindMessage.setText(REMIND_MESSAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Creates a new RemindWindow."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public RemindWindow() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * This method is to display a default remind window pop when there is"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * a matching coupon\u0027s remind date with today\u0027s date."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * @param message that need to be printed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static void displayRemind(String message) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        logger.fine(\"Showing remind page about the application.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Stage window \u003d new Stage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        window.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        window.setTitle(\"You are reminded!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        window.setMinWidth(500);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Label label \u003d new Label();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        label.setText(REMIND_MESSAGE + message);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Button closeButton \u003d new Button(\"OK\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        closeButton.setOnAction(e-\u003ewindow.close());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        VBox layout \u003d new VBox(10);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        layout.getChildren().addAll(label, closeButton);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        layout.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Scene scene \u003d new Scene(layout);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        window.setScene(scene);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        window.showAndWait();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KEVVVINN": 77
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/ui/ResultDisplay.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/ui/SavedPane.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * Savings summary of CouponStash."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "public class SavedPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private static final String FXML \u003d \"SavedPane.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private Label label;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public SavedPane(Logic logic) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        label.setText(\"THIS SPACE IS FOR THE SAVED SUMMARY!!!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 26
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/ui/SavingsPane.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.PercentageAmount;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Savings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": " * The UI element that holds the Savings, this is"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": " * displayed as a blue box beside the Coupon."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class SavingsPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static final String FXML \u003d \"SavingsPane.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "    // to set certain elements to be invisible"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static final String HIDDEN \u003d \"visibility: hidden;\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "    // allow CSS styles for each label in the FlowPane"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static final String SAVEABLE_CLASS \u003d \"sv-label\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "    // controls font size of number amount"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static final int BASE_FONT_SIZE \u003d 125;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "    // if no saveables, translate numerical amount"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static final int NUMERICAL_AMOUNT_TRANSLATE_AMOUNT \u003d 12;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private VBox savingsPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private Label numericalAmount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private FlowPane saveables;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public SavingsPane() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "        super(SavingsPane.FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Sets the Savings to be displayed in this SavingsPane."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param s The Savings to be displayed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param moneySymbol Money symbol for the display."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setSavings(Savings s, String moneySymbol) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // handle saveables"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "        s.getSaveables().ifPresentOrElse(saveablesList -\u003e saveablesList.stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .forEach(sva -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "                Label label \u003d new Label(sva.getValue());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "                // ensure that label has the correct CSS style"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "                label.getStyleClass().add(SavingsPane.SAVEABLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "                saveables.getChildren().add(label);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "            }), () -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "                this.saveables.setStyle(SavingsPane.HIDDEN);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "                this.numericalAmount.setTranslateY(SavingsPane.NUMERICAL_AMOUNT_TRANSLATE_AMOUNT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "            });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // handle numerical value"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "        String savingsNumber \u003d getSavingsString(s, moneySymbol);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (savingsNumber.isBlank()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.numericalAmount.setStyle(SavingsPane.HIDDEN);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.numericalAmount.setText(savingsNumber);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "            // resize numerical amount dynamically"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.numericalAmount.setStyle(\"-fx-font-size: \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    + (SavingsPane.BASE_FONT_SIZE / savingsNumber.length())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    + \";\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Given a Savings object and the money symbol, return"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * a String containing a formatted numerical value for"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * use in SavingsPane, or an empty String if the"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Savings does not have any MonetaryAmount"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * or PercentageAmount (only Saveable)."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param s The Savings object to access."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param moneySymbol The money symbol set in UserPrefs."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return Nicely formatted String of the numerical savings."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static String getSavingsString(Savings s, String moneySymbol) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // assumes that Savings only has either PercentageAmount"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // or MonetaryAmount, but never both"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alcen"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alcen"
        },
        "content": "        s.getPercentageAmount().ifPresent(pc -\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alcen"
        },
        "content": "            sb.append(pc.getValue()).append(PercentageAmount.PERCENT_SUFFIX));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alcen"
        },
        "content": "        s.getMonetaryAmount().ifPresent(ma -\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alcen"
        },
        "content": "            sb.append(ma.getStringWithMoneySymbol(moneySymbol)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 90
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/ui/StatusBarFooter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/ui/TabsPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import javafx.scene.control.SingleSelectionModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * The ui for the Tabs on the left half."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "public class TabsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private static final String FXML \u003d \"TabsPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private CouponListPanel couponListPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private SavedPane savedPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private HelpPane helpPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private Tab couponTab;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private Tab savedTab;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private Tab helpTab;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private StackPane couponListPanelPlaceholder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private StackPane expandedCouponPlaceholder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private StackPane savedPanePlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private StackPane helpPanePlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public TabsPanel(Logic logic) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void fillInnerParts() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        couponListPanel \u003d new CouponListPanel("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                logic.getFilteredCouponList(), logic.getStashSettings().getMoneySymbol());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        couponListPanelPlaceholder.getChildren().add(couponListPanel.getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        savedPane \u003d new SavedPane(logic);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        savedPanePlaceholder.getChildren().add(savedPane.getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        helpPane \u003d new HelpPane(logic);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        helpPanePlaceholder.getChildren().add(helpPane.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Returns the enum of the current selected tab."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public CsTab selectedTab() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (couponTab.isSelected()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            return CsTab.COUPONS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } else if (savedTab.isSelected()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            return CsTab.SAVED;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            return CsTab.HELP;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Selects {@code tab} to view."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void selectTab(CsTab tab) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        SingleSelectionModel\u003cTab\u003e selectionModel \u003d tabPane.getSelectionModel();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        switch (tab) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        case COUPONS:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            selectionModel.select(couponTab);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        case SAVED:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            selectionModel.select(savedTab);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            selectionModel.select(savedTab);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 53,
      "ChesterSim": 50
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/coupon_stash_32.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 7,
      "-": 80
    }
  },
  {
    "path": "src/main/java/csdev/couponstash/ui/UiPart.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 2,
      "-": 87
    }
  },
  {
    "path": "src/main/resources/view/CalendarPane.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.scene.shape.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" prefHeight\u003d\"328\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "  \u003cVBox fx:id\u003d\"calendarPane\" spacing\u003d\"0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003cStackPane\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"#6c96be\" height\u003d\"15.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                   onMouseClicked\u003d\"#changeCalendarToPreviousMonth\" stroke\u003d\"#6C96BE\" strokeType\u003d\"INSIDE\" width\u003d\"60.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003ccursor\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cCursor fx:constant\u003d\"HAND\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003c/cursor\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003c/Rectangle\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cPolygon id\u003d\"prevButton\" fill\u003d\"#6C96BE\" onMouseClicked\u003d\"#changeCalendarToPreviousMonth\" rotate\u003d\"-90.0\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                 stroke\u003d\"WHITE\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"2.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003cpoints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cDouble fx:value\u003d\"-6.0\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cDouble fx:value\u003d\"4.8\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cDouble fx:value\u003d\"6.0\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cDouble fx:value\u003d\"4.8\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cDouble fx:value\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cDouble fx:value\u003d\"-7.2\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003c/points\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003ccursor\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cCursor fx:constant\u003d\"HAND\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003c/cursor\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003c/Polygon\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003cText fx:id\u003d\"calendarHeader\" fill\u003d\"WHITE\" text\u003d\"Current Month \u0026amp; Year\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cfont\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003cFont name\u003d\"Segoe UI Bold\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003c/font\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "          \u003cInsets bottom\u003d\"12.0\" top\u003d\"12.0\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003cStackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"#6c96be\" height\u003d\"15.0\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                   onMouseClicked\u003d\"#changeCalendarToNextMonth\" stroke\u003d\"#6C96BE\" strokeType\u003d\"INSIDE\" width\u003d\"60.0\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003ccursor\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cCursor fx:constant\u003d\"HAND\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003c/cursor\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003c/Rectangle\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cPolygon id\u003d\"nextButton\" fill\u003d\"#6C96BE\" onMouseClicked\u003d\"#changeCalendarToNextMonth\" rotate\u003d\"90.0\" stroke\u003d\"WHITE\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                 strokeType\u003d\"INSIDE\" strokeWidth\u003d\"2.0\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003cpoints\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cDouble fx:value\u003d\"-6.0\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cDouble fx:value\u003d\"4.8\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cDouble fx:value\u003d\"6.0\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cDouble fx:value\u003d\"4.8\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cDouble fx:value\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cDouble fx:value\u003d\"-7.2\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003c/points\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003ccursor\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cCursor fx:constant\u003d\"HAND\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003c/cursor\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003c/Polygon\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    \u003cGridPane alignment\u003d\"BASELINE_CENTER\" gridLinesVisible\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefWidth\u003d\"40\" prefHeight\u003d\"30\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cText fill\u003d\"white\" text\u003d\"M\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cFont name\u003d\"Segoe UI Bold\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003c/font\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003c/Text\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefWidth\u003d\"40\" prefHeight\u003d\"30\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cText fill\u003d\"white\" text\u003d\"T\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cFont name\u003d\"Segoe UI Bold\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003c/font\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003c/Text\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefWidth\u003d\"40\" prefHeight\u003d\"30\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cText fill\u003d\"white\" text\u003d\"W\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cFont name\u003d\"Segoe UI Bold\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003c/font\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003c/Text\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefWidth\u003d\"40\" prefHeight\u003d\"30\" GridPane.columnIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cText fill\u003d\"white\" text\u003d\"T\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cFont name\u003d\"Segoe UI Bold\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003c/font\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003c/Text\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefWidth\u003d\"40\" prefHeight\u003d\"30\" GridPane.columnIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cText fill\u003d\"white\" text\u003d\"F\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cFont name\u003d\"Segoe UI Bold\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003c/font\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003c/Text\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefWidth\u003d\"40\" prefHeight\u003d\"30\" GridPane.columnIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cText fill\u003d\"white\" text\u003d\"S\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cFont name\u003d\"Segoe UI Bold\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003c/font\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003c/Text\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefWidth\u003d\"40\" prefHeight\u003d\"30\" GridPane.columnIndex\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cText fill\u003d\"white\" text\u003d\"S\"\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003cfont\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cFont name\u003d\"Segoe UI Bold\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003c/font\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003c/Text\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cColumnConstraints/\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cColumnConstraints/\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cColumnConstraints/\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cColumnConstraints/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cColumnConstraints/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cColumnConstraints/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cColumnConstraints/\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    \u003cGridPane fx:id\u003d\"calendarGrid\"\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003cInsets/\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 134,
      "ChesterSim": 2
    }
  },
  {
    "path": "src/main/resources/view/CalendarResultDisplayPane.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003cStackPane\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "  \u003cVBox xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\" prefWidth\u003d\"200\" spacing\u003d\"-2\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    \u003cStackPane fx:id\u003d\"calendarPanePlaceholder\" HBox.hgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" HBox.hgrow\u003d\"NEVER\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 7,
      "ChesterSim": 3
    }
  },
  {
    "path": "src/main/resources/view/CalendarWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.stage.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Calendar\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003cVBox spacing\u003d\"20\" style\u003d\"-fx-background-color: #6C96BE\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cStackPane fx:id\u003d\"calendarPanePlaceholder\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 17
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "\u003cStackPane styleClass\u003d\"background\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "             prefHeight\u003d\"35.0\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 1,
      "Denise-Ng": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/CouponCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003cHBox id\u003d\"couponPane\" fx:id\u003d\"cardPane\" style\u003d\"-fx-background-color: transparent;\" HBox.hgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "  \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    \u003cURL value\u003d\"@CouponCard.css\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "  \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    \u003cAnchorPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cHBox minWidth\u003d\"614.0\" style\u003d\"-fx-background-color: #46998F; -fx-background-radius: 10;\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "              AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "              AnchorPane.topAnchor\u003d\"0.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cHBox style\u003d\"-fx-border-color: white; -fx-border-width: 1; -fx-border-style: segments(4, 4, 4, 4); -fx-border-radius: 10; \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                  HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                \u003cVBox alignment\u003d\"CENTER\" prefWidth\u003d\"120.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                    \u003cVBox fx:id\u003d\"savings\" alignment\u003d\"CENTER\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"110.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                      \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        \u003cInsets bottom\u003d\"7.0\" left\u003d\"7.0\" right\u003d\"7.0\" top\u003d\"7.0\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                      \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" prefHeight\u003d\"130.0\" prefWidth\u003d\"431.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                    \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                  \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                    \u003cHBox alignment\u003d\"CENTER_LEFT\" prefWidth\u003d\"500.0\" spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                      \u003cchildren\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        \u003cHBox spacing\u003d\"3.0\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                          \u003cchildren\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                            \u003cLabel id\u003d\"couponName\" fx:id\u003d\"name\" text\u003d\"name\"/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                          \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                      \u003c/children\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                      \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        \u003cInsets top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                      \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                    \u003cHBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                      \u003cchildren\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"250.0\" spacing\u003d\"10.0\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                          \u003cchildren\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                            \u003cLabel id\u003d\"couponFields\" fx:id\u003d\"promoCode\" text\u003d\"promoCode\"/\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                            \u003cLabel id\u003d\"couponFields\" fx:id\u003d\"expiryDate\" text\u003d\"expiryDate\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                            \u003cLabel id\u003d\"couponFields\" fx:id\u003d\"usage\" text\u003d\"usage\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                          \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                          \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                            \u003cInsets top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                          \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"250.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                          \u003cchildren\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                            \u003cLabel id\u003d\"couponFields\" fx:id\u003d\"startDate\" text\u003d\"startDate\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                              \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                                \u003cInsets bottom\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                              \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                            \u003cLabel id\u003d\"couponFields\" fx:id\u003d\"remindDate\" text\u003d\"remindDate\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                              \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                                \u003cInsets bottom\u003d\"6.0\"/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                              \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                            \u003cLabel id\u003d\"couponFields\" fx:id\u003d\"condition\" contentDisplay\u003d\"BOTTOM\" prefHeight\u003d\"25.0\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                                   style\u003d\"-fx-font-size: 10;\" text\u003d\"condition\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                          \u003c/children\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                          \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                            \u003cInsets top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                          \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                      \u003c/children\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                  \u003c/children\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "              \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                \u003cInsets bottom\u003d\"14.0\" left\u003d\"14.0\" right\u003d\"14.0\" top\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "              \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        \u003cLabel fx:id\u003d\"archived\" id\u003d\"archivedLabel\" prefWidth\u003d\"100.0\" rotate\u003d\"-40.0\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "               style\u003d\"-fx-background-color: red; -fx-background-radius: 4; -fx-alignment: center; -fx-font-weight: bold;\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "               text\u003d\"Archived\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" AnchorPane.leftAnchor\u003d\"-5.0\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "               AnchorPane.topAnchor\u003d\"35.0\"/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cImageView fitHeight\u003d\"19.0\" fitWidth\u003d\"14.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                   AnchorPane.rightAnchor\u003d\"7.5\" AnchorPane.topAnchor\u003d\"55.0\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "          \u003cimage\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            \u003cImage url\u003d\"@../images/scissors.png\"/\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "          \u003c/image\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" alignment\u003d\"CENTER\" text\u003d\"1\" textAlignment\u003d\"CENTER\" AnchorPane.leftAnchor\u003d\"139.0\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "               AnchorPane.topAnchor\u003d\"4.0\"\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            \u003cInsets left\u003d\"6.0\" right\u003d\"7.0\"/\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cLabel fx:id\u003d\"idDup\" alignment\u003d\"CENTER\" text\u003d\"1\" textAlignment\u003d\"CENTER\" AnchorPane.leftAnchor\u003d\"139.0\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "               AnchorPane.topAnchor\u003d\"4.0\"\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            \u003cInsets left\u003d\"6.0\" right\u003d\"7.0\"/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"tags\" alignment\u003d\"BOTTOM_LEFT\" AnchorPane.leftAnchor\u003d\"170.0\" AnchorPane.topAnchor\u003d\"7.0\"/\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"tagsDup\" alignment\u003d\"BOTTOM_LEFT\" AnchorPane.leftAnchor\u003d\"170.0\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                  AnchorPane.topAnchor\u003d\"7.0\"/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 89,
      "Denise-Ng": 22,
      "alcen": 1,
      "nelsontky": 4,
      "-": 10
    }
  },
  {
    "path": "src/main/resources/view/CouponListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "  \u003cListView fx:id\u003d\"couponListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/CouponsOnDateWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "         minWidth\u003d\"656.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    \u003cImage url\u003d\"@/images/coupon_stash_32.png\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" prefHeight\u003d\"600\" prefWidth\u003d\"654.0\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cStackPane fx:id\u003d\"couponListPlaceholder\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 31
    }
  },
  {
    "path": "src/main/resources/view/DateCell.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "\u003cStackPane fx:id\u003d\"dateStackPane\" maxHeight\u003d\"40.0\" maxWidth\u003d\"60.0\" minHeight\u003d\"40.0\" minWidth\u003d\"40.0\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "           onMouseClicked\u003d\"#displayCoupons\" prefHeight\u003d\"30\" prefWidth\u003d\"40\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 7,
      "ChesterSim": 1
    }
  },
  {
    "path": "src/main/resources/view/HelpPane.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" prefHeight\u003d\"110.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "  \u003cVBox style\u003d\"-fx-background-color: #46998F; -fx-background-radius: 10; -fx-background-insets: 4 8 5 8; \" minHeight\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    \u003cLabel id\u003d\"couponName\" fx:id\u003d\"label\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 12
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "\u003cfx:root minHeight\u003d\"670\" minWidth\u003d\"1000\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Coupon Stash\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "    \u003cImage url\u003d\"@/images/coupon_stash_32.png\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003cVBox alignment\u003d\"TOP_CENTER\" styleClass\u003d\"background\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cHBox HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\" minWidth\u003d\"680\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "          \u003cStackPane fx:id\u003d\"tabPanePlaceholder\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003cStackPane fx:id\u003d\"calendarResultPlaceholder\" alignment\u003d\"TOP_RIGHT\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                     HBox.hgrow\u003d\"NEVER\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "              \u003cInsets right\u003d\"7\" top\u003d\"4\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\" prefHeight\u003d\"30\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"27\" right\u003d\"7\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 5,
      "Denise-Ng": 11,
      "alcen": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" style\u003d\"-fx-background-color: #19568E; -fx-border-radius: 20px;\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 4,
      "-": 4
    }
  },
  {
    "path": "src/main/resources/view/SavedPane.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "  \u003cVBox style\u003d\"-fx-background-color: #46998F; -fx-background-radius: 10; -fx-background-insets: 4 8 5 8;\" minHeight\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    \u003cLabel id\u003d\"couponName\" fx:id\u003d\"label\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 8,
      "ChesterSim": 3
    }
  },
  {
    "path": "src/main/resources/view/SavingsPane.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "\u003cVBox fx:id\u003d\"savingsPane\" alignment\u003d\"CENTER\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "      prefHeight\u003d\"110.0\" prefWidth\u003d\"100.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "   \u003cLabel fx:id\u003d\"numericalAmount\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "          prefHeight\u003d\"89.0\" prefWidth\u003d\"100.0\" text\u003d\"Label\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "   \u003cFlowPane fx:id\u003d\"saveables\" prefHeight\u003d\"29.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "alcen": 13
    }
  },
  {
    "path": "src/main/resources/view/TabsPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    \u003cTabPane fx:id\u003d\"tabPane\" side\u003d\"LEFT\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003ctabs\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cTab fx:id\u003d\"couponTab\" text\u003d\"Coupons\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003ccontent\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cStackPane fx:id\u003d\"couponListPanelPlaceholder\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003c/content\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cTab fx:id\u003d\"savedTab\" text\u003d\"Saved\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003ccontent\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            \u003cStackPane fx:id\u003d\"savedPanePlaceholder\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                       style\u003d\"-fx-background-insets: 4 8 5 8;\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "          \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        \u003cTab fx:id\u003d\"helpTab\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "          \u003ccontent\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            \u003cStackPane fx:id\u003d\"helpPanePlaceholder\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "          \u003c/content\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003c/tabs\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        \u003cInsets/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "      \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 27,
      "ChesterSim": 6
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/AppParametersTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/commons/MoneySymbolStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.moneysymbol.MoneySymbol;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": " * A money symbol stub that has irrelevant methods failing."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": " * MoneySymbolStub is immutable as compared to MoneySymbol."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class MoneySymbolStub implements MoneySymbol {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private String moneySymbol;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public MoneySymbolStub(String moneySymbol) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.moneySymbol \u003d moneySymbol;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public String setString(String newSymbol) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public String getString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.moneySymbol;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "        if (o instanceof MoneySymbol) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return ((MoneySymbol) o).getString().equals(this.moneySymbol);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this.moneySymbol;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 39
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/commons/core/ConfigTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/commons/core/VersionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/commons/core/index/IndexTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "        final Index fifthCouponIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(fifthCouponIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(fifthCouponIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(fifthCouponIndex.equals(fifthCouponIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(fifthCouponIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(fifthCouponIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(fifthCouponIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 9,
      "-": 51
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/commons/util/AppUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/coupon_stash_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "                AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 5,
      "-": 32
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/commons/util/CollectionUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/commons/util/ConfigUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/commons/util/FileUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/commons/util/JsonUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/commons/util/StringUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COUPON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.EXPIRY_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.LIMIT_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.PROMO_CODE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.SAVINGS_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.START_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.USAGE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.TypicalCoupons.AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ReadOnlyCouponStash;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.storage.JsonCouponStashStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.CouponBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.ui.CsTab;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "        JsonCouponStashStorage couponStashStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "                new JsonCouponStashStorage(temporaryFolder.resolve(\"couponStash.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "        StorageManager storage \u003d new StorageManager(couponStashStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_COUPON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String message \u003d String.format(ListCommand.MESSAGE_SUCCESS, \"active\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertCommandSuccess(listCommand, message , model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // Setup LogicManager with JsonCouponStashIoExceptionThrowingStub"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alcen"
        },
        "content": "        JsonCouponStashStorage couponStashStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": "                new JsonCouponStashIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alcen"
        },
        "content": "        StorageManager storage \u003d new StorageManager(couponStashStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PROMO_CODE_DESC_AMY + SAVINGS_DESC_AMY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                + EXPIRY_DATE_DESC_AMY + START_DATE_DESC_AMY + USAGE_DESC_AMY + LIMIT_DESC_AMY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon expectedCoupon \u003d new CouponBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        expectedModel.addCoupon(expectedCoupon, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void getFilteredCouponList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredCouponList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand, CsTab.COUPONS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand, CsTab.COUPONS));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static class JsonCouponStashIoExceptionThrowingStub extends JsonCouponStashStorage {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alcen"
        },
        "content": "        private JsonCouponStashIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public void saveCouponStash(ReadOnlyCouponStash couponStash, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 4,
      "ChesterSim": 6,
      "alcen": 36,
      "nelsontky": 3,
      "-": 118
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.CouponBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.TypicalCoupons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "        model \u003d new ModelManager(TypicalCoupons.getTypicalCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void execute_newCoupon_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon validCoupon \u003d new CouponBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        expectedModel.addCoupon(validCoupon, \"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertCommandSuccess(new AddCommand(validCoupon), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validCoupon), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void execute_duplicateCoupon_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon couponInList \u003d model.getCouponStash().getCouponList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertCommandFailure(new AddCommand(couponInList), model, AddCommand.MESSAGE_DUPLICATE_COUPON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 18,
      "nelsontky": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.StashSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.logic.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.CouponStash;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ReadOnlyCouponStash;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.CouponBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void constructor_nullCoupon_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void execute_couponAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "        ModelStubAcceptingCouponAdded modelStub \u003d new ModelStubAcceptingCouponAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon validCoupon \u003d new CouponBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validCoupon).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validCoupon), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(Arrays.asList(validCoupon), modelStub.couponsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void execute_duplicateCoupon_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon validCoupon \u003d new CouponBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validCoupon);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCoupon(validCoupon);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_COUPON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon alice \u003d new CouponBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon bob \u003d new CouponBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(addAliceCommand, addAliceCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(addAliceCommand, addAliceCommandCopy);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertNotEquals(1, addAliceCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertNotNull(addAliceCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // different coupon -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertNotEquals(addAliceCommand, addBobCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alcen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public StashSettings getStashSettings() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alcen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public void setStashSettings(StashSettings guiSettings) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public Path getCouponStashFilePath() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public void setCouponStashFilePath(Path couponStashFilePath) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        public void addCoupon(Coupon coupon, String commandText) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        public void setCouponStash(ReadOnlyCouponStash newData, String commandText) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public ReadOnlyCouponStash getCouponStash() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public boolean hasCoupon(Coupon coupon) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        public void deleteCoupon(Coupon target, String commandText) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        public void setCoupon(Coupon target, Coupon editedCoupon, String commandText) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public ObservableList\u003cCoupon\u003e getFilteredCouponList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public void updateFilteredCouponList(Predicate\u003c? super Coupon\u003e predicate) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        public void commitCouponStash(String command) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        public String undoCouponStash() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        public String redoCouponStash() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        public boolean canUndoCouponStash() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        public boolean canRedoCouponStash() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        public void sortCoupons(Prefix prefixToSortBy, String commandText) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alcen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public String setMoneySymbol(String moneySymbol) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * A Model stub that contains a single coupon."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private class ModelStubWithCoupon extends ModelStub {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alcen"
        },
        "content": "        private final Coupon coupon;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alcen"
        },
        "content": "        ModelStubWithCoupon(Coupon coupon) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alcen"
        },
        "content": "            requireNonNull(coupon);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.coupon \u003d coupon;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public boolean hasCoupon(Coupon coupon) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alcen"
        },
        "content": "            requireNonNull(coupon);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return this.coupon.isSameCoupon(coupon);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * A Model stub that always accept the coupon being added."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private class ModelStubAcceptingCouponAdded extends ModelStub {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alcen"
        },
        "content": "        final ArrayList\u003cCoupon\u003e couponsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public boolean hasCoupon(Coupon coupon) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alcen"
        },
        "content": "            requireNonNull(coupon);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return couponsAdded.stream().anyMatch(coupon::isSameCoupon);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        public void addCoupon(Coupon coupon, String commandText) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alcen"
        },
        "content": "            requireNonNull(coupon);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alcen"
        },
        "content": "            couponsAdded.add(coupon);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public ReadOnlyCouponStash getCouponStash() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return new CouponStash();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 76,
      "nelsontky": 36,
      "-": 130
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/commands/ArchiveCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.showCouponAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.testutil.TypicalCoupons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class ArchiveCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalCoupons.getTypicalCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon couponToArchive \u003d model.getFilteredCouponList().get(TypicalIndexes.INDEX_FIRST_COUPON.getZeroBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        String expectedMessage \u003d String.format(ArchiveCommand.MESSAGE_ARCHIVE_COUPON_SUCCESS,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                couponToArchive.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon expectedCoupon \u003d couponToArchive.archive();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        expectedModel.setCoupon(couponToArchive, expectedCoupon, \"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertCommandSuccess(archiveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCouponList().size() + 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertCommandFailure(archiveCommand, model, Messages.MESSAGE_INVALID_COUPON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        showCouponAtIndex(model, TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon couponToArchive \u003d model.getFilteredCouponList().get(TypicalIndexes.INDEX_FIRST_COUPON.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        String expectedMessage \u003d String.format(ArchiveCommand.MESSAGE_ARCHIVE_COUPON_SUCCESS,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                couponToArchive.getName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon expectedCoupon \u003d couponToArchive.archive();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        expectedModel.setCoupon(couponToArchive, expectedCoupon, \"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertCommandSuccess(archiveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        showCouponAtIndex(model, TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_COUPON;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of CouponStash list"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCouponStash().getCouponList().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertCommandFailure(archiveCommand, model, Messages.MESSAGE_INVALID_COUPON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        ArchiveCommand archiveFirstCommand \u003d new ArchiveCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        ArchiveCommand archiveSecondCommand \u003d new ArchiveCommand(TypicalIndexes.INDEX_SECOND_COUPON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertTrue(archiveFirstCommand.equals(archiveFirstCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        ArchiveCommand archiveFirstCommandCopy \u003d new ArchiveCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertTrue(archiveFirstCommand.equals(archiveFirstCommandCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(archiveSecondCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 95
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/commands/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.CouponStash;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.TypicalCoupons;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void execute_emptyCouponStash_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void execute_nonEmptyCouponStash_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Model model \u003d new ModelManager(TypicalCoupons.getTypicalCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(TypicalCoupons.getTypicalCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        expectedModel.setCouponStash(new CouponStash(), \"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 11,
      "nelsontky": 1,
      "-": 20
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/commands/CommandResultTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_LIMIT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_PROMO_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_SAVINGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_USAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.MoneySymbolStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.moneysymbol.MoneySymbol;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.CouponStash;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.MonetaryAmount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Saveable;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Savings;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.EditCouponDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String VALID_PROMO_CODE_AMY \u003d \"ILOVESTASH\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String VALID_PROMO_CODE_BOB \u003d \"STASH4LYFE\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final String VALID_EXPIRY_DATE_AMY \u003d \"30-12-2020\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final String VALID_EXPIRY_DATE_BOB \u003d \"31-12-2020\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String VALID_START_DATE_AMY \u003d \"01-12-2020\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String VALID_START_DATE_BOB \u003d \"02-12-2020\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String VALID_REMIND_DATE_AMY \u003d \"27-12-2020\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String VALID_REMIND_DATE_BOB \u003d \"28-12-2020\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String VALID_SAVEABLE_CAKE \u003d \"Cake\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String VALID_SAVEABLE_CROISSANT \u003d \"Croissant\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Savings VALID_SAVINGS_AMY \u003d new Savings("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "            Arrays.asList(new Saveable(VALID_SAVEABLE_CAKE), new Saveable(VALID_SAVEABLE_CROISSANT))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "    );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final double VALID_MONETARY_AMOUNT_ONE_FIFTY \u003d 1.5;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final double VALID_MONETARY_AMOUNT_TWO_TWENTY \u003d 2.2;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String VALID_SAVEABLE_COFFEE \u003d \"Coffee\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String VALID_SAVEABLE_TEA \u003d \"Tea\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Savings VALID_SAVINGS_BOB \u003d new Savings("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "            new MonetaryAmount(VALID_MONETARY_AMOUNT_TWO_TWENTY),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "            Arrays.asList(new Saveable(VALID_SAVEABLE_COFFEE), new Saveable(VALID_SAVEABLE_TEA))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "    );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final MoneySymbol VALID_MONEY_SYMBOL \u003d new MoneySymbolStub(\"RM\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String VALID_USAGE_AMY \u003d \"0\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String VALID_USAGE_BOB \u003d \"1\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String VALID_LIMIT_AMY \u003d \"1\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String VALID_LIMIT_BOB \u003d \"10\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String VALID_CONDITION_AMY \u003d \"While Stocks Last\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String VALID_CONDITION_BOB \u003d \"While Stocks Last\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String PROMO_CODE_DESC_AMY \u003d \" \" + PREFIX_PROMO_CODE + VALID_PROMO_CODE_AMY;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String PROMO_CODE_DESC_BOB \u003d \" \" + PREFIX_PROMO_CODE + VALID_PROMO_CODE_BOB;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String SAVINGS_DESC_AMY \u003d \" \" + PREFIX_SAVINGS + VALID_SAVEABLE_CAKE"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \" \" + PREFIX_SAVINGS + VALID_SAVEABLE_CROISSANT;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String SAVINGS_DESC_BOB \u003d \" \" + PREFIX_SAVINGS + VALID_SAVEABLE_COFFEE"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \" \" + PREFIX_SAVINGS + VALID_MONEY_SYMBOL + VALID_MONETARY_AMOUNT_TWO_TWENTY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \" \" + PREFIX_SAVINGS + VALID_SAVEABLE_TEA;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String SAVINGS_DESC_BOB_TWO_MONETARY_AMOUNT \u003d \" \" + PREFIX_SAVINGS + VALID_SAVEABLE_COFFEE"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \" \" + PREFIX_SAVINGS + VALID_MONEY_SYMBOL + VALID_MONETARY_AMOUNT_ONE_FIFTY"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \" \" + PREFIX_SAVINGS + VALID_SAVEABLE_TEA"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alcen"
        },
        "content": "            + \" \" + PREFIX_SAVINGS + VALID_MONEY_SYMBOL + VALID_MONETARY_AMOUNT_TWO_TWENTY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final String EXPIRY_DATE_DESC_AMY \u003d \" \" + PREFIX_EXPIRY_DATE + VALID_EXPIRY_DATE_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final String EXPIRY_DATE_DESC_BOB \u003d \" \" + PREFIX_EXPIRY_DATE + VALID_EXPIRY_DATE_BOB;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String START_DATE_DESC_AMY \u003d \" \" + PREFIX_START_DATE + VALID_START_DATE_AMY;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String START_DATE_DESC_BOB \u003d \" \" + PREFIX_START_DATE + VALID_START_DATE_BOB;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String USAGE_DESC_AMY \u003d \" \" + PREFIX_USAGE + VALID_USAGE_AMY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String USAGE_DESC_BOB \u003d \" \" + PREFIX_USAGE + VALID_USAGE_BOB;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String LIMIT_DESC_AMY \u003d \" \" + PREFIX_LIMIT + VALID_LIMIT_AMY;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String LIMIT_DESC_BOB \u003d \" \" + PREFIX_LIMIT + VALID_LIMIT_BOB;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String INVALID_SAVINGS_DESC \u003d \" \" + PREFIX_SAVINGS; // cannot have blank savings"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final String INVALID_EXPIRY_DATE_DESC \u003d \" \" + PREFIX_EXPIRY_DATE + \"2-2-22\"; // year should be in yyyy"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String INVALID_START_DATE_DESC \u003d \" \" + PREFIX_START_DATE + \"2-2-22\"; // year should be in yyyy"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String INVALID_USAGE_DESC \u003d \" \" + PREFIX_USAGE + \"-10\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String INVALID_LIMIT_DESC \u003d \" \" + PREFIX_LIMIT + \"3c\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final EditCommand.EditCouponDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final EditCommand.EditCouponDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        DESC_AMY \u003d new EditCouponDescriptorBuilder()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .withPromoCode(VALID_PROMO_CODE_AMY)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withSavings(VALID_SAVINGS_AMY)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                .withExpiryDate(VALID_EXPIRY_DATE_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .withStartDate(VALID_START_DATE_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withUsage(VALID_USAGE_AMY)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withLimit(VALID_LIMIT_AMY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .withRemindDate(VALID_REMIND_DATE_AMY, VALID_EXPIRY_DATE_AMY)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .withCondition(VALID_CONDITION_AMY)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        DESC_BOB \u003d new EditCouponDescriptorBuilder()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .withPromoCode(VALID_PROMO_CODE_BOB)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withSavings(VALID_SAVINGS_BOB)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                .withExpiryDate(VALID_EXPIRY_DATE_BOB)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .withStartDate(VALID_START_DATE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withUsage(VALID_USAGE_BOB)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withLimit(VALID_LIMIT_BOB)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .withRemindDate(VALID_REMIND_DATE_BOB, VALID_EXPIRY_DATE_BOB)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .withCondition(VALID_CONDITION_BOB)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * - the CouponStash, filtered coupon list and selected coupon in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CouponStash expectedCouponStash \u003d new CouponStash(actualModel.getCouponStash());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alcen"
        },
        "content": "        List\u003cCoupon\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCouponList());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(expectedCouponStash, actualModel.getCouponStash());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredCouponList());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the coupon at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * {@code model}\u0027s CouponStash."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static void showCouponAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCouponList().size());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon coupon \u003d model.getFilteredCouponList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alcen"
        },
        "content": "        final String[] splitName \u003d coupon.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alcen"
        },
        "content": "        model.updateFilteredCouponList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(1, model.getFilteredCouponList().size());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 8,
      "ChesterSim": 29,
      "alcen": 59,
      "KEVVVINN": 27,
      "-": 70
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/commands/ConditionCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_CONDITION_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_CONDITION_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.commands.ConditionCommand.MESSAGE_ARGUMENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.testutil.TypicalCoupons.getTypicalCouponStash;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.testutil.TypicalIndexes.INDEX_FIRST_COUPON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.testutil.TypicalIndexes.INDEX_SECOND_COUPON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Condition;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ConditionCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "public class ConditionCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        final Condition condition \u003d new Condition(\"Some remark\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertCommandFailure(new ConditionCommand(INDEX_FIRST_COUPON, condition), model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                String.format(MESSAGE_ARGUMENTS, INDEX_FIRST_COUPON.getOneBased(), condition));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        final ConditionCommand standardCommand \u003d new ConditionCommand(INDEX_FIRST_COUPON,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                new Condition(VALID_CONDITION_AMY));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        ConditionCommand commandWithSameValues \u003d new ConditionCommand(INDEX_FIRST_COUPON,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                new Condition(VALID_CONDITION_AMY));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertFalse(standardCommand.equals(new ConditionCommand(INDEX_SECOND_COUPON,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                new Condition(VALID_CONDITION_AMY))));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertFalse(standardCommand.equals(new ConditionCommand(INDEX_FIRST_COUPON,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                new Condition(VALID_CONDITION_BOB + \" \"))));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KEVVVINN": 65
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/commands/CopyCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.showCouponAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.testutil.TypicalCoupons.AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.awt.HeadlessException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.awt.Toolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.awt.datatransfer.Clipboard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.awt.datatransfer.DataFlavor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.MoneySymbolStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.parser.CouponStashParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.testutil.CouponBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.testutil.TypicalCoupons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * Contains unit tests for {@code CopyCommand}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "public class CopyCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalCoupons.getTypicalCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        Coupon couponToCopy \u003d model.getFilteredCouponList().get(TypicalIndexes.INDEX_FIRST_COUPON.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        CopyCommand copyCommand \u003d new CopyCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String expectedMessage \u003d String.format(CopyCommand.MESSAGE_COPY_COUPON_SUCCESS, couponToCopy.getName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            assertCommandSuccess(copyCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } catch (HeadlessException he) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            //Catching Headless Exception on Travis CI because Travis has no keyboard"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            assertEquals(1, 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCouponList().size() + 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        CopyCommand copyCommand \u003d new CopyCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertCommandFailure(copyCommand, model, Messages.MESSAGE_INVALID_COUPON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void execute_validIndexFilteredListWithNoChange_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        showCouponAtIndex(model, TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        Coupon couponToCopy \u003d model.getFilteredCouponList().get(TypicalIndexes.INDEX_FIRST_COUPON.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        CopyCommand copyCommand \u003d new CopyCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String expectedMessage \u003d String.format(CopyCommand.MESSAGE_COPY_COUPON_SUCCESS, couponToCopy.getName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        showCouponAtIndex(expectedModel, TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            assertCommandSuccess(copyCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } catch (HeadlessException he) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            //Catching Headless Exception on Travis CI because Travis has no keyboard"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            assertEquals(1, 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        showCouponAtIndex(model, TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_COUPON;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of CouponStash list"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCouponStash().getCouponList().size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        CopyCommand copyCommand \u003d new CopyCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertCommandFailure(copyCommand, model, Messages.MESSAGE_INVALID_COUPON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void execute_messageCopiedToClipboard_equalsToActualMessage() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        Coupon couponToCopy \u003d model.getFilteredCouponList().get(TypicalIndexes.INDEX_FIRST_COUPON.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        CopyCommand copyCommand \u003d new CopyCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String actualMessage \u003d copyCommand.getCopyCommand(couponToCopy);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            copyCommand.execute(model);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            assertEquals(getClipboardContent(), actualMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } catch (HeadlessException he) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            //Catching Headless Exception on Travis CI because Travis has no keyboard"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            assertEquals(1, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void execute_couponFromCopyCommand_validAddCommand() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        Coupon expectedCoupon \u003d new CouponBuilder(AMY).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        model.addCoupon(expectedCoupon, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        Index lastIndex \u003d Index.fromZeroBased(model.getFilteredCouponList().size() - 1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        CopyCommand copyCommand \u003d new CopyCommand(lastIndex);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        Coupon couponToCopy \u003d model.getFilteredCouponList().get(lastIndex.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String exportString \u003d copyCommand.getCopyCommand(couponToCopy);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CouponStashParser command \u003d new CouponStashParser("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alcen"
        },
        "content": "                new MoneySymbolStub(\"$\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            command.parseCommand(exportString).execute(expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", pe);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        Coupon actualCoupon \u003d expectedModel.getFilteredCouponList().get(lastIndex.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertTrue(actualCoupon.isSameCoupon(expectedCoupon));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        CopyCommand exportFirstCommand \u003d new CopyCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        CopyCommand exportSecondCommand \u003d new CopyCommand(TypicalIndexes.INDEX_SECOND_COUPON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertTrue(exportFirstCommand.equals(exportFirstCommand));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        CopyCommand exportFirstCommandCopy \u003d new CopyCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertTrue(exportFirstCommand.equals(exportFirstCommandCopy));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(exportFirstCommand.equals(1));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(exportFirstCommand.equals(null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(exportFirstCommand.equals(exportSecondCommand));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static String getClipboardContent() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        Clipboard systemClipboard \u003d Toolkit.getDefaultToolkit().getSystemClipboard();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        DataFlavor dataFlavor \u003d DataFlavor.stringFlavor;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            if (systemClipboard.isDataFlavorAvailable(dataFlavor)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                Object text \u003d systemClipboard.getData(dataFlavor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                return (String) text;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 158,
      "alcen": 3,
      "nelsontky": 1
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.showCouponAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.TypicalCoupons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalCoupons.getTypicalCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon couponToDelete \u003d model.getFilteredCouponList().get(TypicalIndexes.INDEX_FIRST_COUPON.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_COUPON_SUCCESS, couponToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        expectedModel.deleteCoupon(couponToDelete, \"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCouponList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_COUPON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "        showCouponAtIndex(model, TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon couponToDelete \u003d model.getFilteredCouponList().get(TypicalIndexes.INDEX_FIRST_COUPON.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_COUPON_SUCCESS, couponToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        expectedModel.deleteCoupon(couponToDelete, \"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "        showNoCoupon(expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "        showCouponAtIndex(model, TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_COUPON;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of CouponStash list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCouponStash().getCouponList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_COUPON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alcen"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(TypicalIndexes.INDEX_SECOND_COUPON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alcen"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private void showNoCoupon(Model model) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alcen"
        },
        "content": "        model.updateFilteredCouponList(p -\u003e false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(model.getFilteredCouponList().isEmpty());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 1,
      "alcen": 38,
      "nelsontky": 2,
      "-": 67
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/commands/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.EditCommand.EditCouponDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.CouponStash;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.CouponBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.EditCouponDescriptorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.TypicalCoupons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalCoupons.getTypicalCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public void execute_allFieldsSpecifiedExceptUsageUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Coupon comparedCoupon \u003d model.getFilteredCouponList().get(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Coupon editedCoupon \u003d new CouponBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .withUsage(comparedCoupon.getUsage().value)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "        EditCouponDescriptor descriptor \u003d new EditCouponDescriptorBuilder(editedCoupon).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_COUPON, descriptor);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_COUPON_SUCCESS, editedCoupon);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CouponStash(model.getCouponStash()), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        expectedModel.setCoupon(comparedCoupon, editedCoupon, \"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Index indexLastCoupon \u003d Index.fromOneBased(model.getFilteredCouponList().size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon lastCoupon \u003d model.getFilteredCouponList().get(indexLastCoupon.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CouponBuilder couponInList \u003d new CouponBuilder(lastCoupon);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon editedCoupon \u003d couponInList.withName(CommandTestUtil.VALID_NAME_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .withPromoCode(CommandTestUtil.VALID_PROMO_CODE_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "        EditCouponDescriptor descriptor \u003d new EditCouponDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .withPromoCode(CommandTestUtil.VALID_PROMO_CODE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastCoupon, descriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_COUPON_SUCCESS, editedCoupon);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CouponStash(model.getCouponStash()), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        expectedModel.setCoupon(lastCoupon, editedCoupon, \"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "        EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "                new EditCommand(TypicalIndexes.INDEX_FIRST_COUPON, new EditCommand.EditCouponDescriptor());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon editedCoupon \u003d model.getFilteredCouponList().get(TypicalIndexes.INDEX_FIRST_COUPON.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_COUPON_SUCCESS, editedCoupon);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CouponStash(model.getCouponStash()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandTestUtil.showCouponAtIndex(model, TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon couponInFilteredList \u003d model.getFilteredCouponList()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .get(TypicalIndexes.INDEX_FIRST_COUPON.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon editedCoupon \u003d new CouponBuilder(couponInFilteredList).withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_COUPON,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "                new EditCouponDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alcen"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_COUPON_SUCCESS, editedCoupon);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CouponStash(model.getCouponStash()), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        expectedModel.setCoupon(model.getFilteredCouponList().get(0), editedCoupon, \"\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void execute_limitEqualToUsage_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        CommandTestUtil.showCouponAtIndex(model, TypicalIndexes.INDEX_SECOND_COUPON);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon couponInFilteredList \u003d model.getFilteredCouponList()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .get(TypicalIndexes.INDEX_FIRST_COUPON.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon editedCoupon \u003d new CouponBuilder(couponInFilteredList)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withLimit(couponInFilteredList.getUsage().value).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_COUPON,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                new EditCouponDescriptorBuilder().withLimit(couponInFilteredList.getUsage().value)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_COUPON_SUCCESS, editedCoupon);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CouponStash(model.getCouponStash()), new UserPrefs());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        expectedModel.setCoupon(model.getFilteredCouponList().get(0), editedCoupon, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public void execute_limitLowerThanUsage_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_SECOND_COUPON;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Integer currentUsage \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                Integer.parseInt(TypicalCoupons.getTypicalCoupons().get(targetIndex.getZeroBased()).getUsage().value);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        String newLimit \u003d String.valueOf(currentUsage - 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Coupon secondCoupon \u003d model.getFilteredCouponList().get(TypicalIndexes.INDEX_SECOND_COUPON.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        EditCommand.EditCouponDescriptor descriptor \u003d new EditCouponDescriptorBuilder(secondCoupon)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .withLimit(newLimit)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_SECOND_COUPON, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertCommandFailure(editCommand, model,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                String.format(EditCommand.MESSAGE_LIMIT_LESS_THAN_USAGE, currentUsage));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void execute_duplicateCouponUnfilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon secondCoupon \u003d model.getFilteredCouponList().get(TypicalIndexes.INDEX_SECOND_COUPON.getZeroBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        EditCommand.EditCouponDescriptor descriptor \u003d new EditCouponDescriptorBuilder(secondCoupon).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_COUPON, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_COUPON);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void execute_duplicateCouponFilteredList_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandTestUtil.showCouponAtIndex(model, TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // edit coupon in filtered list into a duplicate in CouponStash"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon couponInList \u003d model.getCouponStash().getCouponList()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .get(TypicalIndexes.INDEX_SECOND_COUPON.getZeroBased());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alcen"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_COUPON,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alcen"
        },
        "content": "                new EditCouponDescriptorBuilder(couponInList).build());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_COUPON);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void execute_invalidCouponIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCouponList().size() + 1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alcen"
        },
        "content": "        EditCommand.EditCouponDescriptor descriptor \u003d new EditCouponDescriptorBuilder()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_COUPON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * but smaller than size of CouponStash"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void execute_invalidCouponIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandTestUtil.showCouponAtIndex(model, TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_COUPON;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of CouponStash list"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCouponStash().getCouponList().size());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alcen"
        },
        "content": "                new EditCouponDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_COUPON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alcen"
        },
        "content": "        final EditCommand standardCommand \u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alcen"
        },
        "content": "                new EditCommand(TypicalIndexes.INDEX_FIRST_COUPON, CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alcen"
        },
        "content": "        EditCouponDescriptor copyDescriptor \u003d new EditCommand.EditCouponDescriptor(CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alcen"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(TypicalIndexes.INDEX_FIRST_COUPON, copyDescriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(standardCommand.equals("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alcen"
        },
        "content": "                new EditCommand(TypicalIndexes.INDEX_SECOND_COUPON, CommandTestUtil.DESC_AMY)));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(standardCommand.equals("
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alcen"
        },
        "content": "                new EditCommand(TypicalIndexes.INDEX_FIRST_COUPON, CommandTestUtil.DESC_BOB)));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 21,
      "alcen": 77,
      "KEVVVINN": 25,
      "nelsontky": 3,
      "-": 85
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/commands/EditCouponDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.EditCommand.EditCouponDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.EditCouponDescriptorBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class EditCouponDescriptorTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "        EditCouponDescriptor descriptorWithSameValues \u003d new EditCouponDescriptor(CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(CommandTestUtil.DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(CommandTestUtil.DESC_AMY.equals(CommandTestUtil.DESC_AMY));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(CommandTestUtil.DESC_BOB));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        EditCouponDescriptor editedAmy \u003d new EditCouponDescriptorBuilder(CommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "        editedAmy \u003d new EditCouponDescriptorBuilder(CommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                .withPromoCode(CommandTestUtil.VALID_PROMO_CODE_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // different usage -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        editedAmy \u003d new EditCouponDescriptorBuilder(CommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withUsage(CommandTestUtil.VALID_USAGE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // different limit -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        editedAmy \u003d new EditCouponDescriptorBuilder(CommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withLimit(CommandTestUtil.VALID_LIMIT_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // different start date -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        editedAmy \u003d new EditCouponDescriptorBuilder(CommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                .withStartDate(CommandTestUtil.VALID_EXPIRY_DATE_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // different expiry date -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        editedAmy \u003d new EditCouponDescriptorBuilder(CommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                .withExpiryDate(CommandTestUtil.VALID_EXPIRY_DATE_BOB).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "        editedAmy \u003d new EditCouponDescriptorBuilder(CommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 10,
      "Denise-Ng": 10,
      "alcen": 44,
      "nelsontky": 2
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/commands/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/commands/ExpiringCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_COUPONS_EXPIRING_BEFORE_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_COUPONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.DateIsBeforePredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.testutil.TypicalCoupons;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ExpiringCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "public class ExpiringCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalCoupons.getTypicalCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(TypicalCoupons.getTypicalCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        DateIsBeforePredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                new DateIsBeforePredicate(\"30-8-2020\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        DateIsBeforePredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                new DateIsBeforePredicate(\"31-12-2020\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        ExpiringCommand expiringFirstCommand \u003d new ExpiringCommand(firstPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        ExpiringCommand expiringSecondCommand \u003d new ExpiringCommand(secondPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertTrue(expiringFirstCommand.equals(expiringFirstCommand));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        ExpiringCommand expiringFirstCommandCopy \u003d new ExpiringCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertTrue(expiringFirstCommand.equals(expiringFirstCommandCopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(expiringFirstCommand.equals(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(expiringFirstCommand \u003d\u003d null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // different coupon -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(expiringFirstCommand.equals(expiringSecondCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void execute_noCouponsFound_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String inputDate \u003d \"1-6-2020\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_COUPONS_LISTED_OVERVIEW, 0) + \" Try a later date!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        DateIsBeforePredicate predicate \u003d preparePredicate(inputDate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        ExpiringCommand command \u003d new ExpiringCommand(predicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        expectedModel.updateFilteredCouponList(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredCouponList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void execute_multipleCouponsFound_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String inputDate \u003d \"1-12-2020\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_COUPONS_LISTED_OVERVIEW, 3)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                + \" \" + String.format(MESSAGE_COUPONS_EXPIRING_BEFORE_DATE, inputDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        DateIsBeforePredicate predicate \u003d preparePredicate(inputDate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        ExpiringCommand command \u003d new ExpiringCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        expectedModel.updateFilteredCouponList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertEquals(Arrays.asList(TypicalCoupons.CARL, TypicalCoupons.ELLE, TypicalCoupons.FIONA),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                model.getFilteredCouponList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Parses {@code userInput} into a {@code DateIsBeforePredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private DateIsBeforePredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return new DateIsBeforePredicate(userInput);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 85
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/commands/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_COUPONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.TypicalCoupons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalCoupons.getTypicalCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(TypicalCoupons.getTypicalCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // different coupon -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void execute_zeroKeywords_noCouponFound() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_COUPONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "        expectedModel.updateFilteredCouponList(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredCouponList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void execute_multipleKeywords_multipleCouponsFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_COUPONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "        expectedModel.updateFilteredCouponList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(Arrays.asList(TypicalCoupons.CARL, TypicalCoupons.ELLE, TypicalCoupons.FIONA),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "                model.getFilteredCouponList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 20,
      "-": 61
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/commands/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.showCouponAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.TypicalCoupons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private String expectedMessage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "        model \u003d new ModelManager(TypicalCoupons.getTypicalCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void execute_listIsNotFiltered_showsActiveList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        expectedMessage \u003d String.format(ListCommand.MESSAGE_SUCCESS, \"active\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void execute_listIsNotFiltered_showsArchivedList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        expectedMessage \u003d String.format(ListCommand.MESSAGE_SUCCESS, \"archived\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        expectedModel.updateFilteredCouponList(Model.PREDICATE_SHOW_ALL_ARCHIVED_COUPONS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertCommandSuccess(new ListCommand(CliSyntax.PREFIX_ARCHIVE), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void execute_listIsNotFiltered_showsUsedList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        expectedMessage \u003d String.format(ListCommand.MESSAGE_SUCCESS, \"used\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        expectedModel.updateFilteredCouponList(Model.PREDICATE_SHOW_ALL_USED_COUPONS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertCommandSuccess(new ListCommand(CliSyntax.PREFIX_USAGE), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void execute_listIsFiltered_showsActiveList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        showCouponAtIndex(model, TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        expectedMessage \u003d String.format(ListCommand.MESSAGE_SUCCESS, \"active\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        expectedModel.updateFilteredCouponList(Model.PREDICATE_SHOW_ALL_ACTIVE_COUPONS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void execute_listIsFiltered_showsArchivedList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        showCouponAtIndex(model, TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        expectedMessage \u003d String.format(ListCommand.MESSAGE_SUCCESS, \"archived\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        expectedModel.updateFilteredCouponList(Model.PREDICATE_SHOW_ALL_ARCHIVED_COUPONS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertCommandSuccess(new ListCommand(CliSyntax.PREFIX_ARCHIVE), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void execute_listIsFiltered_showsUsedList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "        showCouponAtIndex(model, TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        expectedMessage \u003d String.format(ListCommand.MESSAGE_SUCCESS, \"used\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        expectedModel.updateFilteredCouponList(Model.PREDICATE_SHOW_ALL_USED_COUPONS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertCommandSuccess(new ListCommand(CliSyntax.PREFIX_USAGE), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 40,
      "alcen": 35
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/commands/RedoCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.CouponStash;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.testutil.CouponBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.testutil.TypicalCoupons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "class RedoCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void execute_redoAdd_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                TypicalCoupons.getTypicalCouponStash(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Coupon validCoupon \u003d new CouponBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        model.addCoupon(validCoupon, \"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        model.undoCouponStash();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                TypicalCoupons.getTypicalCouponStash(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        expectedModel.addCoupon(validCoupon, \"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        String expectedMessage \u003d String.format(RedoCommand.MESSAGE_SUCCESS, \"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void execute_redoDelete_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                TypicalCoupons.getTypicalCouponStash(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Coupon couponToDelete \u003d model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                .getFilteredCouponList()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                .get(TypicalIndexes.INDEX_FIRST_COUPON.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        model.deleteCoupon(couponToDelete, \"\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        model.undoCouponStash();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                TypicalCoupons.getTypicalCouponStash(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        expectedModel.deleteCoupon(couponToDelete, \"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        String expectedMessage \u003d String.format(RedoCommand.MESSAGE_SUCCESS, \"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void execute_redoEdit_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                TypicalCoupons.getTypicalCouponStash(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Coupon editedCoupon \u003d new CouponBuilder().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        model.setCoupon(model.getFilteredCouponList().get(0), editedCoupon, \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        model.undoCouponStash();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                TypicalCoupons.getTypicalCouponStash(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        );"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        expectedModel.setCoupon("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                model.getFilteredCouponList().get(0), editedCoupon, \"\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        );"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        String expectedMessage \u003d String.format(RedoCommand.MESSAGE_SUCCESS, \"\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void execute_redoClear_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                TypicalCoupons.getTypicalCouponStash(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        );"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        model.setCouponStash(new CouponStash(), \"\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        model.undoCouponStash();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                TypicalCoupons.getTypicalCouponStash(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        );"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        expectedModel.setCouponStash(new CouponStash(), \"\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        String expectedMessage \u003d String.format(RedoCommand.MESSAGE_SUCCESS, \"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void execute_noStateToRedoTo_throwsCommandException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                TypicalCoupons.getTypicalCouponStash(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        );"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertThrows(CommandException.class, RedoCommand.MESSAGE_NO_STATE_TO_REDO_TO, () -\u003e redoCommand.execute(model));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nelsontky": 123
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/commands/UnarchiveCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.testutil.TypicalCoupons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class UnarchiveCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalCoupons.getTypicalCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        model.updateFilteredCouponList(Model.PREDICATE_SHOW_ALL_ARCHIVED_COUPONS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        ObservableList\u003cCoupon\u003e archivedCouponList \u003d model.getFilteredCouponList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon couponToUnarchive \u003d archivedCouponList.get(TypicalIndexes.INDEX_FIRST_COUPON.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        String expectedMessage \u003d String.format(UnarchiveCommand.MESSAGE_UNARCHIVE_COUPON_SUCCESS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                couponToUnarchive.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon expectedCoupon \u003d couponToUnarchive.unarchive();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        expectedModel.setCoupon(couponToUnarchive, expectedCoupon, \"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertCommandSuccess(unarchiveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        model.updateFilteredCouponList(Model.PREDICATE_SHOW_ALL_ARCHIVED_COUPONS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        ObservableList\u003cCoupon\u003e archivedCouponList \u003d model.getFilteredCouponList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(archivedCouponList.size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertCommandFailure(unarchiveCommand, model, Messages.MESSAGE_INVALID_COUPON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        UnarchiveCommand unarchiveFirstCommand \u003d new UnarchiveCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        UnarchiveCommand unarchiveSecondCommand \u003d new UnarchiveCommand(TypicalIndexes.INDEX_SECOND_COUPON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertTrue(unarchiveFirstCommand.equals(unarchiveFirstCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        UnarchiveCommand archiveFirstCommandCopy \u003d new UnarchiveCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertTrue(unarchiveFirstCommand.equals(archiveFirstCommandCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(unarchiveFirstCommand.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(unarchiveFirstCommand.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(unarchiveFirstCommand.equals(unarchiveSecondCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 72
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/commands/UndoCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.CouponStash;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.testutil.CouponBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.testutil.TypicalCoupons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "class UndoCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void execute_undoAdd_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                TypicalCoupons.getTypicalCouponStash(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        CouponBuilder couponBuilder \u003d new CouponBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Coupon validCoupon \u003d couponBuilder.build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        String commandText \u003d \"add \" + couponBuilder.FULL_COMMAND_TEXT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        model.addCoupon(validCoupon, commandText);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                TypicalCoupons.getTypicalCouponStash(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        String expectedMessage \u003d String.format(UndoCommand.MESSAGE_SUCCESS, commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void execute_undoDelete_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                TypicalCoupons.getTypicalCouponStash(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Coupon couponToDelete \u003d model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                .getFilteredCouponList()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                .get(TypicalIndexes.INDEX_FIRST_COUPON.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        model.deleteCoupon(couponToDelete, \"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                TypicalCoupons.getTypicalCouponStash(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        String expectedMessage \u003d String.format(UndoCommand.MESSAGE_SUCCESS, \"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void execute_undoEdit_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                TypicalCoupons.getTypicalCouponStash(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Coupon editedCoupon \u003d new CouponBuilder().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        model.setCoupon(model.getFilteredCouponList().get(0), editedCoupon, \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                TypicalCoupons.getTypicalCouponStash(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        );"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        String expectedMessage \u003d String.format(UndoCommand.MESSAGE_SUCCESS, \"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void execute_undoClear_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                TypicalCoupons.getTypicalCouponStash(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        );"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        model.setCouponStash(new CouponStash(), \"\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                TypicalCoupons.getTypicalCouponStash(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        );"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        String expectedMessage \u003d String.format(UndoCommand.MESSAGE_SUCCESS, \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void execute_noStateToUndoTo_throwsCommandException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                TypicalCoupons.getTypicalCouponStash(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new UserPrefs()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        );"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                CommandException.class, UndoCommand.MESSAGE_NO_STATE_TO_UNDO_TO, () -\u003e undoCommand.execute(model));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nelsontky": 118
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/commands/UsedCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "package csdev.couponstash.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.showCouponAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.DateSavingsSumMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.savings.MonetaryAmount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.savings.SavingsConversionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.testutil.CouponBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.testutil.TypicalCoupons;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "class UsedCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalCoupons.getTypicalCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon couponToBeUsed \u003d model.getFilteredCouponList().get(TypicalIndexes.INDEX_FIRST_COUPON.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        UsedCommand usedCommand \u003d new UsedCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Integer expectedUsageAmount \u003d Integer.parseInt(couponToBeUsed.getUsage().value) + 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "        DateSavingsSumMap expectedTotalSavings \u003d new DateSavingsSumMap("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "                LocalDate.now(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "                SavingsConversionUtil.convertToPure(couponToBeUsed.getSavingsForEachUse()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon expectedCoupon \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "                new CouponBuilder(couponToBeUsed).withUsage(String.valueOf(expectedUsageAmount))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "                        .withTotalSavings(expectedTotalSavings).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        expectedModel.setCoupon(couponToBeUsed, expectedCoupon, \"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        String expectedMessage \u003d String.format(UsedCommand.MESSAGE_USED_COUPON_SUCCESS, expectedCoupon.getName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertCommandSuccess(usedCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void execute_validIndexUnfilteredListWithOriginalAmount_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon couponToBeUsed \u003d model.getFilteredCouponList().get(TypicalIndexes.INDEX_SECOND_COUPON.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        MonetaryAmount originalAmount \u003d new MonetaryAmount(10.0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        UsedCommand usedCommand \u003d new UsedCommand(TypicalIndexes.INDEX_SECOND_COUPON, originalAmount);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Integer expectedUsageAmount \u003d Integer.parseInt(couponToBeUsed.getUsage().value) + 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "        DateSavingsSumMap expectedTotalSavings \u003d new DateSavingsSumMap("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "                LocalDate.now(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "                SavingsConversionUtil.convertToPure("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "                        couponToBeUsed.getSavingsForEachUse(), originalAmount));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon expectedCoupon \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                new CouponBuilder(couponToBeUsed).withUsage(String.valueOf(expectedUsageAmount))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "                        .withTotalSavings(expectedTotalSavings).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        expectedModel.setCoupon(couponToBeUsed, expectedCoupon, \"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        String expectedMessage \u003d String.format(UsedCommand.MESSAGE_USED_COUPON_SUCCESS, expectedCoupon.getName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertCommandSuccess(usedCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCouponList().size() + 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        UsedCommand usedCommand \u003d new UsedCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertCommandFailure(usedCommand, model, Messages.MESSAGE_INVALID_COUPON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        showCouponAtIndex(model, TypicalIndexes.INDEX_THIRD_COUPON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon couponToBeUsed \u003d model.getFilteredCouponList().get(TypicalIndexes.INDEX_FIRST_COUPON.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        UsedCommand usedCommand \u003d new UsedCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Integer expectedUsageAmount \u003d Integer.parseInt(couponToBeUsed.getUsage().value) + 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        DateSavingsSumMap expectedTotalSavings \u003d new DateSavingsSumMap("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                LocalDate.now(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                SavingsConversionUtil.convertToPure(couponToBeUsed.getSavingsForEachUse()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon expectedCoupon \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                new CouponBuilder(couponToBeUsed).withUsage(String.valueOf(expectedUsageAmount))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        .withTotalSavings(expectedTotalSavings).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        expectedModel.setCoupon(couponToBeUsed, expectedCoupon, \"\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        String expectedMessage \u003d String.format(UsedCommand.MESSAGE_USED_COUPON_SUCCESS, expectedCoupon.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertCommandSuccess(usedCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void execute_validIndexFilteredListWithArchiving_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        showCouponAtIndex(model, TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon couponToBeUsed \u003d model.getFilteredCouponList().get(TypicalIndexes.INDEX_FIRST_COUPON.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        UsedCommand usedCommand \u003d new UsedCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Integer expectedUsageAmount \u003d Integer.parseInt(couponToBeUsed.getUsage().value) + 1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alcen"
        },
        "content": "        DateSavingsSumMap expectedTotalSavings \u003d new DateSavingsSumMap("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alcen"
        },
        "content": "                LocalDate.now(),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alcen"
        },
        "content": "                SavingsConversionUtil.convertToPure(couponToBeUsed.getSavingsForEachUse()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon expectedCoupon \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alcen"
        },
        "content": "                new CouponBuilder(couponToBeUsed).withUsage(String.valueOf(expectedUsageAmount))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alcen"
        },
        "content": "                        .withTotalSavings(expectedTotalSavings).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        expectedModel.setCoupon(couponToBeUsed, expectedCoupon, \"\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        String expectedMessage \u003d String.format(UsedCommand.MESSAGE_USED_COUPON_SUCCESS, expectedCoupon.getName());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertCommandSuccess(usedCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void execute_validIndexFilteredListWithValidOriginalAmount_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        showCouponAtIndex(model, TypicalIndexes.INDEX_SECOND_COUPON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon couponToBeUsed \u003d model.getFilteredCouponList().get(TypicalIndexes.INDEX_FIRST_COUPON.getZeroBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        MonetaryAmount originalAmount \u003d new MonetaryAmount(10.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        UsedCommand usedCommand \u003d new UsedCommand(TypicalIndexes.INDEX_FIRST_COUPON, originalAmount);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getCouponStash(), new UserPrefs());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Integer expectedUsageAmount \u003d Integer.parseInt(couponToBeUsed.getUsage().value) + 1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alcen"
        },
        "content": "        DateSavingsSumMap expectedTotalSavings \u003d new DateSavingsSumMap("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alcen"
        },
        "content": "                LocalDate.now(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alcen"
        },
        "content": "                SavingsConversionUtil.convertToPure("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alcen"
        },
        "content": "                        couponToBeUsed.getSavingsForEachUse(), originalAmount));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon expectedCoupon \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                new CouponBuilder(couponToBeUsed).withUsage(String.valueOf(expectedUsageAmount))"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alcen"
        },
        "content": "                        .withTotalSavings(expectedTotalSavings).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        expectedModel.setCoupon(couponToBeUsed, expectedCoupon, \"\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        String expectedMessage \u003d String.format(UsedCommand.MESSAGE_USED_COUPON_SUCCESS, expectedCoupon.getName());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertCommandSuccess(usedCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        showCouponAtIndex(model, TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Index outOfBoundIndex \u003d TypicalIndexes.INDEX_SECOND_COUPON;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of CouponStash list"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCouponStash().getCouponList().size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        UsedCommand usedCommand \u003d new UsedCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertCommandFailure(usedCommand, model, Messages.MESSAGE_INVALID_COUPON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        UsedCommand usedFirstCommand \u003d new UsedCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        UsedCommand usedSecondCommand \u003d new UsedCommand(TypicalIndexes.INDEX_THIRD_COUPON);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        UsedCommand usedThirdCommandWithOriginalAmount \u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                new UsedCommand(TypicalIndexes.INDEX_SECOND_COUPON, new MonetaryAmount(10.00));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertTrue(usedFirstCommand.equals(usedFirstCommand));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        UsedCommand usedFirstCommandCopy \u003d new UsedCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertTrue(usedFirstCommand.equals(usedFirstCommandCopy));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(usedFirstCommand.equals(1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(usedFirstCommand \u003d\u003d null);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(usedFirstCommand.equals(usedSecondCommand));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // different original amount -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(usedFirstCommand.equals(usedThirdCommandWithOriginalAmount));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 159,
      "alcen": 23,
      "nelsontky": 4
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/parser/AddCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.EXPIRY_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.EXPIRY_DATE_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.INVALID_EXPIRY_DATE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.INVALID_LIMIT_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.INVALID_SAVINGS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.INVALID_START_DATE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.INVALID_USAGE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.LIMIT_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.LIMIT_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.PROMO_CODE_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.PROMO_CODE_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.SAVINGS_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.SAVINGS_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.SAVINGS_DESC_BOB_TWO_MONETARY_AMOUNT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.START_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.START_DATE_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.USAGE_DESC_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.USAGE_DESC_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_MONETARY_AMOUNT_TWO_TWENTY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_MONEY_SYMBOL;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_PROMO_CODE_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.ExpiryDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Limit;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.StartDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Usage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Savings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.tag.Tag;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.CouponBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.TypicalCoupons;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser(VALID_MONEY_SYMBOL.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon expectedCoupon \u003d new CouponBuilder(TypicalCoupons.BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PROMO_CODE_DESC_BOB + SAVINGS_DESC_BOB"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                + EXPIRY_DATE_DESC_BOB + START_DATE_DESC_BOB + USAGE_DESC_BOB + LIMIT_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                new AddCommand(expectedCoupon));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PROMO_CODE_DESC_BOB + SAVINGS_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                + EXPIRY_DATE_DESC_BOB + START_DATE_DESC_BOB + USAGE_DESC_BOB + LIMIT_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                new AddCommand(expectedCoupon));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        // multiple promoCodes - last promoCode accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PROMO_CODE_DESC_AMY + PROMO_CODE_DESC_BOB + SAVINGS_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                + EXPIRY_DATE_DESC_BOB + START_DATE_DESC_BOB + USAGE_DESC_BOB + LIMIT_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                new AddCommand(expectedCoupon));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // multiple savings monetary amount - last one accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PROMO_CODE_DESC_BOB + SAVINGS_DESC_BOB_TWO_MONETARY_AMOUNT"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                + EXPIRY_DATE_DESC_BOB + START_DATE_DESC_BOB + USAGE_DESC_BOB + LIMIT_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                new AddCommand(expectedCoupon));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // multiple usages - last usage accepted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PROMO_CODE_DESC_BOB + SAVINGS_DESC_BOB"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                + EXPIRY_DATE_DESC_BOB + START_DATE_DESC_BOB + USAGE_DESC_AMY + USAGE_DESC_BOB + LIMIT_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedCoupon));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // multiple limits - last limit accepted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PROMO_CODE_DESC_BOB + SAVINGS_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                + EXPIRY_DATE_DESC_BOB + START_DATE_DESC_BOB + USAGE_DESC_BOB + LIMIT_DESC_AMY + LIMIT_DESC_BOB"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedCoupon));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon expectedCouponMultipleTags \u003d new CouponBuilder(TypicalCoupons.BOB)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PROMO_CODE_DESC_BOB + SAVINGS_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                + EXPIRY_DATE_DESC_BOB + START_DATE_DESC_BOB + USAGE_DESC_BOB + LIMIT_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                new AddCommand(expectedCouponMultipleTags));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon expectedCoupon \u003d new CouponBuilder(TypicalCoupons.AMY).withTags().build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PROMO_CODE_DESC_AMY + SAVINGS_DESC_AMY"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                        + EXPIRY_DATE_DESC_AMY + START_DATE_DESC_AMY + USAGE_DESC_AMY + LIMIT_DESC_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alcen"
        },
        "content": "                new AddCommand(expectedCoupon));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // no start date"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        Coupon expectedCouponNoStartDate \u003d new CouponBuilder(TypicalCoupons.AMY).withStartDate().build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PROMO_CODE_DESC_AMY + SAVINGS_DESC_AMY"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                        + EXPIRY_DATE_DESC_AMY + USAGE_DESC_AMY + LIMIT_DESC_AMY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                new AddCommand(expectedCouponNoStartDate));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // no usages"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon expectedCouponNoUsages \u003d new CouponBuilder(TypicalCoupons.AMY).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PROMO_CODE_DESC_AMY + SAVINGS_DESC_AMY"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        + EXPIRY_DATE_DESC_AMY + START_DATE_DESC_AMY + LIMIT_DESC_AMY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                new AddCommand(expectedCouponNoUsages));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // no limit"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon expectedCouponNoLimit \u003d new CouponBuilder(TypicalCoupons.AMY).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PROMO_CODE_DESC_AMY + SAVINGS_DESC_AMY"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        + EXPIRY_DATE_DESC_AMY + START_DATE_DESC_AMY + USAGE_DESC_AMY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                new AddCommand(expectedCouponNoLimit));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PROMO_CODE_DESC_BOB + SAVINGS_DESC_BOB,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // missing savings prefix"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PROMO_CODE_BOB + VALID_MONEY_SYMBOL"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alcen"
        },
        "content": "                + VALID_MONETARY_AMOUNT_TWO_TWENTY, expectedMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PROMO_CODE_BOB + VALID_MONEY_SYMBOL"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alcen"
        },
        "content": "                + VALID_MONETARY_AMOUNT_TWO_TWENTY, expectedMessage);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PROMO_CODE_DESC_BOB + SAVINGS_DESC_BOB + EXPIRY_DATE_DESC_BOB"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                + USAGE_DESC_BOB + LIMIT_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // invalid expiry date"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PROMO_CODE_DESC_BOB + SAVINGS_DESC_BOB + INVALID_EXPIRY_DATE_DESC"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                + USAGE_DESC_BOB + LIMIT_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, ExpiryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        //invalid start date"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PROMO_CODE_DESC_BOB + SAVINGS_DESC_BOB + EXPIRY_DATE_DESC_BOB"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                + INVALID_START_DATE_DESC + USAGE_DESC_BOB + LIMIT_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                StartDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // invalid savings"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PROMO_CODE_DESC_BOB + INVALID_SAVINGS_DESC"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                + EXPIRY_DATE_DESC_BOB + LIMIT_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                Savings.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // invalid usage"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PROMO_CODE_DESC_BOB + SAVINGS_DESC_BOB + EXPIRY_DATE_DESC_BOB"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                + INVALID_USAGE_DESC + LIMIT_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Usage.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // invalid limit"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PROMO_CODE_DESC_BOB + SAVINGS_DESC_BOB + EXPIRY_DATE_DESC_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                + USAGE_DESC_BOB + INVALID_LIMIT_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Limit.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PROMO_CODE_DESC_BOB + SAVINGS_DESC_BOB + EXPIRY_DATE_DESC_BOB"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + VALID_PROMO_CODE_BOB + SAVINGS_DESC_BOB"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        + EXPIRY_DATE_DESC_BOB + USAGE_DESC_BOB + LIMIT_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PROMO_CODE_DESC_BOB + EXPIRY_DATE_DESC_BOB"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                + SAVINGS_DESC_BOB + USAGE_DESC_BOB + LIMIT_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 22,
      "ChesterSim": 46,
      "alcen": 40,
      "nelsontky": 27,
      "-": 49
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/parser/ArchiveCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class ArchiveCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private ArchiveCommandParser parser \u003d new ArchiveCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void parse_validArgs_returnsArchiveCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                new ArchiveCommand(TypicalIndexes.INDEX_FIRST_COUPON));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ArchiveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 24
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/parser/CommandParserTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/parser/ConditionCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.testutil.TypicalIndexes.INDEX_FIRST_COUPON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.logic.commands.ConditionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Condition;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "public class ConditionCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private ConditionCommandParser parser \u003d new ConditionCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private final String nonEmptyRemark \u003d \"Some remark.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public void parse_indexSpecified_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // have remark"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_COUPON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_CONDITION + nonEmptyRemark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        ConditionCommand expectedCommand \u003d new ConditionCommand(INDEX_FIRST_COUPON,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                new Condition(nonEmptyRemark));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // no remark"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_CONDITION;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        expectedCommand \u003d new ConditionCommand(INDEX_FIRST_COUPON, new Condition(\"\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ConditionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertParseFailure(parser, ConditionCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // no index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertParseFailure(parser, ConditionCommand.COMMAND_WORD + \" \" + nonEmptyRemark, expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KEVVVINN": 44
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/parser/CouponStashParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_MONEY_SYMBOL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.logic.commands.ConditionCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.logic.commands.UsedCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Condition;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.CouponBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.CouponUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.EditCouponDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class CouponStashParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "    // use an arbitrary symbol as the money symbol"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final CouponStashParser parser \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "            new CouponStashParser(VALID_MONEY_SYMBOL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon coupon \u003d new CouponBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "                CouponUtil.getAddCommand(coupon, VALID_MONEY_SYMBOL.toString()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        AddCommand newCommand \u003d new AddCommand(coupon);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertEquals(newCommand, command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + TypicalIndexes.INDEX_FIRST_COUPON.getOneBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(new DeleteCommand(TypicalIndexes.INDEX_FIRST_COUPON), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon coupon \u003d new CouponBuilder().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "        EditCommand.EditCouponDescriptor descriptor \u003d new EditCouponDescriptorBuilder(coupon).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "        String test \u003d CouponUtil.getEditCouponDescriptorDetails(descriptor, VALID_MONEY_SYMBOL.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "                + TypicalIndexes.INDEX_FIRST_COUPON.getOneBased() + \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "                + CouponUtil.getEditCouponDescriptorDetails(descriptor, VALID_MONEY_SYMBOL.toString()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(new EditCommand(TypicalIndexes.INDEX_FIRST_COUPON, descriptor), command);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" a/\") instanceof ListCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" u/\") instanceof ListCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void parseCommand_used() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        UsedCommand command \u003d (UsedCommand) parser.parseCommand("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                UsedCommand.COMMAND_WORD + \" \" + TypicalIndexes.INDEX_FIRST_COUPON.getOneBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertEquals(new UsedCommand(TypicalIndexes.INDEX_FIRST_COUPON), command);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public void parseCommand_condition() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        final Condition condition \u003d new Condition(\"Some remark.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        ConditionCommand command \u003d (ConditionCommand) parser.parseCommand(ConditionCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                + TypicalIndexes.INDEX_FIRST_COUPON.getOneBased() + \" \" + PREFIX_CONDITION + condition.value);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertEquals(new ConditionCommand(TypicalIndexes.INDEX_FIRST_COUPON, condition), command);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alcen"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), () -\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alcen"
        },
        "content": "                parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alcen"
        },
        "content": "                parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 10,
      "Denise-Ng": 2,
      "alcen": 42,
      "KEVVVINN": 10,
      "nelsontky": 1,
      "-": 63
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/parser/DeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                new DeleteCommand(TypicalIndexes.INDEX_FIRST_COUPON));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "                \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 2,
      "alcen": 6,
      "-": 24
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/parser/EditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.EXPIRY_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.INVALID_EXPIRY_DATE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.INVALID_LIMIT_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.INVALID_START_DATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.LIMIT_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.LIMIT_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.PROMO_CODE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.PROMO_CODE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.START_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.USAGE_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_EXPIRY_DATE_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_LIMIT_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_LIMIT_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_MONEY_SYMBOL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_PROMO_CODE_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_PROMO_CODE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_START_DATE_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.EditCommand.EditCouponDescriptor;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.ExpiryDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Limit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.StartDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.tag.Tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.EditCouponDescriptorBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser(VALID_MONEY_SYMBOL.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alcen"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + INVALID_LIMIT_DESC,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                Limit.MESSAGE_CONSTRAINTS); // invalid limit"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + INVALID_EXPIRY_DATE_DESC,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                ExpiryDate.MESSAGE_CONSTRAINTS); // invalid expiry date"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + INVALID_START_DATE_DESC,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                StartDate.MESSAGE_CONSTRAINTS); // invalid start date"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alcen"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Coupon} being edited,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alcen"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alcen"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alcen"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                \"1\" + INVALID_NAME_DESC + VALID_PROMO_CODE_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_SECOND_COUPON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PROMO_CODE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                + NAME_DESC_AMY + LIMIT_DESC_BOB + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alcen"
        },
        "content": "        EditCommand.EditCouponDescriptor descriptor \u003d new EditCouponDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                .withPromoCode(VALID_PROMO_CODE_BOB)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withLimit(VALID_LIMIT_BOB)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alcen"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_COUPON;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PROMO_CODE_DESC_BOB;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        EditCouponDescriptor descriptor \u003d new EditCouponDescriptorBuilder().withPromoCode(VALID_PROMO_CODE_BOB)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alcen"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_THIRD_COUPON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alcen"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alcen"
        },
        "content": "        EditCommand.EditCouponDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alcen"
        },
        "content": "                new EditCouponDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alcen"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        // promoCode"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PROMO_CODE_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        descriptor \u003d new EditCouponDescriptorBuilder().withPromoCode(VALID_PROMO_CODE_AMY).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alcen"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // limit"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + LIMIT_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        descriptor \u003d new EditCouponDescriptorBuilder().withLimit(VALID_LIMIT_AMY).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // expiry date"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EXPIRY_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        descriptor \u003d new EditCouponDescriptorBuilder().withExpiryDate(VALID_EXPIRY_DATE_AMY).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // start date"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + START_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        descriptor \u003d new EditCouponDescriptorBuilder().withStartDate(VALID_START_DATE_AMY).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alcen"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alcen"
        },
        "content": "        descriptor \u003d new EditCouponDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alcen"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void pasrse_editUsageField_failure() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_THIRD_COUPON;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + USAGE_DESC_AMY;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, userInput, EditCommand.MESSAGE_CANNOT_EDIT_USAGE);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_COUPON;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PROMO_CODE_DESC_AMY"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                + TAG_DESC_FRIEND + PROMO_CODE_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                + PROMO_CODE_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        EditCouponDescriptor descriptor \u003d new EditCouponDescriptorBuilder().withPromoCode(VALID_PROMO_CODE_BOB)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alcen"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Index targetIndex \u003d TypicalIndexes.INDEX_THIRD_COUPON;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alcen"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alcen"
        },
        "content": "        EditCommand.EditCouponDescriptor descriptor \u003d new EditCouponDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alcen"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 22,
      "ChesterSim": 30,
      "alcen": 140,
      "nelsontky": 18
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/parser/FindCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 33
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/parser/ListCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void parse_invalidArg_throwsParseException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        //Invalid prefix (only a/, u/ or no prefix allowed)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \" e/\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        //Multiple valid prefixes"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \" a/ u/\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void parse_emptyArg_returnActiveListCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        ListCommand expectedListCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"     \", expectedListCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void parse_validArgs_returnsArchivedListCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        ListCommand expectedListCommand \u003d new ListCommand(new Prefix(\"a/\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \" a/\", expectedListCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // leading and trailing whitespaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \" \\n a/ \\n\", expectedListCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void parse_validArgs_returnsUsedListCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        ListCommand expectedListCommand \u003d new ListCommand(CliSyntax.PREFIX_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \" u/\", expectedListCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // leading and trailing whitespaces"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"\\n u/ \\n\", expectedListCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 51
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Limit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.coupon.PromoCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Usage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private static final String INVALID_USAGE \u003d \"-1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private static final String INVALID_LIMIT \u003d \"asdf\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private static final String VALID_PROMO_CODE \u003d \"STASH4LYFE\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private static final String VALID_USAGE \u003d \"1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private static final String VALID_LIMIT \u003d \"5\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_COUPON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(TypicalIndexes.INDEX_FIRST_COUPON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void parsePromoCode_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePromoCode((String) null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void parsePromoCode_validValueWithoutWhitespace_returnsPromoCode() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        PromoCode expectedPromoCode \u003d new PromoCode(VALID_PROMO_CODE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertEquals(expectedPromoCode, ParserUtil.parsePromoCode(VALID_PROMO_CODE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void parsePromoCode_validValueWithWhitespace_returnsTrimmedPromoCode() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        String promoCodeWithWhitespace \u003d WHITESPACE + VALID_PROMO_CODE + WHITESPACE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        PromoCode expectedPromoCode \u003d new PromoCode(VALID_PROMO_CODE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertEquals(expectedPromoCode, ParserUtil.parsePromoCode(promoCodeWithWhitespace));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void parseUsage_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseUsage((String) null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void parseUsage_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseUsage(INVALID_USAGE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void parseUsage_validValueWithoutWhitespace_returnsUsage() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Usage expectedUsage \u003d new Usage(VALID_USAGE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertEquals(expectedUsage, ParserUtil.parseUsage(VALID_USAGE));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void parseUsage_validValueWithWhitespace_returnsTrimmedUsage() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        String usageWithWhitespace \u003d WHITESPACE + VALID_USAGE + WHITESPACE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Usage expectedUsage \u003d new Usage(VALID_USAGE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertEquals(expectedUsage, ParserUtil.parseUsage(usageWithWhitespace));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void parseLimit_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseLimit((String) null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void parseLimit_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseLimit(INVALID_LIMIT));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void parseLimit_validValueWithoutWhitespace_returnsLimit() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Limit expectedLimit \u003d new Limit(VALID_LIMIT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertEquals(expectedLimit, ParserUtil.parseLimit(VALID_LIMIT));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void parseLimit_validValueWithWhitespace_returnsTrimmedLimit() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        String limitWithWhitespace \u003d WHITESPACE + VALID_LIMIT + WHITESPACE;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Limit expectedLimit \u003d new Limit(VALID_LIMIT);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertEquals(expectedLimit, ParserUtil.parseLimit(limitWithWhitespace));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 29,
      "alcen": 9,
      "KEVVVINN": 2,
      "nelsontky": 11,
      "-": 143
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/parser/UnarchiveCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class UnarchiveCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private UnarchiveCommandParser parser \u003d new UnarchiveCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void parse_validArgs_returnsUnarchiveCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                new UnarchiveCommand(TypicalIndexes.INDEX_FIRST_COUPON));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnarchiveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 24
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/logic/parser/UsedCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "package csdev.couponstash.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_MONEY_SYMBOL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.logic.commands.UsedCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class UsedCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private UsedCommandParser parser \u003d new UsedCommandParser(VALID_MONEY_SYMBOL.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "                \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "                        String.format(UsedCommand.MESSAGE_USAGE, VALID_MONEY_SYMBOL, VALID_MONEY_SYMBOL)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test void parse_validArgs_returnsUsedCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        UsedCommand expectedFirstUsedCommand \u003d new UsedCommand(TypicalIndexes.INDEX_FIRST_COUPON);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1\", expectedFirstUsedCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        UsedCommand expectedSecondUsedCommand \u003d new UsedCommand(TypicalIndexes.INDEX_SECOND_COUPON);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"2 s/\" + VALID_MONEY_SYMBOL + \"10\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                expectedSecondUsedCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 26,
      "alcen": 3
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/model/CouponStashTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_LIMIT_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_START_DATE_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_USAGE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.TypicalCoupons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.TypicalCoupons.getTypicalCouponStash;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.exceptions.DuplicateCouponException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.CouponBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class CouponStashTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final CouponStash couponStash \u003d new CouponStash();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(Collections.emptyList(), couponStash.getCouponList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e couponStash.resetData(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void resetData_withValidReadOnlyCouponStash_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CouponStash newData \u003d getTypicalCouponStash();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "        couponStash.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(newData, couponStash);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void resetData_withDuplicateCoupons_throwsDuplicateCouponException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // Two coupons with the same identity fields"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon editedAlice \u003d new CouponBuilder(ALICE)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withStartDate(VALID_START_DATE_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withUsage(VALID_USAGE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withLimit(VALID_LIMIT_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "        List\u003cCoupon\u003e newCoupons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CouponStashStub newData \u003d new CouponStashStub(newCoupons);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(DuplicateCouponException.class, () -\u003e couponStash.resetData(newData));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void hasCoupon_nullCoupon_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e couponStash.hasCoupon(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void hasCoupon_couponNotInCouponStash_returnsFalse() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(couponStash.hasCoupon(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void hasCoupon_couponInCouponStash_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "        couponStash.addCoupon(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(couponStash.hasCoupon(ALICE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void hasCoupon_couponWithSameIdentityFieldsInCouponStash_returnsTrue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alcen"
        },
        "content": "        couponStash.addCoupon(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon editedAlice \u003d new CouponBuilder(ALICE)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withStartDate(VALID_START_DATE_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withUsage(VALID_USAGE_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withLimit(VALID_LIMIT_BOB)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(couponStash.hasCoupon(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void getCouponList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e couponStash.getCouponList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * A stub ReadOnlyCouponStash whose coupons list can violate interface constraints."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static class CouponStashStub implements ReadOnlyCouponStash {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alcen"
        },
        "content": "        private final ObservableList\u003cCoupon\u003e coupons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CouponStashStub(Collection\u003cCoupon\u003e coupons) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alcen"
        },
        "content": "            this.coupons.setAll(coupons);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alcen"
        },
        "content": "        public ObservableList\u003cCoupon\u003e getCouponList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alcen"
        },
        "content": "            return coupons;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 12,
      "Denise-Ng": 2,
      "alcen": 46,
      "-": 54
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.model.Model.PREDICATE_SHOW_ALL_ACTIVE_COUPONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.TypicalCoupons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.TypicalCoupons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.CouponStashBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.testutil.TypicalCoupons;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(new CouponStash(), new CouponStash(modelManager.getCouponStash()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "        userPrefs.setCouponStashFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "        userPrefs.setCouponStashFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCouponStashFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setCouponStashFilePath(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCouponStashFilePath_validPath_setsCouponStashFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "        modelManager.setCouponStashFilePath(path);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(path, modelManager.getCouponStashFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void hasCoupon_nullCoupon_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasCoupon(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void hasCoupon_couponNotInStash_returnsFalse() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(modelManager.hasCoupon(ALICE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void hasCoupon_couponInStash_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        modelManager.addCoupon(ALICE, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(modelManager.hasCoupon(ALICE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredCouponList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void getFilteredPersonList_archiveExpiredCoupons_returnsTrue() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        CouponStash couponStash \u003d new CouponStash(TypicalCoupons.getTypicalCouponStash());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        FilteredList\u003cCoupon\u003e filteredCouponList \u003d couponStash.getCouponList()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .filtered(coupon -\u003e coupon.getExpiryDate().date.isAfter(LocalDate.now()))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .filtered(coupon -\u003e !Boolean.parseBoolean(coupon.getArchived().value));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        modelManager \u003d new ModelManager(couponStash, new UserPrefs());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertEquals(filteredCouponList, modelManager.getFilteredCouponList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CouponStash couponStash \u003d new CouponStashBuilder().withCoupon(ALICE).withCoupon(BENSON).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CouponStash differentCouponStash \u003d new CouponStash();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alcen"
        },
        "content": "        modelManager \u003d new ModelManager(couponStash, userPrefs);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alcen"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(couponStash, userPrefs);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // different couponStash -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentCouponStash, userPrefs)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alcen"
        },
        "content": "        modelManager.updateFilteredCouponList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(couponStash, userPrefs)));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        modelManager.updateFilteredCouponList(PREDICATE_SHOW_ALL_ACTIVE_COUPONS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alcen"
        },
        "content": "        differentUserPrefs.setCouponStashFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(couponStash, differentUserPrefs)));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 16,
      "Denise-Ng": 2,
      "alcen": 30,
      "nelsontky": 1,
      "-": 99
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/model/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCouponStashFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setCouponStashFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/model/coupon/ArchivedTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class ArchivedTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Archived(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void constructor_invalidArchived_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        String invalidArchived \u003d \"archived\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Archived(invalidArchived));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void isValidState() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // null state"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Archived.isValidState(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // invalid usage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(Archived.isValidState(\" \")); // spaces only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(Archived.isValidState(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(Archived.isValidState(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(Archived.isValidState(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(Archived.isValidState(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(Archived.isValidState(\"-12345\")); // negative numbers only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // valid usage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertTrue(Archived.isValidState(\"true\")); // true only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertTrue(Archived.isValidState(\"false\")); // false only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 38
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/model/coupon/ConditionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "public class ConditionTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Condition condition \u003d new Condition(\"Must spend over $100\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertTrue(condition.equals(condition));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Condition conditionCopy \u003d new Condition(condition.value);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertTrue(condition.equals(conditionCopy));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertFalse(condition.equals(1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertFalse(condition.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        Condition differentCondition \u003d new Condition(\"Bye\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertFalse(condition.equals(differentCondition));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KEVVVINN": 31
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/model/coupon/CouponTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.CouponBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.TypicalCoupons;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class CouponTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon coupon \u003d new CouponBuilder().build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e coupon.getTags().remove(0));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void increaseUsageByOne_anyCoupon_returnsTrue() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon coupon \u003d new CouponBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Usage currentUsage \u003d coupon.getUsage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon usedCoupon \u003d coupon.increaseUsageByOne();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Usage newUsage \u003d usedCoupon.getUsage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        int difference \u003d Integer.parseInt(newUsage.value) - Integer.parseInt(currentUsage.value);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertTrue(difference \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void setArchivalState_true_returnsTrue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon coupon \u003d new CouponBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        boolean stateOfArchival \u003d Boolean.valueOf(coupon.archive().getArchived().value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertTrue(stateOfArchival);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void setArchivalState_false_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        Coupon coupon \u003d new CouponBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        boolean stateOfArchival \u003d Boolean.valueOf(coupon.unarchive().getArchived().value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(stateOfArchival);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void isSameCoupon() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(TypicalCoupons.ALICE.isSameCoupon(TypicalCoupons.ALICE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(TypicalCoupons.ALICE.isSameCoupon(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        Coupon editedAlice \u003d new CouponBuilder(TypicalCoupons.ALICE).withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(TypicalCoupons.ALICE.isSameCoupon(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        //different promoCode -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        editedAlice \u003d new CouponBuilder(TypicalCoupons.ALICE)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .withPromoCode(CommandTestUtil.VALID_PROMO_CODE_BOB).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertFalse(TypicalCoupons.ALICE.isSameCoupon(editedAlice));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        //different expiry date -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        editedAlice \u003d new CouponBuilder(TypicalCoupons.ALICE).withExpiryDate(CommandTestUtil.VALID_EXPIRY_DATE_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertFalse(TypicalCoupons.ALICE.isSameCoupon(editedAlice));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        //different savings -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        editedAlice \u003d new CouponBuilder(TypicalCoupons.ALICE).withSavings(CommandTestUtil.VALID_SAVINGS_BOB).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertFalse(TypicalCoupons.ALICE.isSameCoupon(editedAlice));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        //different tags -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        editedAlice \u003d new CouponBuilder(TypicalCoupons.ALICE)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .withUsage(CommandTestUtil.VALID_USAGE_AMY)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .withLimit(CommandTestUtil.VALID_USAGE_BOB)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .withTags(CommandTestUtil.VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(TypicalCoupons.ALICE.isSameCoupon(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // different state of archival -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        editedAlice \u003d new CouponBuilder(TypicalCoupons.ALICE)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .withArchived(\"true\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(TypicalCoupons.ALICE.isSameCoupon(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon aliceCopy \u003d new CouponBuilder(TypicalCoupons.ALICE).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(TypicalCoupons.ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(TypicalCoupons.ALICE.equals(TypicalCoupons.ALICE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(TypicalCoupons.ALICE.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(TypicalCoupons.ALICE.equals(5));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // different coupon -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(TypicalCoupons.ALICE.equals(TypicalCoupons.BOB));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon editedAlice \u003d new CouponBuilder(TypicalCoupons.ALICE).withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(TypicalCoupons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // different promoCode -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        editedAlice \u003d new CouponBuilder(TypicalCoupons.ALICE)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .withPromoCode(CommandTestUtil.VALID_PROMO_CODE_BOB).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertFalse(TypicalCoupons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // different usage -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        editedAlice \u003d new CouponBuilder(TypicalCoupons.ALICE).withUsage(CommandTestUtil.VALID_USAGE_BOB).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertFalse(TypicalCoupons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // different limit -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        editedAlice \u003d new CouponBuilder(TypicalCoupons.ALICE).withLimit(CommandTestUtil.VALID_LIMIT_BOB).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertFalse(TypicalCoupons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // different expiry date -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        editedAlice \u003d new CouponBuilder(TypicalCoupons.ALICE).withExpiryDate(CommandTestUtil.VALID_EXPIRY_DATE_BOB)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        assertFalse(TypicalCoupons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        // different start date -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        editedAlice \u003d new CouponBuilder(TypicalCoupons.ALICE).withStartDate(CommandTestUtil.VALID_START_DATE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(TypicalCoupons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alcen"
        },
        "content": "        editedAlice \u003d new CouponBuilder(TypicalCoupons.ALICE).withTags(CommandTestUtil.VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(TypicalCoupons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // different state of archival -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        editedAlice \u003d new CouponBuilder(TypicalCoupons.ALICE).withArchived(\"true\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(TypicalCoupons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 34,
      "alcen": 64,
      "KEVVVINN": 40,
      "nelsontky": 2
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/model/coupon/DateIsBeforePredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.testutil.CouponBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "public class DateIsBeforePredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String firstPredicateDate \u003d \"31-12-2020\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String secondPredicateDate \u003d \"30-8-2020\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        DateIsBeforePredicate firstPredicate \u003d new DateIsBeforePredicate(firstPredicateDate);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        DateIsBeforePredicate secondPredicate \u003d new DateIsBeforePredicate(secondPredicateDate);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        DateIsBeforePredicate firstPredicateCopy \u003d new DateIsBeforePredicate(firstPredicateDate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(firstPredicate \u003d\u003d null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // different coupon -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void test_expiryDateIsBefore_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        DateIsBeforePredicate predicate \u003d new DateIsBeforePredicate(\"2-6-2020\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertTrue(predicate.test(new CouponBuilder().withExpiryDate(\"1-6-2020\").build()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // Different date format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        predicate \u003d new DateIsBeforePredicate(\"30-08-2020\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertTrue(predicate.test(new CouponBuilder().withExpiryDate(\"1-8-2020\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void test_expiryDateNotBefore_returnsFalse() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        //No coupons before expiry date"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        DateIsBeforePredicate predicate \u003d new DateIsBeforePredicate(\"1-6-2020\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(predicate.test(new CouponBuilder().withExpiryDate(\"30-8-2020\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 54
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/model/coupon/ExpiryDateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "public class ExpiryDateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExpiryDate(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void constructor_invalidExpiryDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String invalidExpiryDate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ExpiryDate(invalidExpiryDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void isValidExpiryDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // null Expiry Date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ExpiryDate.isValidExpiryDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // invalid expiry dates"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"1-1-11\")); // only 2 numbers for yyyy"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"date\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(ExpiryDate.isValidExpiryDate(\"1 - 30 - 2020\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // valid expiry dates"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertTrue(ExpiryDate.isValidExpiryDate(\"01-08-2020\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertTrue(ExpiryDate.isValidExpiryDate(\"1-8-2020\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 38
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/model/coupon/LimitTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class LimitTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Limit(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void constructor_invalidLimit_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        String invalidLimit \u003d \"asdf\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Limit(invalidLimit));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void isValidLimit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // null limit"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Limit.isValidLimit(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // invalid limit"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(Limit.isValidLimit(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(Limit.isValidLimit(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(Limit.isValidLimit(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(Limit.isValidLimit(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // valid limit"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertTrue(Limit.isValidLimit(\"12345\")); // positive numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertTrue(Limit.isValidLimit(\"-12345\")); // negative numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertTrue(Limit.isValidLimit(\"Infinity\")); // Infinity"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 38
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/model/coupon/NameContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.CouponBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // different coupon -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(predicate.test(new CouponBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(predicate.test(new CouponBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(predicate.test(new CouponBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(predicate.test(new CouponBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(predicate.test(new CouponBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(predicate.test(new CouponBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        // Keywords match promoCode, and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"STASH\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertFalse(predicate.test(new CouponBuilder().withName(\"Alice\").withPromoCode(\"STASH\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 9,
      "nelsontky": 4,
      "-": 62
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/model/coupon/NameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/model/coupon/PromoCodeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "public class PromoCodeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PromoCode(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nelsontky": 14
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/model/coupon/StartDateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "public class StartDateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new StartDate(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void constructor_invalidStartDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String invalidStartDate \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new StartDate(invalidStartDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void isValidStartDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // null Start Date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StartDate.isValidStartDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // invalid start dates"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"1-1-11\")); // only 2 numbers for yyyy"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"date\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertFalse(StartDate.isValidStartDate(\"1 - 30 - 2020\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        // valid start dates"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertTrue(StartDate.isValidStartDate(\"01-08-2020\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertTrue(StartDate.isValidStartDate(\"1-8-2020\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 38
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/model/coupon/UniqueCouponListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.exceptions.CouponNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.exceptions.DuplicateCouponException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.CouponBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.TypicalCoupons;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class UniqueCouponListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private final UniqueCouponList uniqueCouponList \u003d new UniqueCouponList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void contains_nullCoupon_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCouponList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void contains_couponNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(uniqueCouponList.contains(TypicalCoupons.ALICE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void contains_couponInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "        uniqueCouponList.add(TypicalCoupons.ALICE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(uniqueCouponList.contains(TypicalCoupons.ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void contains_couponWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "        uniqueCouponList.add(TypicalCoupons.ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon editedAlice \u003d new CouponBuilder(TypicalCoupons.ALICE).withTags(CommandTestUtil.VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertTrue(uniqueCouponList.contains(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void add_nullCoupon_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCouponList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void add_duplicateCoupon_throwsDuplicateCouponException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "        uniqueCouponList.add(TypicalCoupons.ALICE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(DuplicateCouponException.class, () -\u003e uniqueCouponList.add(TypicalCoupons.ALICE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCoupon_nullTargetCoupon_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCouponList.setCoupon(null, TypicalCoupons.ALICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCoupon_nullEditedCoupon_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCouponList.setCoupon(TypicalCoupons.ALICE, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCoupon_targetCouponNotInList_throwsCouponNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(CouponNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "                uniqueCouponList.setCoupon(TypicalCoupons.ALICE, TypicalCoupons.ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCoupon_editedCouponIsSameCoupon_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "        uniqueCouponList.add(TypicalCoupons.ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "        uniqueCouponList.setCoupon(TypicalCoupons.ALICE, TypicalCoupons.ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alcen"
        },
        "content": "        UniqueCouponList expectedUniqueCouponList \u003d new UniqueCouponList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": "        expectedUniqueCouponList.add(TypicalCoupons.ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(expectedUniqueCouponList, uniqueCouponList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCoupon_editedCouponHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alcen"
        },
        "content": "        uniqueCouponList.add(TypicalCoupons.ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Coupon editedAlice \u003d new CouponBuilder(TypicalCoupons.ALICE).withTags(CommandTestUtil.VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": "        uniqueCouponList.setCoupon(TypicalCoupons.ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "        UniqueCouponList expectedUniqueCouponList \u003d new UniqueCouponList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alcen"
        },
        "content": "        expectedUniqueCouponList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(expectedUniqueCouponList, uniqueCouponList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCoupon_editedCouponHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alcen"
        },
        "content": "        uniqueCouponList.add(TypicalCoupons.ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alcen"
        },
        "content": "        uniqueCouponList.setCoupon(TypicalCoupons.ALICE, TypicalCoupons.BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alcen"
        },
        "content": "        UniqueCouponList expectedUniqueCouponList \u003d new UniqueCouponList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alcen"
        },
        "content": "        expectedUniqueCouponList.add(TypicalCoupons.BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(expectedUniqueCouponList, uniqueCouponList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCoupon_editedCouponHasNonUniqueIdentity_throwsDuplicateCouponException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alcen"
        },
        "content": "        uniqueCouponList.add(TypicalCoupons.ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alcen"
        },
        "content": "        uniqueCouponList.add(TypicalCoupons.BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(DuplicateCouponException.class, () -\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alcen"
        },
        "content": "                uniqueCouponList.setCoupon(TypicalCoupons.ALICE, TypicalCoupons.BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void remove_nullCoupon_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCouponList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void remove_couponDoesNotExist_throwsCouponNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(CouponNotFoundException.class, () -\u003e uniqueCouponList.remove(TypicalCoupons.ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void remove_existingCoupon_removesCoupon() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alcen"
        },
        "content": "        uniqueCouponList.add(TypicalCoupons.ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alcen"
        },
        "content": "        uniqueCouponList.remove(TypicalCoupons.ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alcen"
        },
        "content": "        UniqueCouponList expectedUniqueCouponList \u003d new UniqueCouponList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(expectedUniqueCouponList, uniqueCouponList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCoupons_nullUniqueCouponList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCouponList.setCoupons((UniqueCouponList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCoupons_uniqueCouponList_replacesOwnListWithProvidedUniqueCouponList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alcen"
        },
        "content": "        uniqueCouponList.add(TypicalCoupons.ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alcen"
        },
        "content": "        UniqueCouponList expectedUniqueCouponList \u003d new UniqueCouponList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alcen"
        },
        "content": "        expectedUniqueCouponList.add(TypicalCoupons.BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alcen"
        },
        "content": "        uniqueCouponList.setCoupons(expectedUniqueCouponList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(expectedUniqueCouponList, uniqueCouponList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCoupons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCouponList.setCoupons((List\u003cCoupon\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCoupons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alcen"
        },
        "content": "        uniqueCouponList.add(TypicalCoupons.ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alcen"
        },
        "content": "        List\u003cCoupon\u003e couponList \u003d Collections.singletonList(TypicalCoupons.BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alcen"
        },
        "content": "        uniqueCouponList.setCoupons(couponList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alcen"
        },
        "content": "        UniqueCouponList expectedUniqueCouponList \u003d new UniqueCouponList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alcen"
        },
        "content": "        expectedUniqueCouponList.add(TypicalCoupons.BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(expectedUniqueCouponList, uniqueCouponList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void setCoupons_listWithDuplicateCoupons_throwsDuplicateCouponException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alcen"
        },
        "content": "        List\u003cCoupon\u003e listWithDuplicateCoupons \u003d Arrays.asList(TypicalCoupons.ALICE, TypicalCoupons.ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(DuplicateCouponException.class, () -\u003e uniqueCouponList.setCoupons(listWithDuplicateCoupons));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alcen"
        },
        "content": "            -\u003e uniqueCouponList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 87,
      "-": 83
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/model/coupon/UsageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "package csdev.couponstash.model.coupon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "public class UsageTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Usage(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void constructor_invalidUsage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        String invalidUsage \u003d \"-1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Usage(invalidUsage));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void isValidUsage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // null usage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Limit.isValidLimit(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // invalid usage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(Usage.isValidUsage(\" \")); // spaces only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(Usage.isValidUsage(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(Usage.isValidUsage(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertFalse(Usage.isValidUsage(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        // valid usage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertTrue(Usage.isValidUsage(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 35
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/model/history/CommandTextHistoryTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "package csdev.couponstash.model.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "class CommandTextHistoryTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    void add() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        CommandTextHistory commandTextHistory \u003d new CommandTextHistory();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        commandTextHistory.add(\"first\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        commandTextHistory.add(\"second\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        commandTextHistory.add(\"third\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertEquals(commandTextHistory.getUp(), \"third\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertEquals(commandTextHistory.getUp(), \"second\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertEquals(commandTextHistory.getUp(), \"first\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    void getDown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        CommandTextHistory commandTextHistory \u003d new CommandTextHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        commandTextHistory.add(\"first\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        commandTextHistory.add(\"second\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        commandTextHistory.add(\"third\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertEquals(commandTextHistory.getUp(), \"third\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertEquals(commandTextHistory.getUp(), \"second\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertEquals(commandTextHistory.getUp(), \"first\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertEquals(commandTextHistory.getUp(), \"first\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertEquals(commandTextHistory.getUp(), \"first\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    void getUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        CommandTextHistory commandTextHistory \u003d new CommandTextHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        commandTextHistory.add(\"first\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        commandTextHistory.add(\"second\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        commandTextHistory.add(\"third\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertEquals(commandTextHistory.getUp(), \"third\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertEquals(commandTextHistory.getUp(), \"second\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertEquals(commandTextHistory.getUp(), \"first\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertEquals(commandTextHistory.getUp(), \"first\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertEquals(commandTextHistory.getDown(), \"second\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertEquals(commandTextHistory.getDown(), \"third\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertEquals(commandTextHistory.getDown(), \"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        assertEquals(commandTextHistory.getDown(), \"\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nelsontky": 50
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/model/tag/TagTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/storage/JsonAdaptedCouponTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.storage.JsonAdaptedCoupon.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.TypicalCoupons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Archived;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.ExpiryDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Limit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.coupon.PromoCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.StartDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Usage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Savings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class JsonAdaptedCouponTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static final JsonAdaptedSavings INVALID_SAVINGS \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "            new JsonAdaptedSavings(null, null, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private static final String INVALID_EXPIRY_DATE \u003d \"31-12-202\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private static final String INVALID_START_DATE \u003d \"31-01-202\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private static final String INVALID_USAGE \u003d \"-10\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private static final String INVALID_LIMIT \u003d \"3a\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private static final String INVALID_ARCHIVED \u003d \"archived\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private static final String VALID_PROMO_CODE \u003d BENSON.getPromoCode().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private static final JsonAdaptedSavings VALID_SAVINGS \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "            new JsonAdaptedSavings(BENSON.getSavingsForEachUse());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static final JsonAdaptedDssm VALID_TOTAL_SAVINGS \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "            new JsonAdaptedDssm(BENSON.getSavingsMap());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private static final String VALID_EXPIRY_DATE \u003d BENSON.getExpiryDate().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private static final String VALID_START_DATE \u003d BENSON.getStartDate().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private static final String VALID_USAGE \u003d BENSON.getUsage().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private static final String VALID_LIMIT \u003d BENSON.getLimit().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private static final String VALID_REMIND_DATE \u003d BENSON.getRemindDate().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private static final String VALID_CONDTIION \u003d BENSON.getCondition().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private static final String VALID_ARCHIVED \u003d BENSON.getArchived().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void toModelType_validCouponDetails_returnsCoupon() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "        JsonAdaptedCoupon coupon \u003d new JsonAdaptedCoupon(BENSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(BENSON, coupon.toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "        JsonAdaptedCoupon coupon \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new JsonAdaptedCoupon(INVALID_NAME, VALID_PROMO_CODE, VALID_SAVINGS, VALID_EXPIRY_DATE,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        VALID_START_DATE, VALID_USAGE, VALID_LIMIT, VALID_TOTAL_SAVINGS, VALID_TAGS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        VALID_REMIND_DATE, VALID_CONDTIION, VALID_ARCHIVED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, coupon::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        JsonAdaptedCoupon coupon \u003d new JsonAdaptedCoupon(null, VALID_PROMO_CODE, VALID_SAVINGS, VALID_EXPIRY_DATE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                VALID_START_DATE, VALID_USAGE, VALID_LIMIT, VALID_TOTAL_SAVINGS, VALID_TAGS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                VALID_REMIND_DATE, VALID_CONDTIION, VALID_ARCHIVED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, coupon::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public void toModelType_nullPromoCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        JsonAdaptedCoupon coupon \u003d new JsonAdaptedCoupon(VALID_NAME, null, VALID_SAVINGS, VALID_EXPIRY_DATE,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                VALID_START_DATE, VALID_USAGE, VALID_LIMIT, VALID_TOTAL_SAVINGS, VALID_TAGS,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                VALID_REMIND_DATE, VALID_CONDTIION, VALID_ARCHIVED);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PromoCode.class.getSimpleName());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, coupon::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void toModelType_invalidSavings_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "        JsonAdaptedCoupon coupon \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new JsonAdaptedCoupon(VALID_NAME, VALID_PROMO_CODE, INVALID_SAVINGS, VALID_EXPIRY_DATE,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        VALID_START_DATE, VALID_USAGE, VALID_LIMIT, VALID_TOTAL_SAVINGS, VALID_TAGS,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        VALID_REMIND_DATE, VALID_CONDTIION, VALID_ARCHIVED);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alcen"
        },
        "content": "        String expectedMessage \u003d Savings.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, coupon::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void toModelType_invalidExpiryDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alcen"
        },
        "content": "        JsonAdaptedCoupon coupon \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new JsonAdaptedCoupon(VALID_NAME, VALID_PROMO_CODE, VALID_SAVINGS, INVALID_EXPIRY_DATE,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        VALID_START_DATE, VALID_USAGE, VALID_LIMIT, VALID_TOTAL_SAVINGS, VALID_TAGS,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        VALID_REMIND_DATE, VALID_CONDTIION, VALID_ARCHIVED);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String expectedMessage \u003d ExpiryDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, coupon::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public void toModelType_invalidStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        JsonAdaptedCoupon coupon \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new JsonAdaptedCoupon(VALID_NAME, VALID_PROMO_CODE, VALID_SAVINGS, VALID_EXPIRY_DATE,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        INVALID_START_DATE, VALID_USAGE, VALID_LIMIT, VALID_TOTAL_SAVINGS, VALID_TAGS,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        VALID_REMIND_DATE, VALID_CONDTIION, VALID_ARCHIVED);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        String expectedMessage \u003d StartDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, coupon::toModelType);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void toModelType_invalidUsage_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        JsonAdaptedCoupon coupon \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new JsonAdaptedCoupon(VALID_NAME, VALID_PROMO_CODE, VALID_SAVINGS, VALID_EXPIRY_DATE,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        VALID_START_DATE, INVALID_USAGE, VALID_LIMIT, VALID_TOTAL_SAVINGS, VALID_TAGS,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        VALID_REMIND_DATE, VALID_CONDTIION, VALID_ARCHIVED);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        String expectedMessage \u003d Usage.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, coupon::toModelType);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void toModelType_invalidLimit_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        JsonAdaptedCoupon coupon \u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new JsonAdaptedCoupon(VALID_NAME, VALID_PROMO_CODE, VALID_SAVINGS, VALID_EXPIRY_DATE,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        VALID_START_DATE, VALID_USAGE, INVALID_LIMIT, VALID_TOTAL_SAVINGS, VALID_TAGS,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        VALID_REMIND_DATE, VALID_CONDTIION, VALID_ARCHIVED);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        String expectedMessage \u003d Limit.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, coupon::toModelType);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alcen"
        },
        "content": "        JsonAdaptedCoupon coupon \u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                new JsonAdaptedCoupon(VALID_NAME, VALID_PROMO_CODE, VALID_SAVINGS, VALID_EXPIRY_DATE,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        VALID_START_DATE, VALID_USAGE, VALID_LIMIT, VALID_TOTAL_SAVINGS, invalidTags,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                        VALID_REMIND_DATE, VALID_CONDTIION, VALID_ARCHIVED);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(IllegalValueException.class, coupon::toModelType);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public void toModelType_invalidArchivedState_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        JsonAdaptedCoupon coupon \u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                new JsonAdaptedCoupon(VALID_NAME, VALID_PROMO_CODE, VALID_SAVINGS, VALID_EXPIRY_DATE,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "                        VALID_START_DATE, VALID_USAGE, VALID_LIMIT, VALID_TOTAL_SAVINGS, VALID_TAGS,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                        VALID_REMIND_DATE, VALID_CONDTIION, INVALID_ARCHIVED);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        String expectedMessage \u003d Archived.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, coupon::toModelType);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 36,
      "Denise-Ng": 14,
      "alcen": 32,
      "KEVVVINN": 29,
      "nelsontky": 13,
      "-": 42
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/storage/JsonCouponStashStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.TypicalCoupons.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.TypicalCoupons.HOON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.TypicalCoupons.IDA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.TypicalCoupons.getTypicalCouponStash;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.CouponStash;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ReadOnlyCouponStash;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class JsonCouponStashStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonCouponStashStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void readCouponStash_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readCouponStash(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private java.util.Optional\u003cReadOnlyCouponStash\u003e readCouponStash(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return new JsonCouponStashStorage(Paths.get(filePath)).readCouponStash(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertFalse(readCouponStash(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCouponStash(\"notJsonFormatCouponStash.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void readCouponStash_invalidCouponCouponStash_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCouponStash(\"invalidCouponCouponStash.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void readCouponStash_invalidAndValidCouponCouponStash_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCouponStash(\"invalidAndValidCouponCouponStash.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void readAndSaveCouponStash_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempCouponStash.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CouponStash original \u003d getTypicalCouponStash();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "        JsonCouponStashStorage jsonCouponStashStorage \u003d new JsonCouponStashStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "        jsonCouponStashStorage.saveCouponStash(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "        ReadOnlyCouponStash readBack \u003d jsonCouponStashStorage.readCouponStash(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(original, new CouponStash(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "        original.addCoupon(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alcen"
        },
        "content": "        original.removeCoupon(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alcen"
        },
        "content": "        jsonCouponStashStorage.saveCouponStash(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "        readBack \u003d jsonCouponStashStorage.readCouponStash(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(original, new CouponStash(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alcen"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alcen"
        },
        "content": "        original.addCoupon(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alcen"
        },
        "content": "        jsonCouponStashStorage.saveCouponStash(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alcen"
        },
        "content": "        readBack \u003d jsonCouponStashStorage.readCouponStash().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(original, new CouponStash(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void saveCouponStash_nullCouponStash_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCouponStash(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Saves {@code couponStash} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private void saveCouponStash(ReadOnlyCouponStash couponStash, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alcen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alcen"
        },
        "content": "            new JsonCouponStashStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    .saveCouponStash(couponStash, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alcen"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alcen"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alcen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alcen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void saveCouponStash_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCouponStash(new CouponStash(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 110
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/storage/JsonSerializableCouponStashTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.CouponStash;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.testutil.TypicalCoupons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class JsonSerializableCouponStashTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableCouponStashTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static final Path TYPICAL_COUPONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalCouponsCouponStash.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static final Path INVALID_COUPON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidCouponCouponStash.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static final Path DUPLICATE_COUPON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateCouponCouponStash.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void toModelType_typicalCouponsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "        JsonSerializableCouponStash dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_COUPONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "                JsonSerializableCouponStash.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CouponStash couponStashFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CouponStash typicalCouponsCouponStash \u003d TypicalCoupons.getTypicalCouponStash();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(couponStashFromFile, typicalCouponsCouponStash);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    //typicalCouponsCouponStash"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void toModelType_invalidCouponFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "        JsonSerializableCouponStash dataFromFile \u003d JsonUtil.readJsonFile(INVALID_COUPON_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "                JsonSerializableCouponStash.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void toModelType_duplicateCoupons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "        JsonSerializableCouponStash dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_COUPON_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "                JsonSerializableCouponStash.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableCouponStash.MESSAGE_DUPLICATE_COUPON,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 25,
      "KEVVVINN": 1,
      "-": 22
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/storage/JsonUserPrefsStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.MoneySymbolStub;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.StashSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alcen"
        },
        "content": "        userPrefs.setCouponStashFilePath(Paths.get(\"couponstash.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alcen"
        },
        "content": "        userPrefs.setStashSettings(new StashSettings(new MoneySymbolStub(\"RM\")));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 9,
      "-": 117
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.TypicalCoupons.getTypicalCouponStash;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.CouponStash;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.ReadOnlyCouponStash;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "        JsonCouponStashStorage addressBookStorage \u003d new JsonCouponStashStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void couponStashReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "         * {@link JsonCouponStashStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonCouponStashStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CouponStash original \u003d getTypicalCouponStash();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "        storageManager.saveCouponStash(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "        ReadOnlyCouponStash retrieved \u003d storageManager.readCouponStash().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertEquals(original, new CouponStash(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public void getCouponStashFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "        assertNotNull(storageManager.getCouponStashFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 16,
      "-": 52
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/testutil/Assert.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/testutil/CouponBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.commons.util.DateUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Archived;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.coupon.Condition;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.ExpiryDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Limit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import csdev.couponstash.model.coupon.PromoCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.RemindDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import csdev.couponstash.model.coupon.StartDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import csdev.couponstash.model.coupon.Usage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.DateSavingsSumMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.MonetaryAmount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.PureMonetarySavings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Savings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": " * A utility class to help with building Coupon objects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class CouponBuilder {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public static final String DEFAULT_PROMO_CODE \u003d \"ILOVESTASH\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Savings DEFAULT_SAVINGS \u003d new Savings(new MonetaryAmount(32.5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final DateSavingsSumMap DEFAULT_TOTAL_SAVINGS \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "            new DateSavingsSumMap("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    LocalDate.of(2020, 2, 2),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    new PureMonetarySavings(new MonetaryAmount(97.5)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final String DEFAULT_EXPIRY_DATE \u003d \"30-08-2020\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public static final String DEFAULT_START_DATE \u003d DateUtil.formatDate(LocalDate.now());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String DEFAULT_USAGE \u003d \"3\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final String DEFAULT_LIMIT \u003d \"7\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String DEFAULT_REMIND_DATE \u003d \"27-08-2020\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public static final String DEFAULT_CONDITION \u003d \"While Stocks Last\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final String DEFAULT_ARCHIVED \u003d \"false\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public static final String FULL_COMMAND_TEXT \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            String.format(\"n/%s p/%s e/%s s/%s sd/%s l/%s\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                    DEFAULT_NAME,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                    DEFAULT_PROMO_CODE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                    DEFAULT_EXPIRY_DATE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                    DEFAULT_SAVINGS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                    DEFAULT_START_DATE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "                    DEFAULT_LIMIT"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelsontky"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    private PromoCode promoCode;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private Savings savings;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private DateSavingsSumMap totalSavings;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private ExpiryDate expiryDate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    private StartDate startDate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private Usage usage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private Limit limit;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private RemindDate remindDate;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    private Condition condition;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    private Archived archived;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public CouponBuilder() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        promoCode \u003d new PromoCode(DEFAULT_PROMO_CODE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "        savings \u003d new Savings(DEFAULT_SAVINGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "        totalSavings \u003d DEFAULT_TOTAL_SAVINGS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        expiryDate \u003d new ExpiryDate(DEFAULT_EXPIRY_DATE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        startDate \u003d new StartDate(DEFAULT_START_DATE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        usage \u003d new Usage(DEFAULT_USAGE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        limit \u003d new Limit(DEFAULT_LIMIT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        remindDate \u003d new RemindDate(expiryDate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        condition \u003d new Condition(DEFAULT_CONDITION);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        archived \u003d new Archived(DEFAULT_ARCHIVED);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Initializes the CouponBuilder with the data of {@code couponToCopy}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public CouponBuilder(Coupon couponToCopy) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alcen"
        },
        "content": "        name \u003d couponToCopy.getName();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        promoCode \u003d couponToCopy.getPromoCode();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": "        savings \u003d new Savings(couponToCopy.getSavingsForEachUse());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "        totalSavings \u003d couponToCopy.getSavingsMap();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        expiryDate \u003d couponToCopy.getExpiryDate();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        startDate \u003d couponToCopy.getStartDate();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        usage \u003d couponToCopy.getUsage();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        limit \u003d couponToCopy.getLimit();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        remindDate \u003d couponToCopy.getRemindDate();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alcen"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(couponToCopy.getTags());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        condition \u003d couponToCopy.getCondition();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        archived \u003d couponToCopy.getArchived();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Sets the {@code Name} of the {@code Coupon} that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public CouponBuilder withName(String name) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Coupon} that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public CouponBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     * Sets the {@code PromoCode} of the {@code Coupon} that we are building."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public CouponBuilder withPromoCode(String promoCode) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        this.promoCode \u003d new PromoCode(promoCode);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Sets the {@code Savings} of the {@code Coupon} that we are building."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param sv The Savings to set."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return This CouponBuilder (mutated)."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public CouponBuilder withSavings(Savings sv) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.savings \u003d sv;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Sets the {@code DateSavingsSumMap} of the {@code Coupon} that we are building."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * DateSavingsSumMap represents the daily savings earned from using the Coupon."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param dssm The DateSavingsSumMap to set."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return This CouponBuilder (mutated)."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public CouponBuilder withTotalSavings(DateSavingsSumMap dssm) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.totalSavings \u003d dssm;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Sets the {@code ExpiryDate} of the {@code Coupon} that we are building."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public CouponBuilder withExpiryDate(String expiryDate) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.expiryDate \u003d new ExpiryDate(expiryDate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Sets the {@code StartDate} of the {@code Coupon} that we are building."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public CouponBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.startDate \u003d new StartDate(startDate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Sets the {@code StartDate} of the {@code Coupon} that we are building. Start Date will set the date to today\u0027s"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * date if it is an empty argument."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public CouponBuilder withStartDate() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        this.startDate \u003d new StartDate(DateUtil.formatDate(LocalDate.now()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Sets the {@code Usage} of the {@code Coupon} that we are building."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public CouponBuilder withUsage(String usage) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        this.usage \u003d new Usage(usage);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Sets the {@code Limit} of the {@code Coupon} that we are building."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public CouponBuilder withLimit(String limit) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        this.limit \u003d new Limit(limit);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Sets the {@code RemindDate} of the {@code Coupon} that we are building."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public CouponBuilder withRemindDate(String remindDate, String expiryDate) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        this.remindDate \u003d new RemindDate(remindDate, expiryDate);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Sets the {@code Condition} of the {@code Coupon} that we are building."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public CouponBuilder withCondition(String condition) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        this.condition \u003d new Condition(condition);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Sets the {@code Archive} of the {@code Coupon} that we are building."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public CouponBuilder withArchived(String state) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        this.archived \u003d new Archived(state);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Builds the Coupon from the provided fields."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return A new Coupon."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public Coupon build() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        if (Usage.isUsageAtLimit(usage, limit)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            archived \u003d new Archived(\"true\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        return new Coupon(name, promoCode, savings, expiryDate, startDate,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                usage, limit, tags, totalSavings, remindDate, condition, archived);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 37,
      "ChesterSim": 39,
      "alcen": 65,
      "KEVVVINN": 20,
      "nelsontky": 25,
      "-": 41
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/testutil/CouponStashBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.CouponStash;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alcen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": " * A utility class to help with building CouponStash objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": " *     {@code CouponStash ab \u003d new CouponStashBuilder().withCoupon(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class CouponStashBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private CouponStash couponStash;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public CouponStashBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "        couponStash \u003d new CouponStash();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public CouponStashBuilder(CouponStash couponStash) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.couponStash \u003d couponStash;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Adds a new {@code Coupon} to the {@code CouponStash} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public CouponStashBuilder withCoupon(Coupon coupon) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alcen"
        },
        "content": "        couponStash.addCoupon(coupon);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public CouponStash build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return couponStash;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 34
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/testutil/CouponUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_EXPIRY_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_LIMIT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_PROMO_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_REMIND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_SAVINGS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.parser.CliSyntax.PREFIX_USAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.model.coupon.savings.PercentageAmount.PERCENT_SUFFIX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.EditCommand.EditCouponDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Savings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": " * A utility class for Coupon."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class CouponUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns an add command string for adding the {@code coupon}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param coupon The coupon to be converted into an command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param moneySymbol The money symbol to be used (for savings)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static String getAddCommand(Coupon coupon, String moneySymbol) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getCouponDetails(coupon, moneySymbol);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns the part of command string for the given {@code coupon}\u0027s details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param coupon The coupon to be converted into details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param moneySymbol The money symbol to be used (for savings details)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static String getCouponDetails(Coupon coupon, String moneySymbol) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alcen"
        },
        "content": "        sb.append(PREFIX_NAME + coupon.getName().fullName + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        sb.append(PREFIX_PROMO_CODE + coupon.getPromoCode().value + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        sb.append(PREFIX_EXPIRY_DATE + coupon.getExpiryDate().value + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        sb.append(PREFIX_START_DATE + coupon.getStartDate().value + \" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        sb.append(convertSavingsToCommand(coupon.getSavingsForEachUse(), moneySymbol));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        sb.append(PREFIX_USAGE + coupon.getUsage().value + \" \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        sb.append(PREFIX_LIMIT + coupon.getLimit().value + \" \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        sb.append(PREFIX_REMIND + coupon.getRemindDate().toString() + \" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "        coupon.getTags().stream().forEach("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns the part of command string for the given {@code EditCouponDescriptor}\u0027s details."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param descriptor The EditCouponDescriptor to be converted into part of the command string."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param moneySymbol The money symbol to be used (for editing savings)."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static String getEditCouponDescriptorDetails(EditCouponDescriptor descriptor, String moneySymbol) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        descriptor.getPromoCode()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .ifPresent(promoCode -\u003e sb.append(PREFIX_PROMO_CODE).append(promoCode.value).append(\" \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        descriptor.getExpiryDate().ifPresent(expiryDate -\u003e sb.append(PREFIX_EXPIRY_DATE).append(expiryDate.value)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        descriptor.getStartDate().ifPresent(startDate -\u003e sb.append(PREFIX_START_DATE).append(startDate.value)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "        descriptor.getSavings().ifPresent(sv -\u003e sb.append(convertSavingsToCommand(sv, moneySymbol)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        descriptor.getUsage().ifPresent(usage -\u003e sb.append(PREFIX_USAGE).append(usage.value).append(\" \"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        descriptor.getLimit().ifPresent(limit -\u003e sb.append(PREFIX_LIMIT).append(limit.value).append(\" \"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        descriptor.getRemindDate().ifPresent(remindDate -\u003e sb.append(PREFIX_REMIND).append(remindDate.toString())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "        descriptor.getCondition().ifPresent(cond -\u003e sb.append(PREFIX_CONDITION).append(cond.toString() + \" \"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Converts a Savings object into prefixes and strings"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * that can be used in either the \"add\" command or the"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * \"edit\" command to construct a Coupon with the same"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Savings object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param sv The Savings to be converted."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @param moneySymbol String representing MoneySymbol of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *                    the parser."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * @return String representing prefixes and raw"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alcen"
        },
        "content": "     *     values originally in the Savings sv."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private static String convertSavingsToCommand(Savings sv, String moneySymbol) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alcen"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alcen"
        },
        "content": "        sv.getMonetaryAmount().ifPresent(ma -\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alcen"
        },
        "content": "                sb.append(PREFIX_SAVINGS).append(moneySymbol).append(ma.getValue()).append(\" \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alcen"
        },
        "content": "        );"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alcen"
        },
        "content": "        sv.getPercentageAmount().ifPresent(pc -\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alcen"
        },
        "content": "                sb.append(PREFIX_SAVINGS).append(pc.getValue()).append(PERCENT_SUFFIX).append(\" \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alcen"
        },
        "content": "        );"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alcen"
        },
        "content": "        sv.getSaveables().ifPresent(svaList -\u003e svaList.stream()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alcen"
        },
        "content": "                .forEach(sva -\u003e sb.append(PREFIX_SAVINGS).append(sva.getValue()).append(\" \"))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alcen"
        },
        "content": "        );"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 3,
      "ChesterSim": 4,
      "alcen": 50,
      "KEVVVINN": 20,
      "nelsontky": 2,
      "-": 35
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/testutil/EditCouponDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.logic.commands.EditCommand.EditCouponDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Condition;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.ExpiryDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Limit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.PromoCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.RemindDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.StartDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import csdev.couponstash.model.coupon.Usage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Savings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alcen"
        },
        "content": " * A utility class to help with building EditCouponDescriptor objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class EditCouponDescriptorBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private EditCommand.EditCouponDescriptor descriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public EditCouponDescriptorBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "        descriptor \u003d new EditCouponDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public EditCouponDescriptorBuilder(EditCouponDescriptor descriptor) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "        this.descriptor \u003d new EditCouponDescriptor(descriptor);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns an {@code EditCouponDescriptor} with fields containing {@code coupon}\u0027s details"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public EditCouponDescriptorBuilder(Coupon coupon) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alcen"
        },
        "content": "        descriptor \u003d new EditCouponDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alcen"
        },
        "content": "        descriptor.setName(coupon.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        descriptor.setPromoCode(coupon.getPromoCode());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        descriptor.setSavings(coupon.getSavingsForEachUse());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        descriptor.setExpiryDate(coupon.getExpiryDate());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        descriptor.setStartDate(coupon.getStartDate());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        descriptor.setLimit(coupon.getLimit());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "        descriptor.setTags(coupon.getTags());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        descriptor.setRemindDate(coupon.getRemindDate());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        descriptor.setCondition(coupon.getCondition());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Sets the {@code Name} of the {@code EditCouponDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public EditCouponDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Sets the {@code PromoCode} of the {@code EditCouponDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public EditCouponDescriptorBuilder withPromoCode(String promoCode) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        descriptor.setPromoCode(new PromoCode(promoCode));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Sets the {@code Savings} of the {@code EditCouponDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public EditCouponDescriptorBuilder withSavings(Savings sv) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alcen"
        },
        "content": "        descriptor.setSavings(sv);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alcen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     * Sets the {@code ExpiryDate} of the {@code EditCouponDescriptor} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    public EditCouponDescriptorBuilder withExpiryDate(String expiryDate) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        descriptor.setExpiryDate(new ExpiryDate(expiryDate));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Sets the {@code StartDate} of the {@code EditCouponDescriptor} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public EditCouponDescriptorBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        descriptor.setStartDate(new StartDate(startDate));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Sets the {@code Usage} of the {@code EditCouponDescriptor} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public EditCouponDescriptorBuilder withUsage(String usage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        descriptor.setUsage(new Usage(usage));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     * Sets the {@code Limit} of the {@code EditCouponDescriptor} that we are building."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public EditCouponDescriptorBuilder withLimit(String limit) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        descriptor.setLimit(new Limit(limit));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditCouponDescriptor}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public EditCouponDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Sets the {@code ExpiryDate} of the {@code EditCouponDescriptor} that we are building."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public EditCouponDescriptorBuilder withRemindDate(String remindDate, String expiryDate) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        descriptor.setRemindDate(new RemindDate(remindDate, expiryDate));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     * Sets the {@code Condition} of the {@code EditCouponDescriptor} that we are building."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    public EditCouponDescriptorBuilder withCondition(String condition) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        descriptor.setCondition(new Condition(condition));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public EditCouponDescriptor build() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 10,
      "ChesterSim": 16,
      "alcen": 30,
      "KEVVVINN": 41,
      "-": 40
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/testutil/SerializableTestClass.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns the middle index of the coupon in the {@code model}\u0027s coupon list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCouponList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns the last index of the coupon in the {@code model}\u0027s coupon list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCouponList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns the coupon in the {@code model}\u0027s coupon list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static Coupon getCoupon(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "        return model.getFilteredCouponList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/testutil/TypicalCoupons.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_CONDITION_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_CONDITION_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_EXPIRY_DATE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_EXPIRY_DATE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_LIMIT_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_LIMIT_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_PROMO_CODE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_PROMO_CODE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_REMIND_DATE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_REMIND_DATE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_SAVINGS_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_SAVINGS_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_START_DATE_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_START_DATE_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_USAGE_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "import static csdev.couponstash.logic.commands.CommandTestUtil.VALID_USAGE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.CouponStash;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.Coupon;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.DateSavingsSumMap;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.MonetaryAmount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.PercentageAmount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Saveable;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.model.coupon.savings.Savings;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alcen"
        },
        "content": " * A utility class containing a list of {@code Coupon} objects to be used in tests."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alcen"
        },
        "content": "public class TypicalCoupons {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final MonetaryAmount ALICE_MONETARY_AMOUNT \u003d new MonetaryAmount(0.5);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final PercentageAmount BENSON_PERCENTAGE_AMOUNT \u003d new PercentageAmount(30.0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final Savings ALICE_SAVINGS \u003d new Savings(ALICE_MONETARY_AMOUNT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final Savings BENSON_SAVINGS \u003d new Savings(BENSON_PERCENTAGE_AMOUNT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Savings CARL_SAVINGS \u003d new Savings("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alcen"
        },
        "content": "            new MonetaryAmount(20.0),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alcen"
        },
        "content": "            Arrays.asList(new Saveable(\"Spa\"), new Saveable(\"Door Gift\"), new Saveable(\"Drink\"))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alcen"
        },
        "content": "    );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Savings DANIEL_SAVINGS \u003d new Savings("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alcen"
        },
        "content": "            new PercentageAmount(5.0),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alcen"
        },
        "content": "            Arrays.asList(new Saveable(\"Pencil\"), new Saveable(\"Notebook\"), new Saveable(\"Candy\"))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alcen"
        },
        "content": "    );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Savings ELLE_SAVINGS \u003d new Savings("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alcen"
        },
        "content": "            Arrays.asList(new Saveable(\"Brattby Bag\"), new Saveable(\"Channel Bag\"), new Saveable(\"Doir Bag\"))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alcen"
        },
        "content": "    );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Savings FIONA_SAVINGS \u003d new Savings(new MonetaryAmount(3.0));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Savings GEORGE_SAVINGS \u003d new Savings(new PercentageAmount(17.0));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Savings HOON_SAVINGS \u003d new Savings("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alcen"
        },
        "content": "            new MonetaryAmount(2.5),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alcen"
        },
        "content": "            Arrays.asList(new Saveable(\"Haircut\"), new Saveable(\"Hair Colouring\"))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alcen"
        },
        "content": "    );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Savings IDA_SAVINGS \u003d new Savings("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alcen"
        },
        "content": "            new PercentageAmount(50.0),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alcen"
        },
        "content": "            Arrays.asList(new Saveable(\"Billy Bookcase\"), new Saveable(\"Poäng Chair\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alcen"
        },
        "content": "                    new Saveable(\"Norråker Table \"))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alcen"
        },
        "content": "    );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final DateSavingsSumMap NO_TOTAL_SAVINGS \u003d new DateSavingsSumMap();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alcen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Coupon ALICE \u003d new CouponBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            .withPromoCode(\"I\u003c3STASH\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withSavings(ALICE_SAVINGS)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .withExpiryDate(\"2-12-2020\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withTotalSavings(NO_TOTAL_SAVINGS)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .withStartDate(\"31-7-2020\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withUsage(\"0\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withLimit(\"1\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .withRemindDate(\"29-11-2020\", \"02-12-2020\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .withCondition(\"While Stock Last\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withArchived(\"false\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Coupon BENSON \u003d new CouponBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            .withPromoCode(\"ILUVSTASH\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withSavings(BENSON_SAVINGS)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withTotalSavings(NO_TOTAL_SAVINGS)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .withExpiryDate(\"31-12-2020\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .withStartDate(\"31-7-2020\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withUsage(\"2\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withLimit(\"5\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .withRemindDate(\"28-11-2020\", \"31-12-2020\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .withCondition(\"While Stock Last\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withArchived(\"false\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "    public static final Coupon CARL \u003d new CouponBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            .withPromoCode(\"KKB\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withSavings(CARL_SAVINGS)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withTotalSavings(NO_TOTAL_SAVINGS)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .withExpiryDate(\"30-8-2020\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .withStartDate(\"31-7-2020\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withUsage(\"0\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withLimit(\"2\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .withRemindDate(\"27-8-2020\", \"30-8-2020\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .withCondition(\"While Stock Last\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withArchived(\"false\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    // Expired coupon"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Coupon DANIEL \u003d new CouponBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            .withPromoCode(\"DANIELZXC\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withSavings(DANIEL_SAVINGS)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withTotalSavings(NO_TOTAL_SAVINGS)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withExpiryDate(\"31-12-2019\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withStartDate(\"31-7-2019\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withUsage(\"0\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withLimit(\"1\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withRemindDate(\"28-12-2019\", \"31-12-2019\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            .withCondition(\"While Stock Last\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withArchived(\"false\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    // Archived coupon"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Coupon ELLE \u003d new CouponBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            .withPromoCode(\"9482224\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withSavings(ELLE_SAVINGS)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withTotalSavings(NO_TOTAL_SAVINGS)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .withExpiryDate(\"30-8-2020\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .withStartDate(\"31-7-2020\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withUsage(\"0\")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withLimit(\"1\")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .withRemindDate(\"27-8-2020\", \"30-8-2020\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .withCondition(\"While Stock Last\")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withArchived(\"true\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Coupon FIONA \u003d new CouponBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            .withPromoCode(\"9482427\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withSavings(FIONA_SAVINGS)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withTotalSavings(NO_TOTAL_SAVINGS)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .withExpiryDate(\"30-8-2020\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .withStartDate(\"31-7-2020\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withUsage(\"0\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withLimit(\"1\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .withRemindDate(\"27-8-2020\", \"30-8-2020\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .withCondition(\"While Stock Last\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withArchived(\"false\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Coupon GEORGE \u003d new CouponBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            .withPromoCode(\"9482442\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withSavings(GEORGE_SAVINGS)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withTotalSavings(NO_TOTAL_SAVINGS)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .withExpiryDate(\"31-12-2020\")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .withStartDate(\"31-7-2020\")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withUsage(\"0\")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withLimit(\"2\")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .withRemindDate(\"28-12-2020\", \"31-12-2020\")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .withCondition(\"While Stock Last\")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withArchived(\"false\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Coupon HOON \u003d new CouponBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withPromoCode(\"ILOVEHOOTERS\")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withSavings(HOON_SAVINGS)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withTotalSavings(NO_TOTAL_SAVINGS)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .withExpiryDate(\"31-12-2020\")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .withStartDate(\"31-7-2020\")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withUsage(\"0\")"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withLimit(\"1\")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .withRemindDate(\"28-12-2020\", \"31-12-2020\")"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .withCondition(\"While Stock Last\")"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withArchived(\"false\")"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Coupon IDA \u003d new CouponBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withPromoCode(\"ILOVEICECREAM\")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withSavings(IDA_SAVINGS)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withTotalSavings(NO_TOTAL_SAVINGS)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .withExpiryDate(\"31-12-2020\")"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .withStartDate(\"31-7-2020\")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withUsage(\"0\")"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withLimit(\"1\")"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .withRemindDate(\"28-12-2020\", \"31-12-2020\")"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .withCondition(\"While Stock Last\")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withArchived(\"false\")"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alcen"
        },
        "content": "    // Manually added - Coupon\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final Coupon AMY \u003d new CouponBuilder()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            .withPromoCode(VALID_PROMO_CODE_AMY)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withSavings(VALID_SAVINGS_AMY)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withTotalSavings(NO_TOTAL_SAVINGS)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .withExpiryDate(VALID_EXPIRY_DATE_AMY)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .withStartDate(VALID_START_DATE_AMY)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withUsage(VALID_USAGE_AMY)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withLimit(VALID_LIMIT_AMY)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .withRemindDate(VALID_REMIND_DATE_AMY, VALID_EXPIRY_DATE_AMY)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .withCondition(VALID_CONDITION_AMY)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final Coupon BOB \u003d new CouponBuilder()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            .withPromoCode(VALID_PROMO_CODE_BOB)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withSavings(VALID_SAVINGS_BOB)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alcen"
        },
        "content": "            .withTotalSavings(NO_TOTAL_SAVINGS)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .withExpiryDate(VALID_EXPIRY_DATE_BOB)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Denise-Ng"
        },
        "content": "            .withStartDate(VALID_START_DATE_BOB)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withUsage(VALID_USAGE_BOB)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "            .withLimit(VALID_LIMIT_BOB)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nelsontky"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .withRemindDate(VALID_REMIND_DATE_BOB, VALID_EXPIRY_DATE_BOB)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KEVVVINN"
        },
        "content": "            .withCondition(VALID_CONDITION_BOB)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alcen"
        },
        "content": "    private TypicalCoupons() {} // prevents instantiation"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * Returns an {@code CouponStash} with all the typical coupons."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static CouponStash getTypicalCouponStash() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alcen"
        },
        "content": "        CouponStash ab \u003d new CouponStash();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alcen"
        },
        "content": "        for (Coupon coupon : getTypicalCoupons()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alcen"
        },
        "content": "            ab.addCoupon(coupon);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static List\u003cCoupon\u003e getTypicalCoupons() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Denise-Ng": 24,
      "ChesterSim": 59,
      "alcen": 79,
      "KEVVVINN": 25,
      "nelsontky": 19,
      "-": 29
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Index INDEX_FIRST_COUPON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Index INDEX_SECOND_COUPON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alcen"
        },
        "content": "    public static final Index INDEX_THIRD_COUPON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSim"
        },
        "content": "    public static final Index INDEX_FOURTH_COUPON \u003d Index.fromOneBased(4);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSim": 1,
      "alcen": 5,
      "-": 7
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/ui/TestFxmlObject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/csdev/couponstash/ui/UiPartTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alcen"
        },
        "content": "package csdev.couponstash.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "import static csdev.couponstash.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alcen"
        },
        "content": "import csdev.couponstash.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alcen"
        },
        "content": "     * at {@link UiPartTest#VALID_FILE_PATH}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alcen": 5,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "\u003c?import csdev.couponstash.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alcen"
        },
        "content": "\u003cfx:root type\u003d\"csdev.couponstash.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "alcen": 1,
      "-": 5
    }
  }
]
