[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    id \u0027com.github.sherter.google-java-format\u0027 version \u00270.8\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "googleJavaFormat {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    source \u0027src/main\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    source \u0027src/test\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    include \u0027**/*.java\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    options style: \u0027AOSP\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormat"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "task format(type: GoogleJavaFormat) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "  source \u0027src/main\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "  source \u0027src/test\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "  include \u0027**/*.java\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 16,
      "-": 155
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents the parsed command-line parameters given to the application. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Parses the application command-line parameters. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        appParameters.setConfigPath("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 6,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * \u003cp\u003eThis is a workaround for the following error when MainApp is made the entry point of the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * \u003cp\u003eError: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * \u003cp\u003eThe reason is that MainApp extends Application. In that case, the LauncherHelper will check"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * for the javafx.graphics module to be present as a named module. We don\u0027t use JavaFX via the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * module system so it can\u0027t find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * \u003cp\u003eBy having a separate main class (Main) that doesn\u0027t extend Application to be the entry point"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * of the application, we avoid this issue."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 8,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.PetManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.PomodoroManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPet;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPomodoro;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.storage.JsonPetStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.storage.JsonPomodoroStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.storage.JsonStatisticsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.storage.JsonTaskListStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.storage.PetStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.storage.PomodoroStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.storage.StatisticsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.storage.TaskListStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Runs the application. */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    protected PomodoroManager pomodoro;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    protected PetManager petManager;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TaskList ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskListStorage taskListStorage \u003d new JsonTaskListStorage(userPrefs.getTaskListFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        PetStorage petStorage \u003d new JsonPetStorage(userPrefs.getPetFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        PomodoroStorage pomodoroStorage \u003d new JsonPomodoroStorage(userPrefs.getPomodoroFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        StatisticsStorage statisticsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonStatisticsStorage(userPrefs.getStatisticsFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        storage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new StorageManager("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        taskListStorage,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        petStorage,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        pomodoroStorage,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        statisticsStorage,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        userPrefsStorage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoro \u003d new PomodoroManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager \u003d new PetManager();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.setPomodoroManager(pomodoro);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        model.setPetManager(petManager);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        ui \u003d new UiManager(logic, pomodoro, petManager);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * is not found, or an empty address book will be used instead if errors occur when reading"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Optional\u003cReadOnlyTaskList\u003e taskListOptional;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Optional\u003cReadOnlyPet\u003e petOptional;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Optional\u003cReadOnlyPomodoro\u003e pomodoroOptional;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Optional\u003cReadOnlyStatistics\u003e statisticsOptional;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ReadOnlyTaskList initialData;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ReadOnlyPet initialPet;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ReadOnlyPomodoro initialPomodoro;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        ReadOnlyStatistics statistics;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            taskListOptional \u003d storage.readTaskList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (!taskListOptional.isPresent()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TaskList\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            initialData \u003d taskListOptional.orElseGet(SampleDataUtil::getSampleTaskList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"Data file not in the correct format. Will be starting with an empty TaskList\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            initialData \u003d new TaskList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"Problem while reading from the file. Will be starting with an empty TaskList\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            initialData \u003d new TaskList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            petOptional \u003d storage.readPet();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (!petOptional.isPresent()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Pet\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            initialPet \u003d petOptional.orElse(new Pet());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"Data file not in the correct format. Will be starting with an empty Pet\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            initialPet \u003d new Pet();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"Problem while reading from the file. Will be starting with an empty Pet\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            initialPet \u003d new Pet();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            pomodoroOptional \u003d storage.readPomodoro();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (!pomodoroOptional.isPresent()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Pomodoro\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            initialPomodoro \u003d pomodoroOptional.orElse(new Pomodoro());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"Data file not in the correct format. Will be starting with an empty Pomodoro\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            initialPomodoro \u003d new Pomodoro();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"Problem while reading from the file. Will be starting with an empty Pomodoro\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            initialPomodoro \u003d new Pomodoro();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            statisticsOptional \u003d storage.readStatistics();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            if (!statisticsOptional.isPresent()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Statistics\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            statistics \u003d statisticsOptional.orElse(new Statistics());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    \"Data file not in the correct format. Will be starting with an empty Statistics\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    \"Problem while reading from the file. Will be starting with an empty Statistics\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return new ModelManager("
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                initialData, initialPet, initialPomodoro, statistics, userPrefs);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead if {@code"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * configFilePath} is null."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"Config file at \""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            + configFilePathUsed"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            + \" is not in the correct format. \""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"Using default config properties\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // Update config file in case it was missing to begin with or there are"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // new/unused fields"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path, or a"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * new {@code UserPrefs} with default configuration if errors occur when reading from the file."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"UserPrefs file at \""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            + prefsFilePath"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            + \" is not in the correct format. \""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"Using default user prefs\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"Problem while reading from the file. Will be starting with an empty TaskList\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // Update prefs file in case it was missing to begin with or there are"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // new/unused fields"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        logger.info(\"Starting TaskList \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 11,
      "Hardoh": 6,
      "BransonNg": 91,
      "Permas-Teo": 28,
      "-": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Config values used by the app */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { // this handles null as well."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A Serializable class that contains the GUI settings. Guarantees: immutable. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { // this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level Named {@link Logger}s"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * default, at the {@code INFO} level. A new {@code .log} file with a new numbering will be created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * after the log file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object) Loggers obtained"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name is"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Creates a logger with the given name. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Creates a Logger for the given class name. */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Remove all the handlers from {@code logger}. */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Arrays.stream(logger.getHandlers()).forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        FileHandler fileHandler \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 16,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Container for user visible messages. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_TO_BE_DONED \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \"Task has already been marked as done!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_FIELD_UNKNOWN \u003d \"The fields do not exist %1$s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 6,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents a version with major, minor and patch number */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new IllegalArgumentException("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new Version("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 8,
      "-": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * \u003cp\u003e{@code Index} should be used right from the start (when parsing in a new user input), so that"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * if the current component wants to communicate with another component, it can send an {@code"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * Index} to avoid having to know what base the other component is using for its index. However,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * after receiving the {@code Index}, that component can convert it back to an int if the index will"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * not be passed to a different component again."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or {@link"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Creates a new {@code Index} using a zero-based index. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Creates a new {@code Index} using a one-based index. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 9,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents an error during conversion of data from one format to another */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Signals that some given data does not fulfill some constraints. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** @param message should contain relevant information on the failed constraint(s) */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A container for App specific utility functions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Utility methods related to Collections */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Throws NullPointerException if {@code items} or any element of {@code items} is null. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns true if {@code items} contain any elements that are non-null. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 3,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A class for accessing the Config File. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Writes and reads files */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Paths#get(String)}, otherwise returns false."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Creates a file if it does not exist along with its missing parent directories. */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Creates parent directories of file if it has a parent directory */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Assumes file exists */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Writes given string to a file. Will create the file if it does not exist yet. */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 9,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Converts a Java object instance to JSON and vice versa */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static ObjectMapper objectMapper \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new ObjectMapper()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .findAndRegisterModules()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .registerModule("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                    .addDeserializer("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                            Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * not found. If any values are missing from the file, default values will be used, as long as"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * the file is a valid json file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *     given here."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(Path filePath, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Saves the Json object to the specified file. Overwrites existing file if it exists, creates a"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * new file if it doesn\u0027t."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Contains methods that retrieve logging level from serialized string. */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "         * \u003cp\u003eReturns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 31,
      "-": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Helper functions for handling strings. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}. Ignores case, but a full word"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * match is required. \u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * examples:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * \u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        checkArgument("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence).anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns a detailed message of the t, including the stack trace. */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer e.g. 1, 2, 3, ..., {@code"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Will return false for any other non-null string input e.g. empty string, \"-1\", \"0\", \"+1\", and"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return value \u003e 0"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \u0026\u0026 !s.startsWith("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            \"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 19,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** API of the Logic component */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns the TaskList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @see seedu.address.model.Model#getTaskList()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    ReadOnlyTaskList getTaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the user prefs\u0027 address book file path. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Set the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    void incrementPomExp();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 2,
      "FyonnOh": 2,
      "BransonNg": 10,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.parser.TaskListParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** The main LogicManager of the app. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final TaskListParser taskListParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskListParser \u003d new TaskListParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Command command \u003d taskListParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            storage.saveTaskList(model.getTaskList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            storage.savePet(model.getPet());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            storage.savePomodoro(model.getPomodoro());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            storage.saveStatistics(model.getStatistics());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return model.getTaskList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return model.getTaskListFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void incrementPomExp() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        model.incrementPomExp();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 3,
      "FyonnOh": 5,
      "BransonNg": 22,
      "Permas-Teo": 3,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/PetManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.ui.PetDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "public class PetManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    // DEFAULT HAPPY and HANGRY STRING.... peepee"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private Path DEFAULT_ACCESSORY_PLACEHOLDER \u003d Paths.get(\"images\", \"pet\", \"medal.png\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public final String HANGRY_MOOD_STRING \u003d \"HANGRY\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public final String HAPPY_MOOD_STRING \u003d \"HAPPY\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private Pet pet;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private LocalDateTime lastDoneTaskTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private LocalDateTime timeForHangry;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private PetDisplay petDisplay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private Timer timer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private TimerTask timerTask;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    // private Timer secondTimer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    // private Timer thirdTimer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private boolean hasStarted;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public PetManager() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.timer \u003d new Timer();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.timerTask \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                new TimerTask() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    public void run() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        changeToHangry();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        updatePetDisplayToHangry();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.hasStarted \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void setPet(Pet pet) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.pet \u003d pet;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.lastDoneTaskTime \u003d LocalDateTime.parse(pet.getLastDoneTaskTime());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // use this for ACTUAL"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // this.timeForHangry \u003d lastDoneTaskTime.plusHours(24);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // use this for TESTING"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.timeForHangry \u003d lastDoneTaskTime.plusMinutes(1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void setPetDisplay(PetDisplay petDisplay) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.petDisplay \u003d petDisplay;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void updateMoodWhenLogIn() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (pet.getMood().equals(HAPPY_MOOD_STRING)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            Duration duration \u003d Duration.between(now, timeForHangry);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            if (duration.isNegative()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                changeToHangry();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                hasStarted \u003d true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                // System.out.println(\"HASSTARTED IS TRUE WHEN LOG IN\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                Date timeForMoodChange \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        Date.from(timeForHangry.atZone(ZoneId.systemDefault()).toInstant());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                // System.out.println(\"task is scheduled when logged in\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                timer.schedule(timerTask, timeForMoodChange);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                // System.out.print(\"THIS IS FIRST COUNTDOWN??!!!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                // secondTimer \u003d new Timer();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                // TimerTask task \u003d new TimerTask() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                // public void run() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                // Duration duration \u003d Duration.between(LocalDateTime.now(), timeForHangry);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                // System.out.println(\"DURATION LOG IN: \" + duration);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                // if (duration.isNegative()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                // cancel();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                // }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                // }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                // };"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                // Date date \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                // Date.from(lastDoneTaskTime.atZone(ZoneId.systemDefault()).toInstant());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                // secondTimer.scheduleAtFixedRate(task, date, 10000);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void updateMoodWhenTaskDone() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (hasStarted) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            // System.out.println(\"timer has been cancelled starting new one\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            // secondTimer.cancel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            timer.cancel();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        timer \u003d new Timer();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        lastDoneTaskTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        pet.setLastDoneTaskTime(lastDoneTaskTime.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // For ACTUAL"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // timeForHangry \u003d lastDoneTaskTime.plusHours(24);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // For TESTING"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        timeForHangry \u003d lastDoneTaskTime.plusMinutes(1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        timerTask \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                new TimerTask() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    public void run() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        changeToHangry();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        updatePetDisplayToHangry();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                };"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Date timeForMoodChange \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                Date.from(timeForHangry.atZone(ZoneId.systemDefault()).toInstant());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        timer.schedule(timerTask, timeForMoodChange);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        changeToHappy();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // System.out.print(\"SCEHDULE TIMERTASK....... THIS IS FINAL COUNTDOWN??!!!\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // thirdTimer \u003d new Timer();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // TimerTask task \u003d new TimerTask() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // public void run() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // Duration duration \u003d Duration.between(LocalDateTime.now(), timeForHangry);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // System.out.println(\"DURATION: \" + duration);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // if (duration.isNegative()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // cancel();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // };"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // Date date \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // Date.from(lastDoneTaskTime.atZone(ZoneId.systemDefault()).toInstant());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // thirdTimer.scheduleAtFixedRate(task, date, 10000);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void updatePetDisplayWhenDone() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Path petFilepath;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String levelText \u003d this.pet.getLevel();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (levelText.equals(\"1\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            petFilepath \u003d Paths.get(\"images\", \"pet\", \"level1.png\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } else if (levelText.equals(\"2\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            petFilepath \u003d Paths.get(\"images\", \"pet\", \"level2.png\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            petFilepath \u003d Paths.get(\"images\", \"pet\", \"level3.png\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petDisplay.setPetImage(petFilepath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void updatePetDisplayToHangry() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Path petFilepath;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String levelText \u003d this.pet.getLevel();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (levelText.equals(\"1\")) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            petFilepath \u003d Paths.get(\"images\", \"pet\", \"level1hangry.png\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } else if (levelText.equals(\"2\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            petFilepath \u003d Paths.get(\"images\", \"pet\", \"level2hangry.png\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            petFilepath \u003d Paths.get(\"images\", \"pet\", \"level3.png\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petDisplay.setPetImage(petFilepath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void handleExit() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        hasStarted \u003d false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        timer.cancel();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // secondTimer.cancel();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // thirdTimer.cancel();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    void changeToHangry() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        pet.changeHangry();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    void changeToHappy() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        pet.changeHappy();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void updatePetDisplay() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        int exp \u003d Integer.parseInt(pet.getExp());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        int expBarInt \u003d exp % 100;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String expBarText \u003d String.format(\"%d XP / 100 XP\", expBarInt);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String levelText \u003d this.pet.getLevel();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String mood \u003d pet.getMood();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Path petFilepath;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (levelText.equals(\"1\")) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            Path path \u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    (mood.equals(HAPPY_MOOD_STRING)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                            ? Paths.get(\"images\", \"pet\", \"level1.png\")"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                            : Paths.get(\"images\", \"pet\", \"level1hangry.png\"));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            petFilepath \u003d path;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } else if (levelText.equals(\"2\")) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            Path path \u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    (mood.equals(HAPPY_MOOD_STRING)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                            ? Paths.get(\"images\", \"pet\", \"level1.png\")"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                            : Paths.get(\"images\", \"pet\", \"level1hangry.png\"));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            petFilepath \u003d path;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            petFilepath \u003d Paths.get(\"images\", \"pet\", \"level3.png\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        int expBarPerc \u003d expBarInt / 10;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Path expBarFilepath;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        switch (expBarPerc) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                expBarFilepath \u003d Paths.get(\"images\", \"pet\", \"ProgressBar0%.png\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                expBarFilepath \u003d Paths.get(\"images\", \"pet\", \"ProgressBar10%.png\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                expBarFilepath \u003d Paths.get(\"images\", \"pet\", \"ProgressBar20%.png\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                expBarFilepath \u003d Paths.get(\"images\", \"pet\", \"ProgressBar30%.png\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                expBarFilepath \u003d Paths.get(\"images\", \"pet\", \"ProgressBar40%.png\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            case 5:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                expBarFilepath \u003d Paths.get(\"images\", \"pet\", \"ProgressBar50%.png\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            case 6:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                expBarFilepath \u003d Paths.get(\"images\", \"pet\", \"ProgressBar60%.png\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            case 7:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                expBarFilepath \u003d Paths.get(\"images\", \"pet\", \"ProgressBar70%.png\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            case 8:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                expBarFilepath \u003d Paths.get(\"images\", \"pet\", \"ProgressBar80%.png\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            case 9:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                expBarFilepath \u003d Paths.get(\"images\", \"pet\", \"ProgressBar90%.png\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            case 10:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                expBarFilepath \u003d Paths.get(\"images\", \"pet\", \"ProgressBar100%.png\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                expBarFilepath \u003d Paths.get(\"images\", \"pet\", \"ProgressBar0%.png\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Path accessoryFilepath \u003d DEFAULT_ACCESSORY_PLACEHOLDER;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // if (accessoryFilepath !\u003d null) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // this.accessoryFilepath \u003d accessoryFilepath;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // Image image \u003d new Image(String.valueOf(accessoryFilepath));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // accessoryPic.setImage(image);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petDisplay.setExpBarText(expBarText);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petDisplay.setLevelText(levelText);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // set up pet image"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petDisplay.setPetImage(petFilepath);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // set up experience bar image"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petDisplay.setExpBarImage(expBarFilepath);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 274
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/PomodoroManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.animation.KeyValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.CustomQueue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.dayData.PomDurationData;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.dayData.TasksDoneData;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.dayData.Date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Done;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.ui.ResultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class PomodoroManager {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private Integer startTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private Integer restTime \u003d 5; // 5 * 60;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private Timeline timeline;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private Label timerLabel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private IntegerProperty timeSeconds;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private List\u003cTask\u003e originList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private LocalDateTime startDateTime, endDateTime; "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public enum PROMPT_STATE {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        NONE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        CHECK_DONE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        CHECK_TAKE_BREAK,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        CHECK_DONE_MIDPOM;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public final String CHECK_DONE_MESSAGE \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            \"Did you manage to finish the last task?\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"(Y) - Task will be set to done. (N) - No changes.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public final String CHECK_TAKE_BREAK_MESSAGE \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            \"Shall we take a 5-min break?\\n\" + \"(Y) - 5-min timer begins. (N) - App goes neutral.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public final String CHECK_DONE_MIDPOM_MESSAGE \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            \"Great! Would you like to continue with another task\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"(pom \u003cindex\u003e) - next task pommed with remaining time. (N) - App goes neutral.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private PROMPT_STATE promptState;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public PomodoroManager() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        promptState \u003d PROMPT_STATE.NONE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setResultDisplay(ResultDisplay resultDisplay) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.resultDisplay \u003d resultDisplay;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setMainWindow(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setTimerLabel(Label timerLabel) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.timerLabel \u003d timerLabel;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void start(float timeInMinutes) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        startTime \u003d (int) (timeInMinutes * 60);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeSeconds \u003d new SimpleIntegerProperty(startTime);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        configureUi();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        configureTimer();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        promptState \u003d PROMPT_STATE.NONE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void pause() throws NullPointerException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            timeline.pause();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        } catch (NullPointerException ne) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw ne;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void unpause() throws NullPointerException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            timeline.play();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        } catch (NullPointerException ne) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw ne;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void reset() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timerLabel.textProperty().unbind();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timerLabel.setText(\"POM\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private void configureUi() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timerLabel"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                .textProperty()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                .bind("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        Bindings.createStringBinding("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                () -\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                    if (timeSeconds.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                        return \"\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                    } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                        int secondsRemaining \u003d timeSeconds.get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                        int minutePortion \u003d secondsRemaining / 60;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                        int secondPortion \u003d secondsRemaining % 60;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                        return String.format("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                                \"%02d:%02d\", minutePortion, secondPortion);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                },"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                timeSeconds));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private void configureTimer() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (timeline !\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            timeline.stop();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeSeconds.set(startTime);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeline \u003d new Timeline();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeline.getKeyFrames()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                .add(new KeyFrame(Duration.seconds(startTime + 1), new KeyValue(timeSeconds, 0)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeline.playFromStart();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeline.setOnFinished("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                event -\u003e {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    this.setPromptState(PROMPT_STATE.CHECK_DONE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    resultDisplay.setFeedbackToUser(CHECK_DONE_MESSAGE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    model.incrementPomExp();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    mainWindow.setPomCommandExecutor();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    mainWindow.setTabFocusTasks();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    model.setPomodoroTask(null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    endDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    updateStatistics(model); // Update pom duration"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                });"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void updateStatistics(Model model) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(startDateTime);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        endDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.getStatistics().updateDataDates();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        List\u003cDayData\u003e newDayDatas \u003d generateUpdatedDayData(startDateTime, endDateTime);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        newDayDatas.forEach(dayData -\u003e model.getStatistics().updatesDayData(dayData));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        updateStatisticsDisplay(); // TODO code quality"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updateStatisticsDisplay() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        mainWindow.getStatisticsDisplay().updateGraphs(model.getStatistics().getCustomQueue()); // TODO code quality"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public List\u003cDayData\u003e generateUpdatedDayData(LocalDateTime startDateTime, LocalDateTime endDateTime) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        List\u003cDayData\u003e out \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        LocalDateTime tempDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        while (!tempDateTime.toLocalDate().equals(endDateTime.toLocalDate())) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            // get minutes from this temp date to its end of day"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            int minutes \u003d (int)tempDateTime"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                .until(tempDateTime.toLocalDate()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                .atTime(LocalTime.MAX), ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            Date date \u003d new Date(tempDateTime.format(Date.dateFormatter));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            System.out.println(date.toString());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            DayData currDayData \u003d model.getStatistics().getDayDataFromDate(date);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            PomDurationData updatedPomDuration \u003d "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new PomDurationData(\"\" +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                (currDayData.getPomDurationData().value + minutes));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            DayData updatedDayData \u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new DayData("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    date,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    updatedPomDuration,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    currDayData.getTasksDoneData());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            out.add(updatedDayData);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            tempDateTime \u003d tempDateTime.plusDays(1);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            tempDateTime \u003d tempDateTime.toLocalDate().atStartOfDay();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // Handle last day"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        int minutes \u003d (int)tempDateTime"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                .until(endDateTime, ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Date date \u003d new Date(tempDateTime.format(Date.dateFormatter));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        DayData currDayData \u003d model.getStatistics().getDayDataFromDate(date);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        PomDurationData updatedPomDuration \u003d "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            new PomDurationData(\"\" +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            (currDayData.getPomDurationData().value + minutes));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        DayData updatedDayData \u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            new DayData("
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                date,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                updatedPomDuration,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                currDayData.getTasksDoneData());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        out.add(updatedDayData);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void startTrackTask(Task task) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        startDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        endDateTime \u003d null;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public PROMPT_STATE getPromptState() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return this.promptState;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPromptState(PROMPT_STATE promptState) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.promptState \u003d promptState;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void checkBreakActions() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.setPromptState(PROMPT_STATE.CHECK_TAKE_BREAK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void checkMidPomDoneActions() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.setPromptState(PROMPT_STATE.CHECK_DONE_MIDPOM);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        mainWindow.setPomCommandExecutor();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void takeABreak() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (timeline !\u003d null) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            timeline.stop();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeSeconds.set(restTime);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeline \u003d new Timeline();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeline.getKeyFrames()"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                .add(new KeyFrame(Duration.seconds(restTime + 1), new KeyValue(timeSeconds, 0)));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeline.playFromStart();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeline.setOnFinished("
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                event -\u003e {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    resultDisplay.setFeedbackToUser(\"Breaks over! What shall we do next?\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    this.setPromptState(PROMPT_STATE.NONE); // App back to neutral"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                });"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        mainWindow.setDefaultCommandExecutor();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setDoneParams(Model model, List\u003cTask\u003e originList, int taskIndex) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.originList \u003d originList;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private void clearDoneParams() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.model \u003d null;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.originList \u003d null;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.taskIndex \u003d -1;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void doneTask() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task taskToEdit \u003d originList.get(taskIndex);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Name updatedName \u003d taskToEdit.getName();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Priority updatedPriority \u003d taskToEdit.getPriority();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Description updatedDescription \u003d taskToEdit.getDescription();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d taskToEdit.getTags();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task editedTask \u003d"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new Task("
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        updatedName,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        updatedPriority,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        updatedDescription,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        new Done(\"Y\"),"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        updatedTags);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // Update pet exp"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.incrementExp();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // Update stats"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.updateDataDatesStatistics();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Date dateOnDone \u003d new Date(now.format(Date.dateFormatter));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Statistics stats \u003d model.getStatistics();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        DayData dayData \u003d stats.getDayDataFromDate(dateOnDone);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        DayData updatedDayData \u003d"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new DayData("
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        dateOnDone,"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        dayData.getPomDurationData(),"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        new TasksDoneData(\"\" + (dayData.getTasksDoneData().value + 1)));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        stats.updatesDayData(updatedDayData);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        clearDoneParams();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 281,
      "FyonnOh": 1,
      "BransonNg": 4,
      "Permas-Teo": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Adds a person to the address book. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \": Adds a task to the task list. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + PREFIX_PRIORITY"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"PRIORITY \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + PREFIX_DESCRIPTION"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"DESCRIPTION \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + PREFIX_TAG"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"TAG]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"Math Homework \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + PREFIX_PRIORITY"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + PREFIX_DESCRIPTION"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"Chapter 5, Pages 1 - 3 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + PREFIX_TAG"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"for_school \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    + PREFIX_REMINDER"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    + \"15/04/20@10:30\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Creates an AddCommand to add the specified {@code Task} */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // not sure if Model is needed, why not just use ModelManager class rather than interface"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // ^ Sample use of model to adjust objects"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // model.setPetName(\"Jeff\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // model.setPomodoroTask(toAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // DONE Setting values on model in recorded in storage and reflected in json"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 18,
      "artlee06": 3,
      "BransonNg": 25,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Clears the address book. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        model.setTaskList(new TaskList());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents a command with hidden internal logic and the ability to be executed. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandCompletor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents a command with hidden internal logic and the ability to be executed. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class CommandCompletor {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private ArrayList\u003cString\u003e commands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public CommandCompletor() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(DoneCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(FindCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(PomCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(SwitchTabCommand.STATS_COMMAND_WORD);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(SwitchTabCommand.TASKS_COMMAND_WORD);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getSuggestedCommand(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] trimmedInputWords \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                input.toLowerCase()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .split(\"\\\\s+\"); // get the first command, autoComplete based on that."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (trimmedInputWords.length \u003e 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            for (String commandWord : this.commands) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                Pattern commandPattern \u003d Pattern.compile(String.format(\"^%s\", commandWord));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                Matcher commandMatcher \u003d commandPattern.matcher(trimmedInputWords[0]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                if (commandMatcher"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .matches()) { // need to check for match before we can check for hitEnd"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    break; // command found then return original"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                if (commandMatcher.hitEnd()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    trimmedInputWords[0] \u003d commandWord;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    return String.join(\" \", trimmedInputWords);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // if no matches, return original"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getSuccessMessage() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return \"Command auto completed!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getFailureMessage() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return \"No command auto complete found :(\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!(other instanceof CommandCompletor)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            CommandCompletor otherCommandCompletor \u003d (CommandCompletor) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return otherCommandCompletor.commands.equals(this.commands);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents the result of a command execution. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Constructs a {@code CommandResult} with the specified fields. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}, and other"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * fields set to their default value."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 4,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Deletes a person identified using it\u0027s displayed index from the address book. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \": Deletes the task identified by the index number used in the displayed tasks list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task(s): \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final Index[] targetIndices;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public DeleteCommand(Index[] targetIndices) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.targetIndices \u003d targetIndices;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        StringBuilder tasksDeleted \u003d new StringBuilder(MESSAGE_DELETE_TASK_SUCCESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        List\u003cTask\u003e toDeleteTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (Index targetIndex : targetIndices) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            toDeleteTasks.add(taskToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        for (Task t : toDeleteTasks) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            model.deleteTask(t);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            tasksDeleted.append(String.format(\"%n%s\", t));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return new CommandResult(tasksDeleted.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } else if (other instanceof DeleteCommand) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Index[] myTargetIndices \u003d targetIndices;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Index[] otherTargetIndices \u003d ((DeleteCommand) other).targetIndices;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            for (int i \u003d 0; i \u003c myTargetIndices.length; i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                if (!myTargetIndices[i].equals(otherTargetIndices[i])) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 9,
      "BransonNg": 16,
      "Permas-Teo": 14,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.PomodoroManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.dayData.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.dayData.TasksDoneData;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Done;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Deletes a person identified using it\u0027s displayed index from the address book. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \": Marks the task identified by the index number used in the displayed task list as done.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"Parameters: 1-INDEXed (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \" 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_DONE_TASK_SUCCESS \u003d \"Done Task(s): \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final Index[] targetIndices;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public DoneCommand(Index[] targetIndices) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.targetIndices \u003d targetIndices;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        StringBuilder tasksDone \u003d new StringBuilder(MESSAGE_DONE_TASK_SUCCESS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task pommedTask \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (Index targetIndex : targetIndices) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            // Person person \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Task taskToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            if (taskToEdit.getDone().isDone) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TASK_TO_BE_DONED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Task editedTask \u003d createDoneTask(taskToEdit);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            // Normal statistics update"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            // If task to be done is being pommed..."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            if (taskToEdit.equals(model.getPomodoro().getRunningTask())) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                pommedTask \u003d taskToEdit;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                model.setPomodoroTask(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                updateStatisticsPomDone(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                tasksDone.append(String.format(\"%n%s\", editedTask));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                updateStatisticsRegularDone(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            // increment Pet EXP after completing a task"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            model.incrementExp();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            model.updateMoodWhenDone();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // The last task to show is the pommed task"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (pommedTask !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            tasksDone.append(String.format(\"\\n----Pom Task Done----\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            tasksDone.append(String.format(\"%n%s\", pommedTask));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            PomodoroManager pm \u003d model.getPomodoroManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            pm.pause();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            pm.doneTask();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            // Pause pom timer and check if wanna continue"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            tasksDone.append(\"\\n\" + pm.CHECK_DONE_MIDPOM_MESSAGE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            pm.checkMidPomDoneActions();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new CommandResult(tasksDone.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private static Date getCurrentDate() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Date date \u003d new Date(now.format(Date.dateFormatter));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static Task createDoneTask(Task taskToEdit) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Name updatedName \u003d taskToEdit.getName();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Priority updatedPriority \u003d taskToEdit.getPriority();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Description updatedDescription \u003d taskToEdit.getDescription();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d taskToEdit.getTags();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new Task("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                updatedName, updatedPriority, updatedDescription, new Done(\"Y\"), updatedTags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private static void updateStatisticsRegularDone(Model model) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.updateDataDatesStatistics();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Date dateOnDone \u003d getCurrentDate();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Statistics stats \u003d model.getStatistics();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        DayData dayData \u003d stats.getDayDataFromDate(dateOnDone);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        DayData updatedDayData \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new DayData("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        dateOnDone,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        dayData.getPomDurationData(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        new TasksDoneData(\"\" + (dayData.getTasksDoneData().value + 1)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        stats.updatesDayData(updatedDayData);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private static void updateStatisticsPomDone(Model model) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // Get the data from pomodoro manager"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.getPomodoroManager().updateStatistics(model);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } else if (other instanceof DoneCommand) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Index[] myTargetIndices \u003d targetIndices;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Index[] otherTargetIndices \u003d ((DoneCommand) other).targetIndices;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            for (int i \u003d 0; i \u003c myTargetIndices.length; i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                if (!myTargetIndices[i].equals(otherTargetIndices[i])) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 57,
      "FyonnOh": 6,
      "BransonNg": 74,
      "Permas-Teo": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Done;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Edits the details of an existing person in the address book. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + PREFIX_PRIORITY"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"PHONE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + PREFIX_DESCRIPTION"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"ADDRESS] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + PREFIX_TAG"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"TAG]...\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \" 1 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + PREFIX_PRIORITY"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"91234567 \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param editTaskDescriptor details to edit the person with"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public EditCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code personToEdit} edited with"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Name updatedName \u003d editTaskDescriptor.getName().orElse(taskToEdit.getName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Priority updatedPriority \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                editTaskDescriptor.getPriority().orElse(taskToEdit.getPriority());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Description updatedDescription \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                editTaskDescriptor.getDescription().orElse(taskToEdit.getDescription());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Done updatedDone \u003d editTaskDescriptor.getDone().orElse(taskToEdit.getDone());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editTaskDescriptor.getTags().orElse(taskToEdit.getTags());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Optional\u003cReminder\u003e updatedOptionalReminder \u003d editTaskDescriptor.getReminder().isPresent() ? editTaskDescriptor.getReminder() : taskToEdit.getOptionalReminder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new Task("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                updatedName,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                updatedPriority,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                updatedDescription,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                updatedDone,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                updatedTags,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                updatedOptionalReminder);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        private Done done;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        private Reminder reminder;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        /** Copy constructor. A defensive copy of {@code tags} is used internally. */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            setDone(toCopy.done);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            setReminder(toCopy.reminder);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        /** Returns true if at least one field is edited. */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, priority, description, tags, reminder);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setDone(Done done) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.done \u003d done;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public Optional\u003cDone\u003e getDone() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return Optional.ofNullable(done);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}. A defensive copy of {@code tags} is used"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "         * internally."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException} if"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "         * modification is attempted. Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return (tags !\u003d null)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    ? Optional.of(Collections.unmodifiableSet(tags))"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    : Optional.empty();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        public void setReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        public Optional\u003cReminder\u003e getReminder() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            return Optional.ofNullable(reminder);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \u0026\u0026 getPriority().equals(e.getPriority())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \u0026\u0026 getDone().equals(e.getDone())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 34,
      "FyonnOh": 1,
      "artlee06": 11,
      "BransonNg": 62,
      "-": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Terminates the program. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \" alice bob charlie\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        Messages.MESSAGE_PERSONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        model.getFilteredTaskList().size()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 3,
      "BransonNg": 8,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Format full help instructions for every command for display. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            COMMAND_WORD + \": Shows program usage instructions.\\n\" + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Lists all persons in the address book to the user. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 1,
      "BransonNg": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.PomodoroManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class PomCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final int DEFAULT_TIMER \u003d 25;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"pom\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \": Starts the pomodoro timer, focusing on \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"Parameters: 1-INDEXed (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \" 1 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + PREFIX_TIMER"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \" 10\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String PAUSE_MESSAGE \u003d \"Pomodoro paused.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String CONTINUE_MESSAGE \u003d \"Pomodoro continuing.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final float timerAmount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final boolean isPause;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final boolean isContinue;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public PomCommand(Index targetIndex, float timerAmount) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.timerAmount \u003d timerAmount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.isPause \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.isContinue \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public PomCommand(boolean isPause, boolean isContinue) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.targetIndex \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.timerAmount \u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.isPause \u003d isPause;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.isContinue \u003d isContinue;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        PomodoroManager pm \u003d model.getPomodoroManager();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (isPause) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            pm.pause();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return new PomCommandResult("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    PAUSE_MESSAGE, null, 0, model, -1, null, isPause, isContinue);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (isContinue) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            pm.unpause();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return new PomCommandResult("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    CONTINUE_MESSAGE, null, 0, model, -1, null, isPause, isContinue);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        int index \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (index \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task taskToPom \u003d lastShownList.get(index);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.getPomodoroManager().startTrackTask(taskToPom);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (taskToPom.getDone().isDone) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_TO_BE_DONED);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // Update the pomodoro model"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.setPomodoroTask(taskToPom);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new PomCommandResult("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"Pomming task: \" + taskToPom.toString(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                taskToPom.getName().toString(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                timerAmount,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                index,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                lastShownList,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                isPause,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                isContinue);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 93,
      "BransonNg": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PomCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class PomCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final String pommedTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final float timerAmount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final boolean isPause;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final boolean isContinue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final int taskIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private List\u003cTask\u003e originList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Constructs a {@code PomCommandResult} with the specified fields. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public PomCommandResult("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String feedbackToUser,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String pommedTask,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            float timerAmount,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Model model,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            int taskIndex,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            List\u003cTask\u003e originList,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            boolean isPause,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            boolean isContinue) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        super(requireNonNull(feedbackToUser), false, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.pommedTask \u003d pommedTask;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.timerAmount \u003d timerAmount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.model \u003d requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.isPause \u003d requireNonNull(isPause);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.isContinue \u003d requireNonNull(isContinue);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.originList \u003d originList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public String getPommedTask() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return pommedTask;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public float getTimerAmountInMin() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return timerAmount;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public boolean getIsPause() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return isPause;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public boolean getIsContinue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return isContinue;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public int getTaskIndex() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return taskIndex;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public List\u003cTask\u003e getOriginList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return originList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 63,
      "BransonNg": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Adds a person to the address book. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String[] ALLOWED_SORT_FIELDS \u003d {\"priority\", \"date\", \"name\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"TaskList sorted by: %1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_SORT_UNKNOWN \u003d \"No such field to sort by %1$s!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String.format("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"%1$s -\u003e Sorts tasklist by certain field such as\\n%2$s \\nExample: %1$s priority\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    COMMAND_WORD, String.join(\" | \", ALLOWED_SORT_FIELDS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private String[] fields;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public SortCommand(String[] fields) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.fields \u003d fields;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // NOTE: Incorrect sort fields has been handled in SortCommandParser already"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ArrayList\u003cComparator\u003cTask\u003e\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (String field : fields) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            switch (field) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                case \"priority\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    temp.add(getPriorityComparator());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                case \"date\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    temp.add(getReminderComparator());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                case \"name\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    temp.add(getNameComparator());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        model.setComparator(temp.toArray(new Comparator[0]));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\" \", fields)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Comparator\u003cTask\u003e getPriorityComparator() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            public int compare(Task task1, Task task2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return task1.getPriority().compareTo(task2.getPriority());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        };"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Comparator\u003cTask\u003e getNameComparator() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            public int compare(Task task1, Task task2) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return task1.getName().compareTo(task2.getName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }.reversed();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Comparator\u003cTask\u003e getReminderComparator() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            public int compare(Task task1, Task task2) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                Optional\u003cReminder\u003e reminder1 \u003d task1.getOptionalReminder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                Optional\u003cReminder\u003e reminder2 \u003d task2.getOptionalReminder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                if (reminder1.isPresent() \u0026\u0026 reminder2.isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    return reminder1.get().compareTo(reminder2.get());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                if (reminder1.isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                if (reminder2.isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    return 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        };"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \u0026\u0026 fields.equals(((SortCommand) other).fields)); // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchTabCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class SwitchTabCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String TASKS_COMMAND_WORD \u003d \"tasks\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String STATS_COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final int TASKS_TAB_INDEX \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final int STATS_TAB_INDEX \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"View changed.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final int tabIndexToSwitch;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public SwitchTabCommand(int tabIndexToSwitch) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.tabIndexToSwitch \u003d tabIndexToSwitch;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return new SwitchTabCommandResult(MESSAGE_SUCCESS, tabIndexToSwitch);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchTabCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class SwitchTabCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final int tabToSwitchIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public SwitchTabCommandResult(String feedbackToUser, int tabToSwitchIndex) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        super(requireNonNull(feedbackToUser));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.tabToSwitchIndex \u003d requireNonNull(tabToSwitchIndex);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public int getTabToSwitchIndex() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return tabToSwitchIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents an error which occurs during execution of a {@link Command}. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * {@code cause}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidReminderException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Parses input arguments and creates a new AddCommand object */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand and returns an"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * AddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @throws InvalidReminderException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        args,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        PREFIX_NAME,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        PREFIX_TAG,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        PREFIX_REMINDER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // if (!arePrefixesPresent("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // argMultimap, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_PRIORITY)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // throw new ParseException("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Priority priority \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                (argMultimap.getValue(PREFIX_PRIORITY).isEmpty())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        ? ParserUtil.parsePriority(\"1\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        : ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Description description \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                (argMultimap.getValue(PREFIX_DESCRIPTION).isEmpty())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        ? ParserUtil.parseDescription(\"\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        : ParserUtil.parseDescription("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Optional\u003cReminder\u003e optionalReminder \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                (argMultimap.getValue(PREFIX_REMINDER).isEmpty())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        ? Optional.empty()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        : Optional.of("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                ParserUtil.parseReminder("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                        argMultimap.getValue(PREFIX_REMINDER).get()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Task task \u003d new Task(name, priority, description, tagList, optionalReminder);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return new AddCommand(task);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private static boolean arePrefixesPresent("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 30,
      "FyonnOh": 1,
      "artlee06": 8,
      "BransonNg": 17,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * Stores mapping of prefixes to their respective arguments. Each key may be associated with"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * multiple argument values. Values for a given key are stored in a list, and the insertion ordering"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * is maintained. Keys are unique, but the list of argument values may contain duplicate argument"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * values, i.e. the same argument value can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments* */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map. If the map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * previously contained a mapping for the key, the new value is appended to the list of existing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the last value of {@code prefix}. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns all values of {@code prefix}. If the prefix does not exist or has no values, this"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * will return an empty list. Modifying the returned list will not affect the underlying data"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 11,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July} where prefixes are {@code t/ k/ m/}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * \u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * \u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * t/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * prefixes to their respective argument values. Only the given prefixes will be recognized in"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * the arguments string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *     ...}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *     ...}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** {@see findAllPrefixPositions} */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in {@code argsString} starting"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * from index {@code fromIndex}. An occurrence is valid if there is a whitespace before {@code"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * prefix}. Returns -1 if no such occurrence can be found."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * \u003cp\u003eE.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d 0,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * this method returns -1 as there are no valid occurrences of \"p/\" with whitespace before it."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * However, if {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * 0, this method returns 5."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1 : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * that maps the extracted prefixes to their respective arguments. Prefixes are extracted based"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * on their zero-based positions in {@code argsString}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *     ...}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static ArgumentMultimap extractArguments("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        prefixPositions.sort("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                (prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String argValue \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    extractArgumentValue("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * currentPrefixPosition}. The end position of the value is determined by {@code"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * nextPrefixPosition}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static String extractArgumentValue("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String argsString,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Represents a prefix\u0027s position in an arguments string. */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 42,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Contains Command Line Interface (CLI) syntax definitions common to multiple commands */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"des/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static final Prefix PREFIX_REMINDER \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final Prefix PREFIX_TIMER \u003d new Prefix(\"tm/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 2,
      "artlee06": 1,
      "BransonNg": 2,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Parses input arguments and creates a new DeleteCommand object */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand and returns"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * a DeleteCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Index[] indices \u003d ParserUtil.parseIndices(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return new DeleteCommand(indices);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 6,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Parses input arguments and creates a new DoneCommand object */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand and returns a"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * DoneCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Index[] indices \u003d ParserUtil.parseIndices(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return new DoneCommand(indices);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Parses input arguments and creates a new EditCommand object */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand and returns an"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * EditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        args,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        PREFIX_NAME,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        PREFIX_TAG,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        PREFIX_REMINDER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            editTaskDescriptor.setName("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            editTaskDescriptor.setPriority("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            editTaskDescriptor.setDescription("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMINDER).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            editTaskDescriptor.setReminder("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    ParserUtil.parseReminder(argMultimap.getValue(PREFIX_REMINDER).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .ifPresent(editTaskDescriptor::setTags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return new EditCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 7,
      "artlee06": 3,
      "BransonNg": 26,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Parses input arguments and creates a new FindCommand object */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand and returns a"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * FindCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 1,
      "BransonNg": 4,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidReminderException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "/** Contains utility methods used for parsing strings in the various *Parser classes. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static Index[] parseIndices(String oneBasedIndices) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String trimmedIndices \u003d oneBasedIndices.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] splitIndices \u003d trimmedIndices.split(\"\\\\s*,\\\\s*\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Index[] indexes \u003d new Index[splitIndices.length];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (int i \u003d 0; i \u003c splitIndices.length; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(splitIndices[i])) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            indexes[i] \u003d Index.fromOneBased(Integer.parseInt(splitIndices[i]));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return indexes;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // function for sorting and potentially tags"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static String[] parseUniqueKeyWords(String keywords) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String trimmedKeyWords \u003d keywords.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] splitKeyWords \u003d trimmedKeyWords.split(\"\\\\s*,\\\\s*\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ArrayList\u003cString\u003e unique \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (String s : splitKeyWords) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (!unique.contains(s)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                unique.add(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return unique.toArray(new String[0]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Parses a {@code String reminder} into a {@code Reminder}. Leading and trailing whitespaces"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * will be trimmed. Format to receive is DD/MM/YY@HH:mm eg 04/11/20@10:30"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @throws ParseException if the given {@code reminder} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @throws InvalidReminderException"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static Reminder parseReminder(String reminderString)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws ParseException, InvalidReminderException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        requireNonNull(reminderString);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        String trimmedReminder \u003d reminderString.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (!Reminder.isValidReminder(trimmedReminder)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            throw new ParseException(Reminder.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return new Reminder(reminderString);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Parses a {@code String priority} into a {@code Priority}. Leading and trailing whitespaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!Priority.isValidPriority(trimmedPriority)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new Priority(trimmedPriority);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}. Leading and trailing whitespaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * will be trimmed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}. */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 9,
      "FyonnOh": 16,
      "artlee06": 16,
      "BransonNg": 39,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PomCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.PomCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class PomCommandParser implements Parser\u003cPomCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public PomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TIMER);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Optional\u003cString\u003e optTimerString \u003d argMultimap.getValue(PREFIX_TIMER);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        float timerAmount \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                optTimerString.isEmpty()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        ? PomCommand.DEFAULT_TIMER"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        : Float.parseFloat(optTimerString.get());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            if (preamble.toLowerCase().equals(\"pause\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return new PomCommand(true, false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } else if (preamble.toLowerCase().equals(\"continue\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return new PomCommand(false, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                // Look for an index to call Pom on"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(preamble);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return new PomCommand(index, timerAmount);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PomCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 35,
      "BransonNg": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string. E.g. \u0027t/\u0027 in \u0027add James"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Parses input arguments and creates a new SortCommand object */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand and returns a"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * SortCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] uniqueWords \u003d ParserUtil.parseUniqueKeyWords(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (uniqueWords.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String[] validFields \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                Arrays.stream(uniqueWords)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        .filter(s -\u003e Arrays.asList(SortCommand.ALLOWED_SORT_FIELDS).contains(s))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        .toArray(String[]::new);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (validFields.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new SortCommand(validFields); // should be"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 10,
      "BransonNg": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TaskListParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.PomCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.SwitchTabCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Parses user input. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class TaskListParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Used for initial separation of command word and args. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            case PomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return new PomCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            case SwitchTabCommand.STATS_COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return new SwitchTabCommand(SwitchTabCommand.STATS_TAB_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            case SwitchTabCommand.TASKS_COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return new SwitchTabCommand(SwitchTabCommand.TASKS_TAB_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ClearCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 11,
      "BransonNg": 15,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents a parse error encountered by a parser. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.PetManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.PomodoroManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** The API of the Model component. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Replaces user prefs data with the data in {@code userPrefs}. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the user prefs. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the user prefs\u0027 address book file path. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the user prefs\u0027 address book file path. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void setTaskListFilePath(Path taskListFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Replaces address book data with the data in {@code taskList}. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void setTaskList(ReadOnlyTaskList taskList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the TaskList */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    ReadOnlyTaskList getTaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Deletes the given person. The person must exist in the address book. */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    /** Adds the given person. {@code person} must not already exist in the address book. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedTask}. {@code target} must exist"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * in the address book. The person identity of {@code editedTask} must not be the same as"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * another existing person in the address book."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void setComparator(Comparator\u003cTask\u003e[] compare);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    ReadOnlyPet getPet();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void setPetName(String name);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    void incrementExp();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    void incrementPomExp();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    void updateMoodWhenDone();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    ReadOnlyPomodoro getPomodoro();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void setPomodoroTask(Task task);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    void setPomodoroManager(PomodoroManager pomodoroManager);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    void setPetManager(PetManager PetManager);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    PomodoroManager getPomodoroManager();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    Statistics getStatistics();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void updateDataDatesStatistics();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 13,
      "Hardoh": 16,
      "BransonNg": 26,
      "Permas-Teo": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.PetManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.PomodoroManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents the in-memory model of the address book data. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final Pomodoro pomodoro;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final Statistics statistics;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private final Pet pet;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Comparator\u003cTask\u003e[] comparators;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private PomodoroManager pomodoroManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private PetManager petManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Initializes a ModelManager with the given taskList and userPrefs. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public ModelManager("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            ReadOnlyTaskList taskList,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            ReadOnlyPet pet,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            ReadOnlyPomodoro pomodoro,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            ReadOnlyStatistics statistics,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireAllNonNull(taskList, userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        logger.fine(\"Initializing with Task List: \" + taskList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.taskList \u003d new TaskList(taskList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.pet \u003d new Pet(pet); // initialize a pet as a model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.pomodoro \u003d new Pomodoro(pomodoro); // initialize a pomodoro as a model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.statistics \u003d new Statistics(statistics); // initialize a Statistics as a model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        logger.info(String.format(\"Initializing with Statistics: %s\", this.statistics.toString()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.taskList.getTaskList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this(new TaskList(), new Pet(), new Pomodoro(), new Statistics(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return userPrefs.getTaskListFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTaskListFilePath(Path taskListFilePath) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(taskListFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        userPrefs.setTaskListFilePath(taskListFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskList"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTaskList(ReadOnlyTaskList taskList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.taskList.resetData(taskList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return taskList.hasTask(task);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskList.removeTask(target);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskList.setTask(target, editedTask);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of @FXML"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Serves as a reference point for TaskListPanel.java to update display {@code"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * versionedTaskList}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this.filteredTasks;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setComparator(Comparator\u003cTask\u003e[] comparators) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(comparators);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.comparators \u003d comparators;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        SortedList\u003cTask\u003e sortedFilteredTasks \u003d new SortedList\u003c\u003e(filteredTasks);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (int i \u003d comparators.length - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            sortedFilteredTasks.setComparator(comparators[i]);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.filteredTasks \u003d new FilteredList\u003cTask\u003e(sortedFilteredTasks);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return taskList.equals(other.taskList)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u0026\u0026 filteredTasks.equals(other.filteredTasks)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u0026\u0026 comparators.equals(other.comparators);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Pet Manager"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public ReadOnlyPet getPet() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return pet;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setPetName(String name) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.pet.setName(name);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void incrementPomExp() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.pet.incrementPomExp();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void incrementExp() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.pet.incrementExp();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void setPetManager(PetManager petManager) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.petManager \u003d petManager;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.petManager.setPet(pet);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void updateMoodWhenDone() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.updateMoodWhenTaskDone();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.updatePetDisplayWhenDone();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Pomodoro Manager"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public ReadOnlyPomodoro getPomodoro() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return pomodoro;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setPomodoroTask(Task task) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.pomodoro.setTask(task);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPomodoroManager(PomodoroManager pomodoroManager) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.pomodoroManager \u003d pomodoroManager;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public PomodoroManager getPomodoroManager() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return pomodoroManager;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics Manager"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void updateDataDatesStatistics() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        statistics.updateDataDates();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updatesDayDataStatistics(DayData dayData) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statistics.updatesDayData(dayData);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayData getDayDataFromDate(Date date) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return statistics.getDayDataFromDate(date);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 20,
      "Hardoh": 36,
      "BransonNg": 62,
      "Permas-Teo": 30,
      "-": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Pet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class Pet implements ReadOnlyPet {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final String DEFAULT_NAME \u003d \"BB Productive\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final String DEFAULT_EXP \u003d \"0\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final String DEFAULT_LEVEL \u003d \"1\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static final String DEFAULT_MOOD \u003d \"HAPPY\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static final String DEFAULT_LAST_DONE_TASK_TIME \u003d LocalDateTime.now().toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public final String HANGRY_MOOD_STRING \u003d \"HANGRY\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public final String HAPPY_MOOD_STRING \u003d \"HAPPY\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String exp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public String mood;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public String lastDoneTaskTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public Pet(String name, String exp, String level, String mood, String lastDoneTaskTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.exp \u003d exp;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.mood \u003d mood;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.lastDoneTaskTime \u003d lastDoneTaskTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Pet(ReadOnlyPet source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.exp \u003d source.getExp();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.level \u003d source.getLevel();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.name \u003d source.getName();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.mood \u003d source.getMood();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.lastDoneTaskTime \u003d source.getLastDoneTaskTime();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Pet() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this(DEFAULT_NAME, DEFAULT_EXP, DEFAULT_LEVEL, DEFAULT_MOOD, DEFAULT_LAST_DONE_TASK_TIME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    // When a task is done, exp level increases by 5"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void incrementExp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        int newExp \u003d Integer.parseInt(this.exp) + 5;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.exp \u003d Integer.toString(newExp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // update level"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        int expInteger \u003d Integer.parseInt(this.exp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        int levelInteger \u003d (int) Math.ceil(expInteger / 99.0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.level \u003d Integer.toString(levelInteger);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void incrementPomExp() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        int newExp \u003d Integer.parseInt(this.exp) + 25;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.exp \u003d Integer.toString(newExp);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // update level"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        int expInteger \u003d Integer.parseInt(this.exp);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        int levelInteger \u003d (int) Math.ceil(expInteger / 99.0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.level \u003d Integer.toString(levelInteger);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        setLastDoneTaskTime(LocalDateTime.now().toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void changeHangry() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.mood \u003d HANGRY_MOOD_STRING;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void changeHappy() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.mood \u003d HAPPY_MOOD_STRING;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void setLastDoneTaskTime(String lastDoneTaskTime) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.lastDoneTaskTime \u003d lastDoneTaskTime;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getLevel() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return level;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getExp() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return this.exp;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public String getMood() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (this.mood \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            this.mood \u003d DEFAULT_MOOD;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return this.mood;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public String getLastDoneTaskTime() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (this.lastDoneTaskTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            this.lastDoneTaskTime \u003d DEFAULT_LAST_DONE_TASK_TIME;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return this.lastDoneTaskTime;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return String.format(\"Hi I\u0027m pet %s! my Exp is %s and my level is %s\", name, exp, level);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 62,
      "artlee06": 6,
      "BransonNg": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Pomodoro.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class Pomodoro implements ReadOnlyPomodoro {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final String DEFAULT_TIME \u003d \"25.0\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String TIME_REGEX \u003d \"\\\\d+.?\\\\d*\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String defaultTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String timeLeft;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Task runningTask; // runningTask will be null if not running tasks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Pomodoro(String defaultTime, String timeLeft, Task runningTask) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (defaultTime \u003d\u003d null || !defaultTime.matches(TIME_REGEX)) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            defaultTime \u003d DEFAULT_TIME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (timeLeft \u003d\u003d null || !timeLeft.matches(TIME_REGEX)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            timeLeft \u003d defaultTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.defaultTime \u003d defaultTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.timeLeft \u003d timeLeft;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.runningTask \u003d runningTask;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Pomodoro(ReadOnlyPomodoro source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this(source.getDefaultTime(), source.getTimeLeft(), source.getRunningTask());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Pomodoro() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this(DEFAULT_TIME, DEFAULT_TIME, null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTask(Task runningTask) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.runningTask \u003d runningTask;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Task getRunningTask() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this.runningTask;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getDefaultTime() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this.defaultTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getTimeLeft() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this.timeLeft;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"Hi running task is: %s! my timeleft is %s and my default time is %s\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                runningTask \u003d\u003d null ? \"No tasks!\" : runningTask.toString(), timeLeft, defaultTime);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyPet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public interface ReadOnlyPet {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getName();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getLevel();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getExp();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public String getMood();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public String getLastDoneTaskTime();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 4,
      "BransonNg": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyPomodoro.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public interface ReadOnlyPomodoro {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Task getRunningTask();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getDefaultTime();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getTimeLeft();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyStatistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public interface ReadOnlyStatistics {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Returns an unmodifiable view of the persons list. This list will not contain any duplicate"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * persons."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    ObservableList\u003cDayData\u003e getDayDataList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Unmodifiable view of an address book */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public interface ReadOnlyTaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns an unmodifiable view of the persons list. This list will not contain any duplicate"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * persons."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 2,
      "BransonNg": 4,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Unmodifiable view of user prefs. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Path getPetFilePath();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Path getPomodoroFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    Path getStatisticsFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 6,
      "Permas-Teo": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Statistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.CustomQueue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.exceptions.DayDataNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.exceptions.InvalidTableException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** Wraps all DayData objects. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class Statistics implements ReadOnlyStatistics {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final CustomQueue customQueue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Statistics() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue \u003d new CustomQueue();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            customQueue.init();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } catch (InvalidTableException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public CustomQueue getCustomQueue() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return customQueue;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Creates an DayDataList using the DayDatas in the {@code toBeCopied} */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Statistics(ReadOnlyStatistics toBeCopied) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Clears list */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void clearList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.customQueue.clear();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Replaces the contents of the list with {@code dayDataList}. */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDayDatas(List\u003cDayData\u003e dayDataList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.clear();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            customQueue.setDayDatas(dayDataList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } catch (InvalidTableException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Resets the existing data of this {@code Statistics} with {@code newData}. */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void resetData(ReadOnlyStatistics newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        setDayDatas(newData.getDayDataList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    //// customQueue operations"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** reinitialises dayDataList to current day while retaining stored data. */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updateDataDates() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            customQueue.updateDataDatesCustom();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } catch (InvalidTableException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Auto-checks and replaces a new DayData object at the same Date"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param dayData"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updatesDayData(DayData dayData) throws DayDataNotFoundException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            customQueue.updatesDayDataCustom(dayData);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } catch (DayDataNotFoundException | InvalidTableException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Gets DayData object at current date."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayData getDayDataFromDate(Date date) throws DayDataNotFoundException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return customQueue.getDayDataFromDateCustom(date);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } catch (DayDataNotFoundException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    // util methods"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Removes the dayData at the head of the internallist. */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void pop() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.pop();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Adds a dayData to the end of the internallist. */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void addDayData(DayData dayData) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.add(dayData);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return customQueue.asUnmodifiableObservableList().size() + \" dayDatas\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                || (other instanceof Statistics // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u0026\u0026 customQueue.equals(((Statistics) other).customQueue));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public ObservableList\u003cDayData\u003e getDayDataList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return customQueue.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 7,
      "Permas-Teo": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * Wraps all data at the address-book level Duplicates are not allowed (by .isSameTask comparison)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class TaskList implements ReadOnlyTaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final UniqueTaskList tasklist;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        tasklist \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskList() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Creates an TaskList using the Tasks in the {@code toBeCopied} */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskList(ReadOnlyTaskList toBeCopied) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}. {@code persons} must not"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * contain duplicate persons."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasklist) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.tasklist.setTasks(tasklist);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Resets the existing data of this {@code TaskList} with {@code newData}. */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void resetData(ReadOnlyTaskList newData) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return tasklist.contains(task);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Adds a person to the address book. The person must not already exist in the address book. */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        tasklist.add(t);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedTask}. {@code target}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * must exist in the address book. The person identity of {@code editedTask} must not be the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * same as another existing person in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        tasklist.setTask(target, editedTask);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Removes {@code key} from this {@code TaskList}. {@code key} must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        tasklist.remove(key);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return tasklist.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return tasklist.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                || (other instanceof TaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \u0026\u0026 tasklist.equals(((TaskList) other).tasklist));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return tasklist.hashCode();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 22,
      "BransonNg": 15,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents User\u0027s preferences. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Path taskListFilePath \u003d Paths.get(\"data\", \"tasklist.json\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Path petFilePath \u003d Paths.get(\"data\", \"pet.json\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Path pomodoroFilePath \u003d Paths.get(\"data\", \"pomodoro.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private Path statisticsFilePath \u003d Paths.get(\"data\", \"statistics.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Creates a {@code UserPrefs} with default values. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Creates a {@code UserPrefs} with the prefs in {@code userPrefs}. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        setTaskListFilePath(newUserPrefs.getTaskListFilePath());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        setPetFilePath(newUserPrefs.getPetFilePath());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        setPomodoroFilePath(newUserPrefs.getPomodoroFilePath());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        setStatisticsFilePath(newUserPrefs.getStatisticsFilePath());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return taskListFilePath;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Path getPetFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return petFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Path getPomodoroFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return pomodoroFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Path getStatisticsFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return statisticsFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTaskListFilePath(Path taskListFilePath) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(taskListFilePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.taskListFilePath \u003d taskListFilePath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setPetFilePath(Path petFilePath) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(petFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.petFilePath \u003d petFilePath;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setPomodoroFilePath(Path pomodoroFilePath) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(pomodoroFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.pomodoroFilePath \u003d pomodoroFilePath;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setStatisticsFilePath(Path statisticsFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(statisticsFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.statisticsFilePath \u003d statisticsFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { // this handles null as well."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return guiSettings.equals(o.guiSettings) \u0026\u0026 taskListFilePath.equals(o.taskListFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return Objects.hash(guiSettings, taskListFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + taskListFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 36,
      "Permas-Teo": 7,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/dayData/CustomQueue.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.exceptions.DayDataNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.exceptions.InvalidTableException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * A list of dayDatas that enforces CONSTANT_SIZE, days must be continuous between its elements and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * does not allow nulls. A dayData is considered unique by comparing using {@code"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * DayData#isSameDayData(DayData)}. As such, adding and updating of persons uses"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * DayData#isSameDayData(DayData) for equality so as to ensure that the dayDaya being added or"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * updated is unique in terms of identity in the CustomQueue. However, the removal of a person uses"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * DayData#equals(Object) so as to ensure that the dayData with exactly the same fields will be"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * removed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * \u003cp\u003eSupports a minimal set of list operations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * @see DayData#isSameDayData(DayData)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class CustomQueue implements Iterable\u003cDayData\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            \"CONSTANT_SIZE enforced, days must be continuous\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final int CONSTANT_SIZE \u003d 7;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final ObservableList\u003cDayData\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final ObservableList\u003cDayData\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Initialises empty DayData for past MAX_SIZE days */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void init() throws InvalidTableException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        for (int i \u003d CONSTANT_SIZE - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            LocalDate tempLocalDate \u003d currDate.minusDays(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            String tempLocalDateStr \u003d tempLocalDate.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Date tempDate \u003d new Date(tempLocalDateStr);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            DayData dayData \u003d new DayData(tempDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            this.add(dayData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!tableConstraintsAreEnforced(internalList)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new InvalidTableException(CustomQueue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** reinitialises dayDataList to current day while retaining stored data. */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updateDataDatesCustom() throws InvalidTableException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        LocalDate todayLocalDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DayData currDayData \u003d this.getLatestDayData();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        LocalDate currLocalDate \u003d currDayData.getDate().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        long daysBetween \u003d DAYS.between(todayLocalDate, currLocalDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (daysBetween \u003e CONSTANT_SIZE) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            this.init();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            while (!currLocalDate.equals(todayLocalDate)) { // keep adding new date from last date"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                this.pop(); // poll oldest day from queue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                currLocalDate \u003d currLocalDate.plusDays(1); // create new day LocalDate"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                String currLocalDateStr \u003d currLocalDate.toString(); // construct DayData"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                Date tempDate \u003d new Date(currLocalDateStr);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                DayData tempDayData \u003d new DayData(tempDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                this.push(tempDayData); // add to queue"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                assert (this.size() \u003c\u003d CONSTANT_SIZE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!tableConstraintsAreEnforced(internalList)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new InvalidTableException(CustomQueue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Auto-checks and replaces a new DayData object at the same Date"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param dayData"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updatesDayDataCustom(DayData dayData) throws InvalidTableException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(dayData);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Date currDate \u003d dayData.getDate();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        for (int i \u003d this.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            DayData currDayData \u003d this.get(i);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Date currDayDataDate \u003d currDayData.getDate();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            if (currDayDataDate.equals(currDate)) { // correct date"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                this.setDayData(currDayData, dayData); // replace currDayData with dayData"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!tableConstraintsAreEnforced(internalList)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new InvalidTableException(CustomQueue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Gets DayData object at current date."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayData getDayDataFromDateCustom(Date date) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        for (int i \u003d this.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            DayData currDayData \u003d this.get(i);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Date currDayDataDate \u003d currDayData.getDate();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            if (currDayDataDate.equals(date)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                return currDayData;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        throw new DayDataNotFoundException(); // dayData not found"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Removes oldest DayData from head of the queue. */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void pop() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.remove(0);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Add Daydata to end of queue."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param dayData dayData to be added."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private void push(DayData dayData) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.add(dayData);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Identify latest DayData in the queue. */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private DayData getLatestDayData() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return this.get(CONSTANT_SIZE - 1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Returns true if the list contains an equivalent dayData as the given argument. */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public boolean contains(DayData toCheck) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDayData);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Adds a dayData to the end of the queue. */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void add(DayData toAdd) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayData get(int i) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return internalList.get(i);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        internalList.remove(0);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Replaces the dayData {@code target} in the list with {@code editedDayData}. {@code target}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * must exist in the list. The dayData identity of {@code editedDayData} must not be the same as"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * another existing person in the list."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDayData(DayData target, DayData editedDayData) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireAllNonNull(target, editedDayData);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!target.isSameDayData(editedDayData) \u0026\u0026 contains(editedDayData)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        internalList.set(index, editedDayData);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Removes the equivalent dayData from the list. The dayData must exist in the list. */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void remove(DayData toRemove) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * public void setDayDatas(CustomQueue replacement) { requireNonNull(replacement);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * internalList.setAll(replacement.internalList); }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Replaces the contents of this list with {@code dayDatas}. {@code dayDatas} must not break"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * table constraints"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDayDatas(List\u003cDayData\u003e dayDatas) throws InvalidTableException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireAllNonNull(dayDatas);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!tableConstraintsAreEnforced(dayDatas)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new InvalidTableException("
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    CustomQueue.MESSAGE_CONSTRAINTS); // table is not size FIXED_SIZE"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        internalList.setAll(dayDatas);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Returns the backing list as an unmodifiable {@code ObservableList}. */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public ObservableList\u003cDayData\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Iterator\u003cDayData\u003e iterator() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                || (other instanceof CustomQueue // instanceof handles nulls"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u0026\u0026 internalList.equals(((CustomQueue) other).internalList));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Returns true if {@code dayDatas} table constraints are enforced */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static boolean tableConstraintsAreEnforced(List\u003cDayData\u003e dayDatas) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        boolean res \u003d true;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (dayDatas.size() !\u003d CONSTANT_SIZE) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            res \u003d false; // table is not size CONSTANT_SIZE"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            DayData dayDataCheckPointer \u003d dayDatas.get(0); // from list"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Date dateCheckPointer \u003d dayDataCheckPointer.getDate();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            LocalDate localDateCheckPointer \u003d dateCheckPointer.value;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            LocalDate currentLocalDate \u003d null; // to check"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            for (DayData dayData : dayDatas) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                currentLocalDate \u003d dayData.getDate().value;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                if (!localDateCheckPointer.equals(currentLocalDate)) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    res \u003d false; // days must be continuous"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                localDateCheckPointer \u003d localDateCheckPointer.plusDays(1);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            // TODO"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 19,
      "Permas-Teo": 257
    }
  },
  {
    "path": "src/main/java/seedu/address/model/dayData/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * Represents a DayDaya\u0027s date in the address book. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \"Date must be in the form yyyy-mm-dd and is a valid date in the Gregorian calender\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final DateTimeFormatter dateFormatter \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            DateTimeFormatter.ofPattern(\"uuuu-MM-dd\", Locale.US)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public final LocalDate value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param date A valid priority number."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        value \u003d localDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Returns true if a given string is a valid date. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            dateFormatter.parse(test);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String toPrint() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String dateString \u003d value.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return dateString.substring(5,7) + \"/\" + dateString.substring(8,10);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/dayData/DayData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class DayData {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final PomDurationData pomDurationData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final TasksDoneData tasksDoneData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayData(Date date, PomDurationData pomDurationData, TasksDoneData tasksDoneData) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.pomDurationData \u003d pomDurationData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.tasksDoneData \u003d tasksDoneData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayData(Date date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.pomDurationData \u003d new PomDurationData();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.tasksDoneData \u003d new TasksDoneData();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public PomDurationData getPomDurationData() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return this.pomDurationData;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public TasksDoneData getTasksDoneData() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return this.tasksDoneData;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Returns true if both dayDatas has the same Date field. his defines a weaker notion of"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * equality between two dayDatas."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public boolean isSameDayData(DayData otherDayData) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (otherDayData \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return otherDayData !\u003d null \u0026\u0026 otherDayData.getDate().equals(getDate());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Returns true if both persons have the same identity and data fields. This defines a stronger"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * notion of equality between two persons."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!(other instanceof DayData)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DayData otherDayData \u003d (DayData) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return otherDayData.getDate().equals(getDate())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u0026\u0026 otherDayData.getPomDurationData().equals(getPomDurationData())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u0026\u0026 otherDayData.getTasksDoneData().equals(getTasksDoneData());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDate(Date date) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setPomDurationData(PomDurationData pomDurationData) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.pomDurationData \u003d pomDurationData;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setTasksDoneData(TasksDoneData tasksDoneData) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.tasksDoneData \u003d tasksDoneData;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 3,
      "Permas-Teo": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/dayData/PomDurationData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * Represents a DayData\u0027s PomDurationData number. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * {@link #isValidPomDurationData(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class PomDurationData {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \"PomDurationData is an integer greater than or equals to 0 and less than 1440\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public final Integer value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Constructs a {@code PomDurationData}. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public PomDurationData() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        value \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Constructs a {@code PomDurationData}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param pomDurationData A valid priority number."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public PomDurationData(String pomDurationData) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(pomDurationData);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        checkArgument(isValidPomDurationData(pomDurationData), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        value \u003d Integer.valueOf(pomDurationData);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Returns true if a given string is a valid priority number. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static boolean isValidPomDurationData(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            int i \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return (i \u003e\u003d 0 \u0026\u0026 i \u003c 1440);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                || (other instanceof PomDurationData // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u0026\u0026 value.equals(((PomDurationData) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/dayData/TasksDoneData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * Represents a DayData\u0027s TasksDoneData number. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * {@link #isValidTasksDoneData(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class TasksDoneData {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \"TasksDoneData is an integer greater than or equals to 0\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public final Integer value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Constructs a {@code TasksDoneData}. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public TasksDoneData() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        value \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Constructs a {@code TasksDoneData}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param taskDoneData A valid priority number."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public TasksDoneData(String taskDoneData) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(taskDoneData);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        checkArgument(isValidTasksDoneData(taskDoneData), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        value \u003d Integer.valueOf(taskDoneData);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Returns true if a given string is a valid priority number. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static boolean isValidTasksDoneData(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            int i \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return i \u003e\u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                || (other instanceof TasksDoneData // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u0026\u0026 value.equals(((TasksDoneData) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/dayData/exceptions/DayDataNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** Signals that the operation is unable to find the specified person. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class DayDataNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/dayData/exceptions/InvalidTableException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** Signals that some given data does not fulfill some constraints. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class InvalidTableException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** @param message should contain relevant information on the failed constraint(s) */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public InvalidTableException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * Represents a Tag in the address book. Guarantees: immutable; name is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns true if a given string is a valid tag name. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Format state as text for viewing. */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 4,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * Represents a Task\u0027s address in the address book. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            \"Description can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // requireNonNull(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Returns true if a given string is a valid description. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 12,
      "artlee06": 1,
      "Permas-Teo": 3,
      "BransonNg": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Done.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * Represents a Task\u0027s Done in the address book. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * {@link #isValidDone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class Done {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Done should be a simple Boolean \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String DONE \u003d \"Y\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String NOT_DONE \u003d \"N\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"Y|N\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public final Boolean isDone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Constructs a {@code Done}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param isDone A valid Done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Done(String isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(isDone);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        checkArgument(isValidDone(isDone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.isDone \u003d isDone.equals(DONE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Done() { // TODO maybe don\u0027t need, but i don\u0027t get why we should use a PersonBuilder to inject"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // default values"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns true if a given string is a valid name. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static boolean isValidDone(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Boolean getIsDone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return isDone ? DONE : NOT_DONE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                || (other instanceof Done // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \u0026\u0026 isDone \u003d\u003d (((Done) other).isDone)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return isDone.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 59,
      "Permas-Teo": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * Represents a Task\u0027s name in the address book. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class Name implements Comparable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns true if a given string is a valid name. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public int compareTo(Object obj) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!(obj instanceof Name)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Name other \u003d (Name) obj;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return other.fullName.compareToIgnoreCase(this.fullName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 2,
      "BransonNg": 11,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "/** Tests that a {@code Task}\u0027s {@code Name} matches any of the keywords given. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .anyMatch("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        keyword -\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                        task.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \u0026\u0026 keywords.equals("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                ((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 5,
      "BransonNg": 5,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Priority.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * Represents a Task\u0027s priority number in the address book. Guarantees: immutable; is valid as"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * declared in {@link #isValidPriority(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class Priority implements Comparable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Priority only contain numbers {1,2,3}\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[1-3]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Constructs a {@code Priority}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param priority A valid priority number."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Priority(String priority) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        checkArgument(isValidPriority(priority), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        value \u003d priority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns true if a given string is a valid priority number. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \u0026\u0026 value.equals(((Priority) other).value)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public int compareTo(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!(other instanceof Priority)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Priority otherPriority \u003d (Priority) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return otherPriority.value.compareTo(this.value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 2,
      "BransonNg": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Reminder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "artlee06"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidReminderException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "artlee06"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * Represents a Task\u0027s reminder number in the address book. Guarantees: immutable; is valid as"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * declared in {@link #isValidReminder(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "artlee06"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class Reminder implements Comparable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \"Reminder should be in format DD/MM/YY@HH:mm eg 04/11/20@10:30\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final DateTimeFormatter stringFormatter \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd/MM/yy@HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private final LocalDateTime reminderDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private boolean hasFired;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private long delay;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Constructs a reminder with the corresponding time, description and name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @param reminderDateTime"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @param Description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @param Name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @throws InvalidReminderException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public Reminder(LocalDateTime reminderDateTime) throws InvalidReminderException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.reminderDateTime \u003d reminderDateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.hasFired \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.delay \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        setDelay();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public Reminder(String dateTimeString) throws InvalidReminderException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.reminderDateTime \u003d stringFormatter.parse(dateTimeString, LocalDateTime::from);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.hasFired \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.delay \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        setDelay();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private long calculateDelay(LocalDateTime reminderDateTime) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        LocalDateTime currentTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Duration duration \u003d Duration.between(currentTime, reminderDateTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        long delay \u003d duration.getSeconds();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return delay;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public void setHasFired() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.hasFired \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static boolean isValidReminder(String dateTimeString) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            stringFormatter.parse(dateTimeString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Sets the reminder based on the time delay calculated. If it has fired then nothing is"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * triggered."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @throws InvalidReminderException if the time delay is negative and has not been fired before."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private void setDelay() throws InvalidReminderException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        long timeDelay \u003d calculateDelay(reminderDateTime);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (timeDelay \u003c 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            if (!hasFired) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                throw new InvalidReminderException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            this.delay \u003d timeDelay;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** @return the delay */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public long getDelay() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return delay;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public String displayReminder() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        DateTimeFormatter customFormatter \u003d DateTimeFormatter.ofPattern(\"dd LLLL \u0027at\u0027 h:ma\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return reminderDateTime.format(customFormatter);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return reminderDateTime.format(stringFormatter);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public int compareTo(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!(other instanceof Reminder)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Reminder otherReminder \u003d (Reminder) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        long diffFromToday \u003d calculateDelay(this.reminderDateTime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        long otherDiffFromToday \u003d calculateDelay(otherReminder.reminderDateTime);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        System.out.println(diffFromToday);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (diffFromToday \u003c otherDiffFromToday) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (diffFromToday \u003c 0) { // if already over, put it lower in the list"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } else if (otherDiffFromToday \u003c diffFromToday) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (otherDiffFromToday \u003c 0) { // if already over put it lower in the list"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "artlee06"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 2,
      "artlee06": 84,
      "BransonNg": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * Represents a Task in the task list. Guarantees: details are present and not null, field values"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    // Data fields\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final Done done;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private final Optional\u003cReminder\u003e optionalReminder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Every field must be present and not null. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Task("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Name name,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Priority priority,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Description description,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Done done,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Optional\u003cReminder\u003e optionalReminder) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireAllNonNull(name, priority, description, tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.optionalReminder \u003d optionalReminder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        triggerReminderIfPresent();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** With done and no reminder */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public Task(Name name, Priority priority, Description description, Done done, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        requireAllNonNull(name, priority, description, tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.optionalReminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // without done provided"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Task("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Name name,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Priority priority,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Description description,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Optional\u003cReminder\u003e optionalReminder) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        requireAllNonNull(name, priority, description, tags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.done \u003d new Done();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.optionalReminder \u003d optionalReminder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        triggerReminderIfPresent();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    // without Reminder or done provided"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public Task(Name name, Priority priority, Description description, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        requireAllNonNull(name, priority, description, tags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.done \u003d new Done();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.optionalReminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public void triggerReminderIfPresent() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (optionalReminder.isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            Reminder reminder \u003d optionalReminder.get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            MainWindow.triggerReminder(reminder, name.toString(), description.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Done getDone() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public Optional\u003cReminder\u003e getOptionalReminder() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return optionalReminder;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException} if"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * modification is attempted."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * the same. This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u0026\u0026 otherTask.getName().equals(getName())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                \u0026\u0026 (otherTask.getPriority().equals(getPriority()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns true if both persons have the same identity and data fields. This defines a stronger"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * notion of equality between two persons."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return otherTask.getName().equals(getName())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u0026\u0026 otherTask.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u0026\u0026 otherTask.getTags().equals(getTags());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return Objects.hash(name, priority, description, tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .append(\" Priority: \")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .append(getPriority())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 12,
      "FyonnOh": 4,
      "artlee06": 40,
      "BransonNg": 50,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls. A"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * person is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * updating of persons uses Task#isSameTask(Task) for equality so as to ensure that the person being"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * added or updated is unique in terms of identity in the UniqueTaskList. However, the removal of a"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * person uses Task#equals(Object) so as to ensure that the person with exactly the same fields will"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * \u003cp\u003eSupports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Returns true if the list contains an equivalent person as the given argument. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Adds a person to the list. The person must not already exist in the list. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedTask}. {@code target} must"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * exist in the list. The person identity of {@code editedTask} must not be the same as another"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * existing person in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Removes the equivalent person from the list. The person must exist in the list. */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Replaces the contents of this list with {@code persons}. {@code persons} must not contain"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * duplicate persons."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Returns the backing list as an unmodifiable {@code ObservableList}. */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Returns true if {@code persons} contains only unique persons. */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 118,
      "BransonNg": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/InvalidReminderException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "artlee06"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Signals that the reminder\u0027s time is before the current time */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "artlee06"
        },
        "content": "public class InvalidReminderException extends ParseException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public InvalidReminderException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        super(\"Operation would result in invalid reminder due to the wrong timing\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "artlee06"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "artlee06": 9,
      "BransonNg": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "/** Signals that the operation is unable to find the specified person. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Contains utility methods for populating {@code TaskList} with sample data. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new Task("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    new Name(\"Alex Yeoh\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    new Priority(\"1\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    new Description(\"\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new Task("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    new Name(\"Bernice Yu\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    new Priority(\"1\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    new Description(\"\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new Task("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    new Name(\"Charlotte Oliveiro\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    new Priority(\"1\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    new Description(\"\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new Task("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    new Name(\"David Li\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    new Priority(\"1\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    new Description(\"\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"family\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new Task("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    new Name(\"Irfan Ibrahim\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    new Priority(\"1\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    new Description(\"\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new Task("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    new Name(\"Roy Balakrishnan\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    new Priority(\"1\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    new Description(\"\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static ReadOnlyTaskList getSampleTaskList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList sampleAb \u003d new TaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            sampleAb.addTask(sampleTask);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns a tag set containing the list of strings given. */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return Arrays.stream(strings).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 13,
      "BransonNg": 26,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDayData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.PomDurationData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.TasksDoneData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** Jackson-friendly version of {@link DayData}. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "class JsonAdaptedDayData {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"DayData\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final String pomDurationData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final String tasksDoneData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Constructs a {@code JsonAdaptedDayData} with the given person details. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public JsonAdaptedDayData("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            @JsonProperty(\"pomDurationData\") String pomDurationData,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            @JsonProperty(\"tasksDoneData\") String tasksDoneData) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.pomDurationData \u003d pomDurationData;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.tasksDoneData \u003d tasksDoneData;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Converts a given {@code Task} into this class for Jackson use. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public JsonAdaptedDayData(DayData source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        pomDurationData \u003d source.getPomDurationData().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        tasksDoneData \u003d source.getTasksDoneData().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String getDateJson() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code DayData} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *     person."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayData toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (pomDurationData \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                            MISSING_FIELD_MESSAGE_FORMAT, PomDurationData.class.getSimpleName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!PomDurationData.isValidPomDurationData(pomDurationData)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new IllegalValueException(PomDurationData.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        final PomDurationData modelPomDurationData \u003d new PomDurationData(pomDurationData);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (tasksDoneData \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                            MISSING_FIELD_MESSAGE_FORMAT, TasksDoneData.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!TasksDoneData.isValidTasksDoneData(tasksDoneData)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new IllegalValueException(TasksDoneData.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        final TasksDoneData modelTasksDoneData \u003d new TasksDoneData(tasksDoneData);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return new DayData(modelDate, modelPomDurationData, modelTasksDoneData);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "@JsonRootName(value \u003d \"pet\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "class JsonAdaptedPet {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Pet\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final String exp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final String level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private final String mood;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private final String lastDoneTaskTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Constructs a {@code JsonAdaptedTask} with the given person details. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public JsonAdaptedPet("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            @JsonProperty(\"exp\") String exp,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            @JsonProperty(\"level\") String level,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            @JsonProperty(\"mood\") String mood,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            @JsonProperty(\"lastDoneTaskTime\") String lastDoneTaskTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.exp \u003d exp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.mood \u003d mood;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.lastDoneTaskTime \u003d lastDoneTaskTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Converts a given {@code Task} into this class for Jackson use. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public JsonAdaptedPet(ReadOnlyPet source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        exp \u003d source.getExp();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        level \u003d source.getLevel();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        mood \u003d source.getMood();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        lastDoneTaskTime \u003d source.getLastDoneTaskTime();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     *     person."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public ReadOnlyPet toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // TODO set up proper model for all attributes of the Pet"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // throw new IllegalValueException("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // String.format(MISSING_FIELD_MESSAGE_FORMAT, \"name\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // if (exp \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // throw new IllegalValueException("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // String.format(MISSING_FIELD_MESSAGE_FORMAT, \"exp\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // if (!exp.isValidexp(exp)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // throw new IllegalValueException(exp.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // final exp modelexp \u003d new exp(priority);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // if (level \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // throw new IllegalValueException("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // String.format(MISSING_FIELD_MESSAGE_FORMAT, level.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // if (!level.isValidlevel(level)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // throw new IllegalValueException(level.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // final level modellevel \u003d new level(level);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return new Pet(name, exp, level, mood, lastDoneTaskTime);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 16,
      "BransonNg": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPomodoro.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPomodoro;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "@JsonRootName(value \u003d \"pomodoro\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "class JsonAdaptedPomodoro {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Pomodoro\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private String defaultTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private String timeLeft;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private JsonAdaptedTask runningTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Constructs a {@code JsonAdaptedTask} with the given person details. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public JsonAdaptedPomodoro("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            @JsonProperty(\"defaultTime\") String defaultTime,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            @JsonProperty(\"timeLeft\") String timeLeft,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            @JsonProperty(\"runningTask\") JsonAdaptedTask runningTask) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.defaultTime \u003d defaultTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.timeLeft \u003d timeLeft;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.runningTask \u003d runningTask;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Converts a given {@code Task} into this class for Jackson use. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public JsonAdaptedPomodoro(ReadOnlyPomodoro source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.defaultTime \u003d source.getDefaultTime();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.timeLeft \u003d source.getTimeLeft();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (source.getRunningTask() \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.runningTask \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.runningTask \u003d new JsonAdaptedTask(source.getRunningTask());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *     person."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public ReadOnlyPomodoro toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (runningTask \u003d\u003d null) return new Pomodoro(defaultTime, timeLeft, null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new Pomodoro(defaultTime, timeLeft, runningTask.toModelType());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Jackson-friendly version of {@link Tag}. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Constructs a {@code JsonAdaptedTag} with the given {@code tagName}. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Converts a given {@code Tag} into this class for Jackson use. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 3,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Done;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "/** Jackson-friendly version of {@link Task}. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "class JsonAdaptedTask {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final String done;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private final String reminder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Constructs a {@code JsonAdaptedTask} with the given details. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public JsonAdaptedTask("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            @JsonProperty(\"priority\") String priority,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            @JsonProperty(\"done\") String done,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            @JsonProperty(\"reminder\") String reminder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Converts a given {@code Task} into this class for Jackson use. */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        priority \u003d source.getPriority().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        done \u003d source.getDone().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        tagged.addAll("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                source.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        reminder \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                (source.getOptionalReminder().isPresent())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        ? source.getOptionalReminder().get().toString()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        : \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *     person."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!Priority.isValidPriority(priority)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        final Priority modelPriority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!Done.isValidDone(done)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new IllegalValueException(Done.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        final Done modelDone \u003d new Done(done);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Optional\u003cReminder\u003e optReminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (reminder \u003d\u003d null || reminder.equals(\"\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            optReminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            optReminder \u003d Optional.of(new Reminder(reminder));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return new Task("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                modelName, modelPriority, modelDescription, modelDone, modelTags, optReminder);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 17,
      "FyonnOh": 7,
      "artlee06": 14,
      "BransonNg": 33,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPetStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A class to access TaskList data stored as a json file on the hard disk. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class JsonPetStorage implements PetStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPetStorage.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public JsonPetStorage(Path filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Path getPetFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Optional\u003cReadOnlyPet\u003e readPet() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return readPet(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Similreaar to {@link #readPet()}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Optional\u003cReadOnlyPet\u003e readPet(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Optional\u003cJsonAdaptedPet\u003e jsonPet \u003d JsonUtil.readJsonFile(filePath, JsonAdaptedPet.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!jsonPet.isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return Optional.of(jsonPet.get().toModelType()); // Returns pet read from json"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void savePet(ReadOnlyPet pet) throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        savePet(pet, filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Similar to {@link #savePet(ReadOnlyPet)}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void savePet(ReadOnlyPet pet, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(pet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonAdaptedPet(pet), filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 1,
      "BransonNg": 19,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPomodoroStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPomodoro;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A class to access TaskList data stored as a json file on the hard disk. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class JsonPomodoroStorage implements PomodoroStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPomodoroStorage.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public JsonPomodoroStorage(Path filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Similar to {@link #readTaskList()}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Optional\u003cReadOnlyPomodoro\u003e readPomodoro() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(this.filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Optional\u003cJsonAdaptedPomodoro\u003e jsonPomodoro \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                JsonUtil.readJsonFile(this.filePath, JsonAdaptedPomodoro.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!jsonPomodoro.isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return Optional.of(jsonPomodoro.get().toModelType());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Similar to {@link #saveTaskList(ReadOnlyPomodoro)}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void savePomodoro(ReadOnlyPomodoro pomodoro) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(pomodoro);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(this.filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        FileUtil.createIfMissing(this.filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonAdaptedPomodoro(pomodoro), filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableDayDataList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static seedu.address.model.dayData.CustomQueue.CONSTANT_SIZE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.CustomQueue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.exceptions.InvalidTableException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.model.dayData.CustomQueue.tableConstraintsAreEnforced;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** An Immutable TaskList that is serializable to JSON format. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "@JsonRootName(value \u003d \"statistics\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "class JsonSerializableDayDataList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final List\u003cJsonAdaptedDayData\u003e dayDatas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Constructs a {@code JsonSerializableTaskList} with the given tasks. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public JsonSerializableDayDataList("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            @JsonProperty(\"medals\") String medals,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            @JsonProperty(\"dayDatas\") List\u003cJsonAdaptedDayData\u003e dayDatas) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.dayDatas.addAll(dayDatas);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Converts a given {@code ReadOnlyTaskList} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param source future changes to this will not affect the created {@code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *     JsonSerializableTaskList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public JsonSerializableDayDataList(ReadOnlyStatistics source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        dayDatas.addAll("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                source.getDayDataList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .map(JsonAdaptedDayData::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Converts this address book into the model\u0027s {@code TaskList} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Statistics toModelType() throws IllegalValueException, InvalidTableException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        List\u003cDayData\u003e dayDataList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        for (JsonAdaptedDayData jsonAdaptedDayData : dayDatas) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            DayData dayData \u003d jsonAdaptedDayData.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            dayDataList.add(dayData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!tableConstraintsAreEnforced(dayDataList)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new InvalidTableException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    CustomQueue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Statistics statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            statistics.setDayDatas(dayDataList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return statistics;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 2,
      "Permas-Teo": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** An Immutable TaskList that is serializable to JSON format. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "@JsonRootName(value \u003d \"tasklist\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "class JsonSerializableTaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Tasks list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Constructs a {@code JsonSerializableTaskList} with the given tasks. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public JsonSerializableTaskList(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Converts a given {@code ReadOnlyTaskList} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param source future changes to this will not affect the created {@code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *     JsonSerializableTaskList}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public JsonSerializableTaskList(ReadOnlyTaskList source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        tasks.addAll("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                source.getTaskList()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .map(JsonAdaptedTask::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Converts this address book into the model\u0027s {@code TaskList} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (taskList.hasTask(task)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            taskList.addTask(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonStatisticsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.exceptions.InvalidTableException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** A class to access TaskList data stored as a json file on the hard disk. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class JsonStatisticsStorage implements StatisticsStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonStatisticsStorage.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public JsonStatisticsStorage(Path filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Path getStatisticsFilePath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Optional\u003cReadOnlyStatistics\u003e readStatistics() throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return readStatistics(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Similar to {@link #readStatistics()}. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public Optional\u003cReadOnlyStatistics\u003e readStatistics(Path filePath)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Optional\u003cJsonSerializableDayDataList\u003e jsonSerializableDayDataList \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                JsonUtil.readJsonFile(filePath, JsonSerializableDayDataList.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!jsonSerializableDayDataList.isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return Optional.of(jsonSerializableDayDataList.get().toModelType());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } catch (InvalidTableException ite) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            logger.info(\"Invalid table constraints found in \" + filePath + \": \" + ite.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new DataConversionException(ite);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void saveStatistics(ReadOnlyStatistics statistics) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        saveStatistics(statistics, filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Similar to {@link #saveStatistics(ReadOnlyStatistics)}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param statistics location of the data. Cannot be null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void saveStatistics(ReadOnlyStatistics statistics, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(statistics);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableDayDataList(statistics), filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 2,
      "Permas-Teo": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTaskListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A class to access TaskList data stored as a json file on the hard disk. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class JsonTaskListStorage implements TaskListStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTaskListStorage.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public JsonTaskListStorage(Path filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readTaskList() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return readTaskList(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Similar to {@link #readTaskList()}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readTaskList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Optional\u003cJsonSerializableTaskList\u003e jsonTaskList \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                JsonUtil.readJsonFile(filePath, JsonSerializableTaskList.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!jsonTaskList.isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return Optional.of(jsonTaskList.get().toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void saveTaskList(ReadOnlyTaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        saveTaskList(taskList, filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Similar to {@link #saveTaskList(ReadOnlyTaskList)}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void saveTaskList(ReadOnlyTaskList taskList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(taskList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTaskList(taskList), filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 20,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A class to access UserPrefs stored in the hard disk as a json file */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PetStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents a storage for {@link seedu.address.model.TaskList}. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public interface PetStorage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the file path of the data file. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Path getPetFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns TaskList data as a {@link ReadOnlyPet}. Returns {@code Optional.empty()} if storage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * file is not found."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Optional\u003cReadOnlyPet\u003e readPet() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** @see #getPetFilePath() */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Optional\u003cReadOnlyPet\u003e readPet(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Saves the given {@link ReadOnlyPet} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param taskList cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void savePet(ReadOnlyPet pet) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** @see #savePet(Pet) */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void savePet(ReadOnlyPet pet, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PomodoroStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPomodoro;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents a storage for {@link seedu.address.model.TaskList}. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public interface PomodoroStorage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns TaskList data as a {@link ReadOnlyTaskList}. Returns {@code Optional.empty()} if"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * storage file is not found."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Optional\u003cReadOnlyPomodoro\u003e readPomodoro() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Saves the given {@link ReadOnlyTaskList} to the storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param pomodoro cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void savePomodoro(ReadOnlyPomodoro pomodoro) throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StatisticsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** Represents a storage for {@link seedu.address.model.Statistics}. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public interface StatisticsStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Returns the file path of the data file. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    Path getStatisticsFilePath();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Returns Statistics data as a {@link ReadOnlyStatistics}. Returns {@code Optional.empty()} if"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * storage file is not found."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    Optional\u003cReadOnlyStatistics\u003e readStatistics() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** @see #getStatisticsFilePath() */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    Optional\u003cReadOnlyStatistics\u003e readStatistics(Path filePath)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Saves the given {@link ReadOnlyStatistics} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param statistics cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    void saveStatistics(ReadOnlyStatistics statistics) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** @see #saveStatistics(ReadOnlyStatistics) */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    void saveStatistics(ReadOnlyStatistics statistics, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** API of the Storage component */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public interface Storage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        extends TaskListStorage, UserPrefsStorage, PetStorage, PomodoroStorage, StatisticsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Optional\u003cReadOnlyTaskList\u003e readTaskList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void saveTaskList(ReadOnlyTaskList taskList) throws IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 5,
      "Permas-Teo": 2,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPomodoro;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Manages storage of TaskList data in local storage. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private TaskListStorage taskListStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private PetStorage petStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private PomodoroStorage pomodoroStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private StatisticsStorage statisticsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // NOTE these storage objects all correspond to Json-storagename, i.e. JsonTaskListStorage, ..."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public StorageManager("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            TaskListStorage taskListStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            PetStorage petStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            PomodoroStorage pomodoroStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            StatisticsStorage dayDataListStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.taskListStorage \u003d taskListStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.petStorage \u003d petStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.pomodoroStorage \u003d pomodoroStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.statisticsStorage \u003d dayDataListStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return taskListStorage.getTaskListFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readTaskList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return readTaskList(taskListStorage.getTaskListFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readTaskList(Path filePath)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return taskListStorage.readTaskList(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void saveTaskList(ReadOnlyTaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        saveTaskList(taskList, taskListStorage.getTaskListFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void saveTaskList(ReadOnlyTaskList taskList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskListStorage.saveTaskList(taskList, filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Pet methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Path getPetFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return petStorage.getPetFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Optional\u003cReadOnlyPet\u003e readPet() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return readPet(petStorage.getPetFilePath());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Optional\u003cReadOnlyPet\u003e readPet(Path filePath)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return petStorage.readPet(filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void savePet(ReadOnlyPet pet) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        savePet(pet, petStorage.getPetFilePath());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void savePet(ReadOnlyPet pet, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        logger.fine(\"Attempting to write pet data: \" + filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        petStorage.savePet(pet, filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Pomodoro methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Optional\u003cReadOnlyPomodoro\u003e readPomodoro() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return pomodoroStorage.readPomodoro();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void savePomodoro(ReadOnlyPomodoro pomodoro) throws IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        logger.fine(\"Attempting to write pomodoro data: \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        pomodoroStorage.savePomodoro(pomodoro);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Path getStatisticsFilePath() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return statisticsStorage.getStatisticsFilePath();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Optional\u003cReadOnlyStatistics\u003e readStatistics()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return statisticsStorage.readStatistics(statisticsStorage.getStatisticsFilePath());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public Optional\u003cReadOnlyStatistics\u003e readStatistics(Path filePath)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return statisticsStorage.readStatistics(filePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void saveStatistics(ReadOnlyStatistics statistics) throws IOException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        logger.fine(\"Attempting to write Statistics data: \");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statisticsStorage.saveStatistics(statistics);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void saveStatistics(ReadOnlyStatistics statistics, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        logger.fine(\"Attempting to write Statistics  data: \" + filePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statisticsStorage.saveStatistics(statistics, filePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 2,
      "BransonNg": 56,
      "Permas-Teo": 34,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TaskListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents a storage for {@link seedu.address.model.TaskList}. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public interface TaskListStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the file path of the data file. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns TaskList data as a {@link ReadOnlyTaskList}. Returns {@code Optional.empty()} if"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * storage file is not found."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Optional\u003cReadOnlyTaskList\u003e readTaskList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** @see #getTaskListFilePath() */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Optional\u003cReadOnlyTaskList\u003e readTaskList(Path filePath)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Saves the given {@link ReadOnlyTaskList} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param taskList cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void saveTaskList(ReadOnlyTaskList taskList) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** @see #saveTaskList(ReadOnlyTaskList) */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void saveTaskList(ReadOnlyTaskList taskList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents a storage for {@link seedu.address.model.UserPrefs}. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the file path of the UserPrefs data file. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns UserPrefs data from storage. Returns {@code Optional.empty()} if storage file is not"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * found."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 6,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** The UI component that is responsible for receiving user command inputs. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, CommandSuggestor commandSuggestor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        commandTextField"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .textProperty()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        commandTextField.setOnKeyPressed("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new EventHandler\u003cKeyEvent\u003e() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    public void handle(KeyEvent event) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        if (event.getCode() \u003d\u003d KeyCode.TAB"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                \u0026\u0026 !event.isShiftDown()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                \u0026\u0026 !event.isControlDown()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            event.consume();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                            String suggestion \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                    commandSuggestor.suggestCommand(commandTextField.getText());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            commandTextField.setText(suggestion);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            // event.consume doesn\u0027t seem to work, the below is thus a workaround"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            commandTextField.requestFocus();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            commandTextField.forward();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            return;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Handles the Enter button pressed event. */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the command box style to use the default style. */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the command box style to indicate a failed command. */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Represents a function that can execute commands. */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public interface CommandSuggestor {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String suggestCommand(String commandText);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 8,
      "BransonNg": 28,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Controller for a help page */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private Button copyButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private Label helpMessage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Creates a new HelpWindow. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *       \u003cli\u003eif this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *       \u003cli\u003eif this method is called during animation or layout processing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *       \u003cli\u003eif this method is called on the primary stage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *       \u003cli\u003eif {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/ul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns true if the help window is currently being shown. */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Hides the help window. */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Focuses on the help window. */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Copies the URL to the user guide to the clipboard. */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 15,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.PetManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.PomodoroManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.PomodoroManager.PROMPT_STATE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.CommandCompletor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.PomCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.PomCommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.SwitchTabCommandResult;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.parser.TaskListParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.ReadOnlyPet;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar and space where"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * other JavaFX elements can be placed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private CommandCompletor commandCompletor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private PomodoroManager pomodoro;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private PetManager petManager;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private TaskListPanel personListPanel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private PetDisplay petDisplay;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private PomodoroDisplay pomodoroDisplay;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private StatisticsDisplay statisticsDisplay;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private StackPane petPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private StackPane pomodoroPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private StackPane statisticsPlaceholder;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @FXML private TabPane tabPanePlaceholder;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public MainWindow("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            Stage primaryStage, Logic logic, PomodoroManager pomodoro, PetManager petManager) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.pomodoro \u003d pomodoro;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.petManager \u003d petManager;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commandCompletor \u003d new CommandCompletor();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public StatisticsDisplay getStatisticsDisplay() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return statisticsDisplay;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666 is fixed in later version of"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "         * SDK."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will not"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "         * work when the focus is in them because the key event is consumed by the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "         * TextInputControl(s)."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "         * help window purposely so to support accelerators even when focus is in"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "         * CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        getRoot()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .addEventFilter("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        KeyEvent.KEY_PRESSED,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        event -\u003e {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            if (event.getTarget() instanceof TextInputControl"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                    \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                                event.consume();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                        });"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Fills up all the placeholders of this window. */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        personListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.updateMoodWhenLogIn();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petDisplay \u003d new PetDisplay();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.setPetDisplay(petDisplay);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.updatePetDisplay();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petPlaceholder.getChildren().add(petDisplay.getRoot());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTaskListFilePath());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        commandBox \u003d new CommandBox(this::executeCommand, this::suggestCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        pomodoroDisplay \u003d new PomodoroDisplay();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        pomodoroPlaceholder.getChildren().add(pomodoroDisplay.getRoot());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoro.setTimerLabel(pomodoroDisplay.getTimerLabel());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoro.setResultDisplay(resultDisplay);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoro.setMainWindow(this);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statisticsDisplay \u003d new StatisticsDisplay();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statisticsPlaceholder.getChildren().add(statisticsDisplay.getRoot());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // tabPanePlaceholder.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the default size based on {@code guiSettings}. */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Opens the help window or focuses on it if it\u0027s already opened. */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Closes the application. */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        GuiSettings guiSettings \u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new GuiSettings("
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        primaryStage.getWidth(),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        primaryStage.getHeight(),"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        (int) primaryStage.getX(),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        (int) primaryStage.getY());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private String suggestCommand(String commandText) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String suggestion \u003d commandCompletor.getSuggestedCommand(commandText);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (suggestion.equals(commandText)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandCompletor.getFailureMessage());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandCompletor.getSuccessMessage());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return suggestion;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setTabFocusTasks() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        tabPanePlaceholder.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private CommandResult executeCommand(String commandText)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws CommandException, ParseException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            // Switch tabs related results"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                SwitchTabCommandResult switchTabCommandResult \u003d"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        (SwitchTabCommandResult) commandResult;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                tabPanePlaceholder"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        .getSelectionModel()"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        .select(switchTabCommandResult.getTabToSwitchIndex());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } catch (ClassCastException ce) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            // Pomodoro related results"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                PomCommandResult pomCommandResult \u003d (PomCommandResult) commandResult;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                if (!pomCommandResult.getIsPause() \u0026\u0026 !pomCommandResult.getIsContinue()) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    pomodoroDisplay.setTaskInProgressText(pomCommandResult.getPommedTask());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    pomodoro.start(pomCommandResult.getTimerAmountInMin());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    pomodoro.setDoneParams("
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                            pomCommandResult.getModel(),"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                            pomCommandResult.getOriginList(),"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                            pomCommandResult.getTaskIndex());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } catch (ClassCastException ce) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } catch (NullPointerException ne) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                resultDisplay.setFeedbackToUser(\"Sorry, you\u0027ve got no tasks being POMmed.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                petManager.handleExit();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            petManager.updatePetDisplay();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            // update because sorting returns a new list"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.personListPanel.setTaskList(this.logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            // * Old implementation for sort"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            // personListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            // personListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            // personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPomCommandExecutor() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        commandBox \u003d new CommandBox(this::pomExecuteCommand, this::suggestCommand);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setDefaultCommandExecutor() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        commandBox \u003d new CommandBox(this::executeCommand, this::suggestCommand);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private CommandResult pomExecuteCommand(String commandText)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throws CommandException, ParseException {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        PomodoroManager.PROMPT_STATE pomPromptState \u003d pomodoro.getPromptState();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        switch (pomPromptState) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            case CHECK_DONE:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                petManager.updatePetDisplay();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                if (commandText.toLowerCase().equals(\"y\")) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            new CommandResult("
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                    \"Good job! \" + pomodoro.CHECK_TAKE_BREAK_MESSAGE, false, false);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    pomodoro.doneTask();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    pomodoro.checkBreakActions();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    // logic.incrementPomExp();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    return commandResult;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    // Continue to next prompt from break-timer"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                } else if (commandText.toLowerCase().equals(\"n\")) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            new CommandResult("
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                    \"Alright, lets try again the next round! \""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                            + pomodoro.CHECK_TAKE_BREAK_MESSAGE,"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                    false,"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                    false);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    pomodoro.checkBreakActions();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    // logic.incrementPomExp();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    return commandResult;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            \"(Please confirm) Did you manage to finish the last task?\\n\""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                    + \"(Y) - Task will be set to done. (N) - No changes\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            case CHECK_TAKE_BREAK:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                if (commandText.toLowerCase().equals(\"y\")) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            new CommandResult(\"Okie doke! Rest easy now...\", false, false);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    pomodoro.takeABreak();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    pomodoro.setPromptState(PROMPT_STATE.NONE);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    return commandResult;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    // Continue to next prompt from break-timer"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                } else if (commandText.toLowerCase().equals(\"n\")) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            new CommandResult(\"Alright, back to neutral!\", false, false);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    pomodoro.setPromptState(PROMPT_STATE.NONE);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    pomodoro.reset();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    this.setDefaultCommandExecutor();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    return commandResult;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            \"(Please confirm) Shall we take a 5-min break?\\n\""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                    + \"(Y) - 5-min timer begins. (N) - App goes neutral.\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            case CHECK_DONE_MIDPOM:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                if (commandText.toLowerCase().equals(\"n\")) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                            new CommandResult(\"Alright, back to neutral!\", false, false);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    pomodoro.setPromptState(PROMPT_STATE.NONE);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    pomodoro.reset();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    this.setDefaultCommandExecutor();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    return commandResult;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    PomCommand pc \u003d (PomCommand) (new TaskListParser().parseCommand(commandText));"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    // if continuedPom was created, user put in a valid pom request. Execute as per"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    // normal"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    PomCommandResult pomCommandResult \u003d"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                            (PomCommandResult) logic.execute(commandText);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    logger.info(\"Result: \" + pomCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    resultDisplay.setFeedbackToUser(pomCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    if (pomCommandResult.getIsPause()) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        pomodoro.pause();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    } else if (pomCommandResult.getIsContinue()) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        pomodoro.unpause();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        pomodoroDisplay.setTaskInProgressText(pomCommandResult.getPommedTask());"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        // pomodoro.start(pomCommandResult.getTimerAmountInMin());"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        pomodoro.unpause();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        pomodoro.setDoneParams("
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                pomCommandResult.getModel(),"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                pomCommandResult.getOriginList(),"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                pomCommandResult.getTaskIndex());"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    pomodoro.setPromptState(PROMPT_STATE.NONE);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    this.setDefaultCommandExecutor();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    return pomCommandResult;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                } catch (ParseException | CommandException | ClassCastException e) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    String message \u003d"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                            \"(Please confirm) Would you like to continue with another task (not done yet)\\n\""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                    + \"(pom \u003cindex\u003e) - next task pommed with remaining time. (N) - App goes neutral.\";"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    resultDisplay.setFeedbackToUser(message);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    throw new ParseException(message);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            case NONE:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static void triggerReminder(Reminder reminder, String name, String description) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        long delay \u003d reminder.getDelay();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Timeline timeline \u003d"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                new Timeline("
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        new KeyFrame("
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                Duration.seconds(delay),"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                ae -\u003e {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                    MainWindow.showReminder(name, description);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                    reminder.setHasFired();"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                }));"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Is triggered at the delayed time in Duke itself."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * https://thecodinginterface.com/blog/javafx-alerts-and-dialogs/#informational-alert"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static void showReminder(String name, String description) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        var alert \u003d new Alert(Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        alert.setTitle(\"Reminder\");"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        alert.setHeaderText(name);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        alert.setContentText(description);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        alert.show();"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 146,
      "FyonnOh": 24,
      "artlee06": 30,
      "BransonNg": 69,
      "Permas-Teo": 18,
      "-": 164
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PetDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** An UI component that displays Pet {@code Pet}. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class PetDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String FXML \u003d \"PetDisplay.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private Path DEFAULT_ACCESSORY_PLACEHOLDER \u003d Paths.get(\"images\", \"pet\", \"medal.png\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private Path DEFAULT_PET_FILEPATH \u003d Paths.get(\"images\", \"pet\", \"level1.png\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private Path DEFAULT_EXPBAR_FILEPATH \u003d Paths.get(\"images\", \"pet\", \"ProgressBar0%.png\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private String DEFAULT_EXPBAR_TEXT \u003d \"0\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private String DEFAULT_LEVEL_TEXT \u003d \"1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private Path petFilepath; // mutable"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private Path accessoryFilepath; // mutable"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private Path expBarFilepath; // mutable"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private String expBarText; // mutable"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private String levelText; // mutable"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @FXML private VBox petPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @FXML private ImageView petPic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @FXML private Label expBarView;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @FXML private ImageView expBarPic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @FXML private ImageView accessoryPic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @FXML private Label levelView;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public PetDisplay() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.accessoryFilepath \u003d DEFAULT_ACCESSORY_PLACEHOLDER;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.petFilepath \u003d DEFAULT_PET_FILEPATH;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.expBarFilepath \u003d DEFAULT_EXPBAR_FILEPATH;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.expBarText \u003d DEFAULT_EXPBAR_TEXT;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.levelText \u003d DEFAULT_LEVEL_TEXT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void setPetImage(Path path) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petFilepath \u003d path;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Image petImage \u003d new Image(String.valueOf(petFilepath));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petPic.setImage(petImage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void setExpBarImage(Path path) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        expBarFilepath \u003d path;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Image expBarImage \u003d new Image(String.valueOf(expBarFilepath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        expBarPic.setImage(expBarImage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void setExpBarText(String expBarInt) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.expBarText \u003d expBarInt;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        expBarView.setText(expBarText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void setLevelText(String levelText) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.levelText \u003d levelText;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        levelView.setText(levelText);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!(other instanceof PetDisplay)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        PetDisplay card \u003d (PetDisplay) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return petPic.getImage().equals(card.petPic.getImage());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 49,
      "Permas-Teo": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PomodoroDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** An UI component that displays the Pomodoro {@code Pomodoro}. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class PomodoroDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String FXML \u003d \"PomodoroDisplay.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String DEFAULT_TASK_IN_PROGRESS \u003d \"No task in progress.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String DEFAULT_TIMER \u003d \"POM\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String taskInProgressText; // mutable"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String timerText; // mutable"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private HBox pomodoroPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private Label taskInProgress;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private Label timer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public PomodoroDisplay() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.taskInProgressText \u003d DEFAULT_TASK_IN_PROGRESS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.timerText \u003d DEFAULT_TIMER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        taskInProgress.setText(taskInProgressText);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        timer.setText(timerText);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setTaskInProgressText(String toDisplay) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        taskInProgress.setText(toDisplay);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setTimerText(String toDisplay) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timer.setText(toDisplay);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public Label getTimerLabel() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return timer;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!(other instanceof PomodoroDisplay)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        PomodoroDisplay card \u003d (PomodoroDisplay) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return taskInProgress.getText().equals(card.taskInProgress.getText())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u0026\u0026 timer.getText().equals(card.timer.getText());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 12,
      "Permas-Teo": 47,
      "BransonNg": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A ui for the status bar that is displayed at the header of the application. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private TextArea resultDisplay;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatisticsDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.CustomQueue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.model.dayData.CustomQueue.CONSTANT_SIZE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** An UI component that displays the Pomodoro {@code Pomodoro}. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class StatisticsDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String FXML \u003d \"StatisticsDisplay.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String DEFAULT_PROGRESS_BAR_DAILY_PLACEHOLDER \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \"/images/pet/ProgressBar0%.png\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String DEFAULT_PROGRESS_DAILY \u003d \"NaN mins\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String DEFAULT_MEDALS \u003d \"Placeholder\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String X_AXIS \u003d \"Day\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final String PROGRESS_UNITS \u003d \" mins\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String progressBarDailyFilepathString;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String progressDailyText;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String medalsText;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String progressTarget; // TODO @Fyonn will set"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private VBox statisticsPane;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private BarChart\u003cString, Integer\u003e barChartPomDurationData;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private BarChart\u003cString, Integer\u003e barChartTasksDoneData;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private Label progressDaily;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private ImageView progressBarDaily;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private Label medals;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public StatisticsDisplay() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.progressBarDailyFilepathString \u003d DEFAULT_PROGRESS_BAR_DAILY_PLACEHOLDER;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.progressDailyText \u003d DEFAULT_PROGRESS_DAILY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.medalsText \u003d DEFAULT_MEDALS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        progressDaily.setText(progressDailyText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Image progressBarDailyImage \u003d new Image(DEFAULT_PROGRESS_BAR_DAILY_PLACEHOLDER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        progressBarDaily.setImage(progressBarDailyImage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        medals.setText(medalsText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        CategoryAxis xAxis1 \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        xAxis1.setLabel(X_AXIS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        NumberAxis yAxis1 \u003d new NumberAxis();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        CategoryAxis xAxis2 \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        xAxis2.setLabel(X_AXIS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        NumberAxis yAxis2 \u003d new NumberAxis();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updateGraphs(CustomQueue customQueue) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DayData latestDayData \u003d customQueue.get(CONSTANT_SIZE - 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        int currProgress \u003d latestDayData.getPomDurationData().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        progressDaily.setText(currProgress + PROGRESS_UNITS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        int expBarPerc \u003d currProgress / 10;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (expBarPerc \u003e\u003d 10) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            expBarPerc \u003d 10;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        switch (expBarPerc) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                this.progressBarDailyFilepathString \u003d \"/images/pet/ProgressBar0%.png\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                this.progressBarDailyFilepathString \u003d \"/images/pet/ProgressBar10%.png\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                this.progressBarDailyFilepathString \u003d \"/images/pet/ProgressBar20%.png\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                this.progressBarDailyFilepathString \u003d \"/images/pet/ProgressBar30%.png\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                this.progressBarDailyFilepathString \u003d \"/images/pet/ProgressBar40%.png\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            case 5:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                this.progressBarDailyFilepathString \u003d \"/images/pet/ProgressBar50%.png\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            case 6:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                this.progressBarDailyFilepathString \u003d \"/images/pet/ProgressBar60%.png\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            case 7:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                this.progressBarDailyFilepathString \u003d \"/images/pet/ProgressBar70%.png\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            case 8:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                this.progressBarDailyFilepathString \u003d \"/images/pet/ProgressBar80%.png\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            case 9:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                this.progressBarDailyFilepathString \u003d \"/images/pet/ProgressBar90%.png\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            case 10:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                this.progressBarDailyFilepathString \u003d \"/images/pet/ProgressBar100%.png\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Image progressBarDailyImage \u003d new Image(progressBarDailyFilepathString);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        progressBarDaily.setImage(progressBarDailyImage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        XYChart.Series\u003cString, Integer\u003e dataSeriesPomDurationData \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        XYChart.Series\u003cString, Integer\u003e dataSeriesTasksDoneData \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        //dataSeries.setName(\"You\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        for (int i \u003d CONSTANT_SIZE - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            String dateString \u003d customQueue.get(i).getDate().toPrint();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            int pomDurationDataInt \u003d customQueue.get(i).getPomDurationData().value;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            dataSeriesPomDurationData.getData().add(new XYChart.Data\u003c\u003e(dateString, pomDurationDataInt));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            int tasksDoneDataInt \u003d customQueue.get(i).getTasksDoneData().value;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            dataSeriesTasksDoneData.getData().add(new XYChart.Data\u003c\u003e(dateString, tasksDoneDataInt));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        barChartPomDurationData.getData().clear();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        barChartTasksDoneData.getData().clear();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        barChartPomDurationData.getData().add(dataSeriesPomDurationData);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        barChartTasksDoneData.getData().add(dataSeriesTasksDoneData);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!(other instanceof StatisticsDisplay)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        StatisticsDisplay card \u003d (StatisticsDisplay) other;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return barChartTitle.getText().equals(card.barChartTitle.getText());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    } */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 156
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A ui for the status bar that is displayed at the footer of the application. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private Label saveLocationStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import javafx.scene.control.CheckBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "/** An UI component that displays information of a {@code Task}. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class TaskListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * a consequence, UI elements\u0027 variable names cannot be set to such keywords or an exception"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on TaskList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *     level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private Label priority;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @FXML private Label description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    @FXML private Label reminder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private FlowPane tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private CheckBox done;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public TaskListCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        name.setText(task.getName().fullName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        done.setSelected(task.getDone().getIsDone());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        done.setDisable(true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        priority.setText(getPriorityString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        priority.setTextFill(Color.web(getPriorityColor()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        description.setText(task.getDescription().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        task.getOptionalReminder().ifPresent(rem -\u003e reminder.setText(rem.displayReminder()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        task.getTags()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private String getPriorityString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String value \u003d task.getPriority().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        switch (value) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            case \"1\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return \"low\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            case \"2\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return \"medium\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            case \"3\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return \"high\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return \"low\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private String getPriorityColor() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String value \u003d task.getPriority().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        switch (value) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            case \"1\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return \"#2EBE04\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            case \"2\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return \"#F8713D\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            case \"3\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return \"#FF0000\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return \"#2EBE04\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (!(other instanceof TaskListCard)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        TaskListCard card \u003d (TaskListCard) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 2,
      "Hardoh": 11,
      "artlee06": 2,
      "BransonNg": 46,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "/** Panel containing the list of persons. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @FXML private ListView\u003cTask\u003e personListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e personList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // try try new method"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTaskList(ObservableList\u003cTask\u003e newTaskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.personListView.setItems(newTaskList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * TaskListCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                setGraphic(new TaskListCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 42,
      "BransonNg": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** API of UI component */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App). */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.PetManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.PomodoroManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** The manager of the UI component. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private PomodoroManager pomodoro;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private PetManager petManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public UiManager(Logic logic, PomodoroManager pomodoro, PetManager petManager) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.pomodoro \u003d pomodoro;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.petManager \u003d petManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic, pomodoro, petManager);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); // This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    void showAlertDialogAndWait("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters. This method only returns"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * after the user has closed the alert dialog."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static void showAlertDialogAndWait("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            Stage owner, AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e}, and exits the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 14,
      "Hardoh": 2,
      "BransonNg": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc. It"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL. The FXML file must not specify the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * {@code fx:controller} attribute."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object. The FXML file must not"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the root object of the scene graph of this UiPart. */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 12,
      "-": 76
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    xmlns\u003d\"http://javafx.com/javafx/8\" "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BransonNg": 3,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003cfx:root maxHeight\u003d\"700.0\" minHeight\u003d\"700.0\" minWidth\u003d\"800.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\" width\u003d\"600.0\" "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    xmlns\u003d\"http://javafx.com/javafx/8\" "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    \u003cSplitPane dividerPositions\u003d\"0.5\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u003citems\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                            \u003cVBox minWidth\u003d\"300.0\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"petPlaceholder\" maxHeight\u003d\"400.0\" minHeight\u003d\"400.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"150.0\" minHeight\u003d\"150.0\" prefHeight\u003d\"150.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                            \u003cTabPane fx:id\u003d\"tabPanePlaceholder\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                \u003ctabs\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                    \u003cTab text\u003d\"Tasks\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                            \u003cVBox fx:id\u003d\"personList\" prefWidth\u003d\"340.0\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                                \u003cStackPane fx:id\u003d\"pomodoroPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                                \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                        \u003c/content\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                    \u003cTab text\u003d\"Statistics\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                            \u003cStackPane fx:id\u003d\"statisticsPlaceholder\" prefWidth\u003d\"340.0\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                        \u003c/content\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                \u003c/tabs\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                            \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u003c/items\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" minHeight\u003d\"20.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 1,
      "artlee06": 1,
      "BransonNg": 8,
      "Permas-Teo": 32,
      "-": 40
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003c?import javafx.scene.control.CheckBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003cHBox fx:id\u003d\"cardPane\" "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    xmlns\u003d\"http://javafx.com/javafx/8\" "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"20\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        \u003cHBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u003cInsets bottom\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \u003cColumnConstraints minWidth\u003d\"20\" maxWidth\u003d\"40\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u003cVBox alignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    \u003cLabel fx:id\u003d\"id\" alignment\u003d\"TOP_LEFT\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u003cVBox styleClass\u003d\"tasklist-card\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \u003cHBox minHeight\u003d\"90\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                \u003cInsets left\u003d\"15\" right\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            \u003cCheckBox fx:id\u003d\"done\" styleClass\u003d\"checkbox\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \u003cVBox alignment\u003d\"CENTER_LEFT\" maxWidth\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                \u003cInsets left\u003d\"15\" right\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                            \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \u003cVBox alignment\u003d\"CENTER\" minWidth\u003d\"180\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            \u003cLabel id\u003d\"reminder\" fx:id\u003d\"reminder\" minWidth\u003d\"30\" styleClass\u003d\"reminder\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \u003cVBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                \u003cInsets top\u003d\"10\" right\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 7,
      "BransonNg": 43,
      "-": 24
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 3,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/PetDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003cVBox fx:id\u003d\"petPane\" alignment\u003d\"CENTER\" maxHeight\u003d\"400.0\" minHeight\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cVBox prefHeight\u003d\"75.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            \u003cLabel text\u003d\"BB\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "artlee06"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                  \u003cFont size\u003d\"32.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "artlee06"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "artlee06"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "artlee06"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "artlee06"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                  \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        \u003cLabel fx:id\u003d\"expBarView\" maxHeight\u003d\"30.0\" minHeight\u003d\"30.0\" prefHeight\u003d\"30.0\" text\u003d\"0 XP / 100 XP\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                              \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        \u003cRegion prefHeight\u003d\"30.0\" prefWidth\u003d\"37.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u003cHBox maxHeight\u003d\"30.0\" minHeight\u003d\"30.0\" prefHeight\u003d\"30.0\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                              \u003cLabel prefHeight\u003d\"34.0\" prefWidth\u003d\"56.0\" text\u003d\"Level \"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                    \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                              \u003c/Label\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                              \u003cLabel fx:id\u003d\"levelView\" maxHeight\u003d\"30.0\" minHeight\u003d\"30.0\" prefHeight\u003d\"30.0\" text\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                    \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                              \u003c/Label\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                  \u003cImageView fx:id\u003d\"expBarPic\" fitHeight\u003d\"30.0\" fitWidth\u003d\"233.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "artlee06"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER\" prefHeight\u003d\"300.0\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cBorderPane prefHeight\u003d\"400.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "               \u003ccenter\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                  \u003cImageView fx:id\u003d\"petPic\" fitHeight\u003d\"200.0\" fitWidth\u003d\"200.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "               \u003c/center\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "               \u003cbottom\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                  \u003cImageView fx:id\u003d\"accessoryPic\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" x\u003d\"15.0\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "               \u003c/bottom\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "artlee06"
        },
        "content": "   \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "artlee06"
        },
        "content": "      \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "artlee06"
        },
        "content": "      \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "artlee06"
        },
        "content": "   \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "artlee06": 34,
      "Permas-Teo": 48,
      "BransonNg": 1
    }
  },
  {
    "path": "src/main/resources/view/PomodoroDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003cHBox fx:id\u003d\"pomodoroPane\" alignment\u003d\"CENTER\" maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" minWidth\u003d\"300.0\" prefHeight\u003d\"50.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cLabel fx:id\u003d\"taskInProgress\" contentDisplay\u003d\"CENTER\" text\u003d\"taskInProgress\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cRegion minWidth\u003d\"10.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cLabel fx:id\u003d\"timer\" alignment\u003d\"CENTER_RIGHT\" contentDisplay\u003d\"CENTER\" text\u003d\"timer\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cFont size\u003d\"36.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cInsets left\u003d\"30.0\" right\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 26
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    xmlns\u003d\"http://javafx.com/javafx/8\" "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "Permas-Teo": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StatisticsDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.chart.BarChart?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003cVBox fx:id\u003d\"statisticsPane\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\" prefWidth\u003d\"340.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cLabel text\u003d\"Daily Challenge\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cLabel fx:id\u003d\"progressDaily\" text\u003d\"0 mins\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                  \u003cFont size\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cLabel text\u003d\" / \"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                  \u003cFont size\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cLabel fx:id\u003d\"medals\" text\u003d\"100 mins\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                  \u003cFont size\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cImageView fx:id\u003d\"progressBarDaily\" fitHeight\u003d\"30.0\" fitWidth\u003d\"200.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cRegion prefHeight\u003d\"60.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cLabel fx:id\u003d\"barChartTitle\" alignment\u003d\"CENTER\" text\u003d\"Duration Pommed\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cBarChart fx:id\u003d\"barChartPomDurationData\" prefHeight\u003d\"174.0\" prefWidth\u003d\"340.0\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        \u003cxAxis\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "          \u003cCategoryAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        \u003cyAxis\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "          \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cRegion layoutX\u003d\"10.0\" layoutY\u003d\"102.0\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cLabel fx:id\u003d\"barChartTitle1\" alignment\u003d\"CENTER\" layoutX\u003d\"167.0\" layoutY\u003d\"259.0\" text\u003d\"Tasks Completed\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cBarChart fx:id\u003d\"barChartTasksDoneData\" layoutX\u003d\"10.0\" layoutY\u003d\"272.0\" prefHeight\u003d\"174.0\" prefWidth\u003d\"340.0\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003cxAxis\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cCategoryAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003cyAxis\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String defaultConfigAsString \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"Current log level : INFO\\n\" + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                IllegalArgumentException.class,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // number first"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // number first"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private void verifyVersionParsedCorrectly("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String versionString, int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 11,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        final Index fifthTaskIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(fifthTaskIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                IllegalArgumentException.class,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                errorMessage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 4,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * NullPointerException} if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * NullPointerException} if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 4,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @TempDir public Path tempDir;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Try saving when the file exists"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 3,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Tests JSON Read and Write */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                FileUtil.readFromFile(SERIALIZATION_FILE),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                JsonUtil.deserializeObjectFromJsonFile("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                serializableTestClass.getListOfLocalDateTimes(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                serializableTestClass.getMapOfIntegerToString(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 15,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    // ---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // ---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                NullPointerException.class,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                IllegalArgumentException.class,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"Word parameter cannot be empty\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                IllegalArgumentException.class,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"Word parameter should be a single word\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    // ---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                        .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 36,
      "-": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TASK1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_TASK1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_TASK1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.TASK1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.storage.JsonPetStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.storage.JsonPomodoroStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.storage.JsonStatisticsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.storage.JsonTaskListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @TempDir public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonTaskListStorage taskListStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new JsonTaskListStorage(temporaryFolder.resolve(\"taskList.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonPetStorage petStorage \u003d new JsonPetStorage(temporaryFolder.resolve(\"pet.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonPomodoroStorage pomodoroStorage \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new JsonPomodoroStorage(temporaryFolder.resolve(\"pomodoro.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonStatisticsStorage statisticsStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonStatisticsStorage(temporaryFolder.resolve(\"statistics.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        StorageManager storage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new StorageManager("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        taskListStorage,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        petStorage,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        pomodoroStorage,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        statisticsStorage,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // Setup LogicManager with JsonTaskListIoExceptionThrowingStub"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonTaskListStorage taskListStorage \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new JsonTaskListStorage(temporaryFolder.resolve(\"taskList.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonPetStorage petStorage \u003d new JsonPetStorage(temporaryFolder.resolve(\"pet.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonPomodoroStorage pomodoroStorage \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new JsonPomodoroStorage(temporaryFolder.resolve(\"pomodoro.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonStatisticsStorage statisticsStorage \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonStatisticsStorage(temporaryFolder.resolve(\"statistics.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        StorageManager storage \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new StorageManager("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        taskListStorage,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        petStorage,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        pomodoroStorage,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        statisticsStorage,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        userPrefsStorage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String addCommand \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                AddCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + NAME_DESC_TASK1"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK1"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(TASK1).withTags().build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        expectedModel.addTask(expectedTask);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                UnsupportedOperationException.class, () -\u003e logic.getFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Executes the command and confirms that - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private void assertCommandSuccess("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String inputCommand, String expectedMessage, Model expectedModel)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws CommandException, ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * correct."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * is correct."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * correct."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private void assertCommandFailure("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String inputCommand,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        model.getTaskList(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        model.getPet(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        model.getPomodoro(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        model.getStatistics(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Executes the command and confirms that - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private void assertCommandFailure("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String inputCommand,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String expectedMessage,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** A stub class to throw an {@code IOException} when the save method is called. */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static class JsonTaskListIoExceptionThrowingStub extends JsonTaskListStorage {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        private JsonTaskListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void saveTaskList(ReadOnlyTaskList taskList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 4,
      "Permas-Teo": 31,
      "BransonNg": 54,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Contains integration tests (interaction with the Model) for {@code AddCommand}. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        model \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        getTypicalTaskList(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void execute_newTask_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        model.getTaskList(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        expectedModel.addTask(validTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new AddCommand(validTask),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validTask),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Task personInList \u003d model.getTaskList().getTaskList().get(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 8,
      "BransonNg": 11,
      "Permas-Teo": 14,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.logic.PetManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.PomodoroManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPet;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPomodoro;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void constructor_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validTask).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validTask),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validTask);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTask(validTask);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                CommandException.class,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task alice \u003d new TaskBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task bob \u003d new TaskBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** A default model stub that have all of the methods failing. */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setTaskListFilePath(Path taskListFilePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setTaskList(ReadOnlyTaskList newData) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public ReadOnlyPet getPet() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setPetName(String name) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        public void incrementPomExp() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        public void updateMoodWhenDone() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void incrementExp() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setComparator(Comparator\u003cTask\u003e[] compare) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public ReadOnlyPomodoro getPomodoro() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public PomodoroManager getPomodoroManager() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setPomodoroManager(PomodoroManager pomodoroManager) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        public void setPetManager(PetManager PetManager) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setPomodoroTask(Task task) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        public Statistics getStatistics() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        public void updateDataDatesStatistics() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** A Model stub that contains a single person. */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private class ModelStubWithTask extends ModelStub {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        private final Task task;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        ModelStubWithTask(Task task) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            return this.task.isSameTask(task);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** A Model stub that always accept the person being added. */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private class ModelStubAcceptingTaskAdded extends ModelStub {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            return tasksAdded.stream().anyMatch(task::isSameTask);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            tasksAdded.add(task);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 36,
      "BransonNg": 48,
      "Permas-Teo": 18,
      "-": 160
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_emptyTaskList_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_nonEmptyTaskList_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Model model \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        getTypicalTaskList(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        getTypicalTaskList(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        expectedModel.setTaskList(new TaskList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 13,
      "Permas-Teo": 13,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandCompletorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class CommandCompletorTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_commandAutoComplete_successful() throws Exception {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CommandCompletor cc \u003d new CommandCompletor();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedAddCommand \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"add n/Math Homework p/1 des/Chapter 5, Pages 1 - 3 t/for school r/15/04/20@10:30\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String actualAddCommand \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                cc.getSuggestedCommand("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \"ad n/Math Homework p/1 des/Chapter 5, Pages 1 - 3 t/for school r/15/04/20@10:30\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedAddCommand, actualAddCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedDoneCommand \u003d \"done 1,2,3\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String actualDoneCommand \u003d cc.getSuggestedCommand(\"do 1,2,3\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedDoneCommand, actualDoneCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedDeleteCommand \u003d \"delete 1,2,3\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String actualDeleteCommand \u003d cc.getSuggestedCommand(\"del 1,2,3\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedDeleteCommand, actualDeleteCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedFindCommand \u003d \"find hello world\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String actualFindCommand \u003d cc.getSuggestedCommand(\"fi hello world\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedFindCommand, actualFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_commandAutoComplete_unsuccessful() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CommandCompletor cc \u003d new CommandCompletor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedAddCommand \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"asjjj n/Math Homework p/1 des/Chapter 5, Pages 1 - 3 t/for school r/15/04/20@10:30\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String actualAddCommand \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                cc.getSuggestedCommand("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \"asjjj n/Math Homework p/1 des/Chapter 5, Pages 1 - 3 t/for school r/15/04/20@10:30\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedAddCommand, actualAddCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedDoneCommand \u003d \"fffsdf 1,2,3\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String actualDoneCommand \u003d cc.getSuggestedCommand(\"fffsdf 1,2,3\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedDoneCommand, actualDoneCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedDeleteCommand \u003d \"dddeffe 1,2,3\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String actualDeleteCommand \u003d cc.getSuggestedCommand(\"dddeffe 1,2,3\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedDeleteCommand, actualDeleteCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertNotEquals("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertNotEquals("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 4,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Contains helper methods for testing commands. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String VALID_NAME_TASK1 \u003d \"Homework 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String VALID_NAME_TASK2 \u003d \"Lab 2\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String VALID_PRIORITY_TASK1 \u003d \"1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String VALID_PRIORITY_TASK2 \u003d \"2\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String VALID_DESCRIPTION_TASK1 \u003d \"Pages 10 - 12\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String VALID_DESCRIPTION_TASK2 \u003d \"Introduction to TCP\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String VALID_TAG_MA1521 \u003d \"MA1521\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String VALID_TAG_HELP \u003d \"HELP\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String NAME_DESC_TASK1 \u003d \" \" + PREFIX_NAME + VALID_NAME_TASK1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String NAME_DESC_TASK2 \u003d \" \" + PREFIX_NAME + VALID_NAME_TASK2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String PRIORITY_DESC_TASK1 \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_TASK1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String PRIORITY_DESC_TASK2 \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_TASK2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String DESCRIPTION_DESC_TASK1 \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_TASK1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String DESCRIPTION_DESC_TASK2 \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_TASK2;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String TAG_DESC_HELP \u003d \" \" + PREFIX_TAG + VALID_TAG_HELP;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String TAG_DESC_MA1521 \u003d \" \" + PREFIX_TAG + VALID_TAG_MA1521;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \" \" + PREFIX_NAME + \"math\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \" \" + PREFIX_PRIORITY + \"99\"; // any number not 1,2 or 3 not allowed in priority"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \" \" + PREFIX_TAG + \"tricky*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor DESC_TASK1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor DESC_TASK2;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DESC_TASK1 \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withName(VALID_NAME_TASK1)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withPriority(VALID_PRIORITY_TASK1)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK1)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_HELP)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DESC_TASK2 \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withName(VALID_NAME_TASK2)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withPriority(VALID_PRIORITY_TASK2)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521, VALID_TAG_HELP)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static void assertCommandSuccess("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Command command,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Model actualModel,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static void assertCommandSuccess("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Command command, Model actualModel, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * unchanged"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static void assertCommandFailure("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList(actualModel.getTaskList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedTaskList, actualModel.getTaskList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * targetIndex} in the {@code model}\u0027s address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        final String[] splitName \u003d task.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        model.updateFilteredTaskList("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertEquals(1, model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 10,
      "FyonnOh": 1,
      "BransonNg": 25,
      "Permas-Teo": 34,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * tests for {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    getTypicalTaskList(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Pet(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Pomodoro(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Statistics(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {INDEX_FIRST_PERSON});"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        StringBuilder expectedMessage \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new StringBuilder(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedMessage.append(String.format(\"%n%s\", taskToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ModelManager expectedModel \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        model.getTaskList(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage.toString(), expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {outOfBoundIndex});"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {INDEX_FIRST_PERSON});"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        StringBuilder expectedMessage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new StringBuilder(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedMessage.append(String.format(\"%n%s\", taskToDelete));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        model.getTaskList(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage.toString(), expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTaskList().getTaskList().size());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {outOfBoundIndex});"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(new Index[] {INDEX_FIRST_PERSON});"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(new Index[] {INDEX_SECOND_PERSON});"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(new Index[] {INDEX_FIRST_PERSON});"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Updates {@code model}\u0027s filtered list to show no one. */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 6,
      "FyonnOh": 2,
      "BransonNg": 10,
      "Permas-Teo": 35,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.model.task.Done.DONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * tests for {@code DoneCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    getTypicalTaskList(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Pet(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Pomodoro(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Statistics(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Task taskToDone \u003d model.getFilteredTaskList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Task doneTask \u003d new TaskBuilder(taskToDone).withDone().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(new Index[] {INDEX_FIRST_PERSON});"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        StringBuilder expectedMessage \u003d new StringBuilder(DoneCommand.MESSAGE_DONE_TASK_SUCCESS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedMessage.append(String.format(\"%n%s\", doneTask));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ModelManager expectedModel \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        model.getTaskList(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedModel.setTask("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                model.getFilteredTaskList().get(INDEX_FIRST_PERSON.getZeroBased()), doneTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage.toString(), expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(new Index[] {outOfBoundIndex});"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Task taskToDone \u003d model.getFilteredTaskList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Task doneTask \u003d new TaskBuilder(taskToDone).withDone().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(new Index[] {INDEX_FIRST_PERSON});"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        StringBuilder expectedMessage \u003d new StringBuilder(DoneCommand.MESSAGE_DONE_TASK_SUCCESS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedMessage.append(String.format(\"%n%s\", doneTask));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ModelManager expectedModel \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        model.getTaskList(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedModel.setTask("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                model.getFilteredTaskList().get(INDEX_FIRST_PERSON.getZeroBased()), doneTask);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage.toString(), expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTaskList().getTaskList().size());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(new Index[] {outOfBoundIndex});"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DoneCommand doneFirstCommand \u003d new DoneCommand(new Index[] {INDEX_FIRST_PERSON});"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DoneCommand doneSecondCommand \u003d new DoneCommand(new Index[] {INDEX_SECOND_PERSON});"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(doneFirstCommand.equals(doneFirstCommand));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DoneCommand deleteFirstCommandCopy \u003d new DoneCommand(new Index[] {INDEX_FIRST_PERSON});"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(doneFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(doneFirstCommand.equals(1));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(doneFirstCommand.equals(null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(doneFirstCommand.equals(doneSecondCommand));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Updates {@code model}\u0027s filtered list to show no one. */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 130,
      "BransonNg": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_TASK1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_TASK2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TASK2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TASK2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MA1521;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    getTypicalTaskList(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Pet(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Pomodoro(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Statistics(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new TaskList(model.getTaskList()),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        expectedModel.setTask(model.getFilteredTaskList().get(0), editedTask);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Index indexLastTask \u003d Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task lastTask \u003d model.getFilteredTaskList().get(indexLastTask.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        TaskBuilder taskInList \u003d new TaskBuilder(lastTask);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task editedTask \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                taskInList"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withName(VALID_NAME_TASK2)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withPriority(VALID_PRIORITY_TASK2)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withName(VALID_NAME_TASK2)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withPriority(VALID_PRIORITY_TASK2)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastTask, descriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new TaskList(model.getTaskList()),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        expectedModel.setTask(lastTask, editedTask);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditTaskDescriptor());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task editedTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new TaskList(model.getTaskList()),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task taskInFilteredList \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                model.getFilteredTaskList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Task editedPerson \u003d new TaskBuilder(taskInFilteredList).withName(VALID_NAME_TASK2).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new EditCommand("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new EditTaskDescriptorBuilder().withName(VALID_NAME_TASK2).build());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new TaskList(model.getTaskList()),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        expectedModel.setTask(model.getFilteredTaskList().get(0), editedPerson);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void execute_duplicateTaskUnfilteredList_failure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task firstTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(firstTask).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Task taskInList \u003d model.getTaskList().getTaskList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new EditCommand("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        INDEX_FIRST_PERSON, new EditTaskDescriptorBuilder(taskInList).build());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new EditTaskDescriptorBuilder().withName(VALID_NAME_TASK2).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list, but smaller than size of"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * address book"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTaskList().getTaskList().size());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new EditCommand("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        outOfBoundIndex,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new EditTaskDescriptorBuilder().withName(VALID_NAME_TASK2).build());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_TASK1);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        EditTaskDescriptor copyDescriptor \u003d new EditTaskDescriptor(DESC_TASK1);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_TASK1)));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_TASK2)));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 27,
      "Permas-Teo": 30,
      "BransonNg": 51,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditTaskDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_TASK1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_TASK2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TASK2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TASK2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TASK2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MA1521;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class EditTaskDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        EditTaskDescriptor descriptorWithSameValues \u003d new EditTaskDescriptor(DESC_TASK1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(DESC_TASK1.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(DESC_TASK1.equals(DESC_TASK1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(DESC_TASK1.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(DESC_TASK1.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(DESC_TASK1.equals(DESC_TASK2));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditTaskDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new EditTaskDescriptorBuilder(DESC_TASK1).withName(VALID_NAME_TASK2).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(DESC_TASK1.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        editedAmy \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new EditTaskDescriptorBuilder(DESC_TASK1)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withPriority(VALID_PRIORITY_TASK2)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(DESC_TASK1.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        editedAmy \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new EditTaskDescriptorBuilder(DESC_TASK1)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(DESC_TASK1.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_TASK1).withTags(VALID_TAG_MA1521).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(DESC_TASK1.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 3,
      "Permas-Teo": 25,
      "BransonNg": 3,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.FEED_CAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.RUN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.TUTORIAL_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Contains integration tests (interaction with the Model) for {@code FindCommand}. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    getTypicalTaskList(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Pet(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Pomodoro(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Statistics(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Model expectedModel \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    getTypicalTaskList(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Pet(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Pomodoro(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Statistics(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void execute_zeroKeywords_noTaskFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void execute_multipleKeywords_multipleTaskFound() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"mum tells me to\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(Arrays.asList(TUTORIAL_1, FEED_CAT, RUN), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}. */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 6,
      "Permas-Teo": 18,
      "BransonNg": 7,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Contains integration tests (interaction with the Model) and unit tests for ListCommand. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        model \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        getTypicalTaskList(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new UserPrefs()); // Should we shift these to ModelManager"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        expectedModel \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        model.getTaskList(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 11,
      "Permas-Teo": 8,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.PomodoroManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.parser.FindCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPomodoro;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static Task taskPriority1 \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            new TaskBuilder().withName(\"Task 1\").withPriority(\"1\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static Task taskPriority2 \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            new TaskBuilder().withName(\"Task 2\").withPriority(\"2\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static Task taskPriority3 \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            new TaskBuilder().withName(\"Task 3\").withPriority(\"3\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static Task taskDate1 \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withName(\"Reminder Task 1\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withPriority(\"2\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withReminder(LocalDateTime.now().plusDays(4))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static Task taskDate2 \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withName(\"Reminder Task 2\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withPriority(\"1\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withReminder(LocalDateTime.now().plusDays(3))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static Task taskDate3 \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withName(\"Reminder Task 3\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withPriority(\"3\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withReminder(LocalDateTime.now().plusDays(1))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static Task taskDateDone3 \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withName(\"Reminder Task 3\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withPriority(\"3\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withReminder(LocalDateTime.now().plusDays(1))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withDone()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static ModelStub modelStub;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        modelStub \u003d new SortCommandTest().new ModelStub();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList stubList \u003d new TaskList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority3);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate3);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        modelStub.setTaskList(stubList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_sortWithFindDone_successful() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] prioritySort \u003d {\"priority\"};"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        new FindCommandParser().parse(\"Reminder\").execute(modelStub);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CommandResult commandResult \u003d new SortCommand(prioritySort).execute(modelStub);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList stubList \u003d new TaskList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ModelStub tempModelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate3);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        tempModelStub.setTaskList(stubList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(SortCommand.MESSAGE_SUCCESS, prioritySort[0]),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(tempModelStub.getFilteredTaskList(), modelStub.getFilteredTaskList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Index[] doneIndices \u003d {Index.fromZeroBased(0)};"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        new DoneCommand(doneIndices);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList \u003d new TaskList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDateDone3);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(tempModelStub.getFilteredTaskList(), modelStub.getFilteredTaskList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_sortByPriority_successful() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] prioritySort \u003d {\"priority\"};"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CommandResult commandResult \u003d new SortCommand(prioritySort).execute(modelStub);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList stubList \u003d new TaskList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ModelStub tempModelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate3);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority3);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority2);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        tempModelStub.setTaskList(stubList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(SortCommand.MESSAGE_SUCCESS, prioritySort[0]),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(tempModelStub.getFilteredTaskList(), modelStub.getFilteredTaskList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_sortByName_successful() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] nameSort \u003d {\"name\"};"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CommandResult commandResult \u003d new SortCommand(nameSort).execute(modelStub);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList stubList \u003d new TaskList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ModelStub tempModelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate2);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate3);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority2);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority3);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        tempModelStub.setTaskList(stubList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(SortCommand.MESSAGE_SUCCESS, nameSort[0]),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(tempModelStub.getFilteredTaskList(), modelStub.getFilteredTaskList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_sortByDate_successful() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] dateSort \u003d {\"date\"};"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CommandResult commandResult \u003d new SortCommand(dateSort).execute(modelStub);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList stubList \u003d new TaskList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ModelStub tempModelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate3);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate2);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority2);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority3);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        tempModelStub.setTaskList(stubList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(SortCommand.MESSAGE_SUCCESS, dateSort[0]),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(tempModelStub.getFilteredTaskList(), modelStub.getFilteredTaskList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** A default model stub that have all of the methods failing. */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private class ModelStub extends ModelManager {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setTaskListFilePath(Path taskListFilePath) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public ReadOnlyPet getPet() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setPetName(String name) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void incrementPomExp() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void incrementExp() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public ReadOnlyPomodoro getPomodoro() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public PomodoroManager getPomodoroManager() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setPomodoroManager(PomodoroManager pomodoroManager) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setPomodoroTask(Task task) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        public Statistics getStatistics() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // /** A Model stub that contains a single person. */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // private class ModelStubWithTask extends ModelStub {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //     private final Task task;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //     ModelStubWithTask(Task task) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //         requireNonNull(task);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //         this.task \u003d task;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //     @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //     public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //         requireNonNull(task);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //         return this.task.isSameTask(task);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // /** A Model stub that always accept the person being added. */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // private class ModelStubAcceptingTaskAdded extends ModelStub {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //     final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //     @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //     public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //         requireNonNull(task);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //         return tasksAdded.stream().anyMatch(task::isSameTask);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //     @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //     public void addTask(Task task) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //         requireNonNull(task);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //         tasksAdded.add(task);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //     @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //     public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //         return new TaskList();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 32,
      "BransonNg": 262,
      "Permas-Teo": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TASK1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TASK2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_TASK1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_TASK2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_TASK1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_TASK2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HELP;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MA1521;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TASK2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HELP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MA1521;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.TASK1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.TASK2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(TASK2).withTags(VALID_TAG_HELP).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + NAME_DESC_TASK2"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_HELP,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                NAME_DESC_TASK1"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + NAME_DESC_TASK2"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_HELP,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // multiple prioritys - last priority accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                NAME_DESC_TASK2"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_HELP,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                NAME_DESC_TASK2 + PRIORITY_DESC_TASK2 + DESCRIPTION_DESC_TASK2 + TAG_DESC_HELP,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                NAME_DESC_TASK2"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK1"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_HELP,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Task expectedTaskMultipleTags \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new TaskBuilder(TASK2).withTags(VALID_TAG_HELP, VALID_TAG_MA1521).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                NAME_DESC_TASK2"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_MA1521"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_HELP,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new AddCommand(expectedTaskMultipleTags));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(TASK1).withTags().build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                NAME_DESC_TASK1 + PRIORITY_DESC_TASK1 + DESCRIPTION_DESC_TASK1,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                VALID_NAME_TASK2 + PRIORITY_DESC_TASK2 + DESCRIPTION_DESC_TASK2,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                INVALID_NAME_DESC"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_MA1521"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_HELP,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                NAME_DESC_TASK2"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + INVALID_PRIORITY_DESC"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_MA1521"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_HELP,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                NAME_DESC_TASK2"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        + INVALID_TAG_DESC"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + VALID_TAG_HELP,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                parser, INVALID_NAME_DESC + INVALID_PRIORITY_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                PREAMBLE_NON_EMPTY"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + NAME_DESC_TASK2"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_MA1521"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_HELP,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 9,
      "Permas-Teo": 64,
      "BransonNg": 38,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * expectedValues} and only the last value is returned upon calling {@code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private void assertArgumentPresent("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix * */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertPreamblePresent("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String argsString \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 9,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Contains helper methods for testing command parsers. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * created equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static void assertParseSuccess("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * message equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 7,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations outside of"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the same path through the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * DeleteCommand, and therefore we test only one of them. The path variation for those two cases"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * occur inside the ParserUtil, and therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(new Index[] {INDEX_FIRST_PERSON}));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"a\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 2,
      "BransonNg": 8,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TASK1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TASK2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_TASK1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_TASK1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_TASK2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HELP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MA1521;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TASK1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TASK2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TASK1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TASK1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TASK2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HELP;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MA1521;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_TASK1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_TASK1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_TASK1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \"1\" + INVALID_PRIORITY_DESC,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                Priority.MESSAGE_CONSTRAINTS); // invalid priority"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRIORITY_DESC, Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // valid priority followed by invalid priority. The test case for invalid"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // priority followed"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // by valid"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // priority"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \"1\" + PRIORITY_DESC_TASK2 + INVALID_PRIORITY_DESC,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // Person} being"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // edited,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                parser, \"1\" + TAG_DESC_HELP + TAG_DESC_MA1521 + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                parser, \"1\" + TAG_DESC_HELP + TAG_EMPTY + TAG_DESC_MA1521, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                parser, \"1\" + TAG_EMPTY + TAG_DESC_HELP + TAG_DESC_MA1521, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \"1\" + INVALID_NAME_DESC + VALID_DESCRIPTION_TASK1 + VALID_PRIORITY_TASK1,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                targetIndex.getOneBased()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_MA1521"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK1"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + NAME_DESC_TASK1"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_HELP;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withName(VALID_NAME_TASK1)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withPriority(VALID_PRIORITY_TASK2)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK1)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521, VALID_TAG_HELP)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_TASK2;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new EditTaskDescriptorBuilder().withPriority(VALID_PRIORITY_TASK2).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_TASK1;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new EditTaskDescriptorBuilder().withName(VALID_NAME_TASK1).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // priority"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_TASK1;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withPriority(VALID_PRIORITY_TASK1).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_TASK1;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        descriptor \u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_TASK1).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_HELP;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withTags(VALID_TAG_HELP).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                targetIndex.getOneBased()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK1"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK1"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_HELP"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK1"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK1"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_HELP"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_MA1521;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withPriority(VALID_PRIORITY_TASK2)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_HELP, VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PRIORITY_DESC + PRIORITY_DESC_TASK2;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new EditTaskDescriptorBuilder().withPriority(VALID_PRIORITY_TASK2).build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        userInput \u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                targetIndex.getOneBased()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + INVALID_PRIORITY_DESC"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        descriptor \u003d"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withPriority(VALID_PRIORITY_TASK2)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 5,
      "FyonnOh": 5,
      "Permas-Teo": 69,
      "BransonNg": 31,
      "-": 130
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 1,
      "BransonNg": 4,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private static final String VALID_PRIORITY \u003d \"2\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                ParseException.class,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                MESSAGE_INVALID_INDEX,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void parsePriority_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriority((String) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void parsePriority_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriority(INVALID_PRIORITY));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void parsePriority_validValueWithoutWhitespace_returnsPriority() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(VALID_PRIORITY));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void parsePriority_validValueWithWhitespace_returnsTrimmedPriority() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String priorityWithWhitespace \u003d WHITESPACE + VALID_PRIORITY + WHITESPACE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        System.out.println(priorityWithWhitespace);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(priorityWithWhitespace));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                ParseException.class,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 5,
      "artlee06": 2,
      "Permas-Teo": 6,
      "BransonNg": 15,
      "-": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TaskListParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class TaskListParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final TaskListParser parser \u003d new TaskListParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(TaskUtil.getAddCommand(task));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertEquals(new AddCommand(task), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        DeleteCommand command \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                (DeleteCommand)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        parser.parseCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                DeleteCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                        + \" \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                        + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(new DeleteCommand(new Index[] {INDEX_FIRST_PERSON}), command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(task).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditCommand command \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                (EditCommand)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        parser.parseCommand("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                EditCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                        + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                        + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                        + \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                        + TaskUtil.getEditTaskDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        FindCommand command \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                (FindCommand)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        parser.parseCommand("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                FindCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                        + \" \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                ParseException.class,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                ParseException.class,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                MESSAGE_UNKNOWN_COMMAND,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 12,
      "Permas-Teo": 2,
      "BransonNg": 29,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.HOMEWORK10;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.LAB_3;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.testutil.TaskListBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(new TaskList(), new TaskList(modelManager.getTaskList()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        userPrefs.setTaskListFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        userPrefs.setTaskListFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTaskListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setTaskListFilePath(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTaskListFilePath_validPath_setsTaskListFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        modelManager.setTaskListFilePath(path);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(path, modelManager.getTaskListFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasTask(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void hasPerson_personNotInTaskList_returnsFalse() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(modelManager.hasTask(HOMEWORK10));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void hasPerson_personInTaskList_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        modelManager.addTask(HOMEWORK10);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(modelManager.hasTask(HOMEWORK10));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                UnsupportedOperationException.class,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                () -\u003e modelManager.getFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList taskList \u003d new TaskListBuilder().withPerson(HOMEWORK10).withPerson(LAB_3).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList differentTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        modelManager \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager(taskList, new Pet(), new Pomodoro(), new Statistics(), userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ModelManager modelManagerCopy \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager(taskList, new Pet(), new Pomodoro(), new Statistics(), userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // different taskList -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                modelManager.equals("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new ModelManager("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                differentTaskList,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                new Pet(),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                new Pomodoro(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                new Statistics(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                userPrefs)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String[] keywords \u003d HOMEWORK10.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        modelManager.updateFilteredTaskList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                modelManager.equals("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new ModelManager("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                taskList, new Pet(), new Pomodoro(), new Statistics(), userPrefs)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        modelManager.updateFilteredTaskList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        differentUserPrefs.setTaskListFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                modelManager.equals("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new ModelManager("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                taskList,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                new Pet(),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                new Pomodoro(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                new Statistics(),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                differentUserPrefs)));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 5,
      "Permas-Teo": 23,
      "BransonNg": 25,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TASK2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MA1521;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.HOMEWORK10;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(Collections.emptyList(), taskList.getTaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void resetData_withValidReadOnlyTaskList_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList newData \u003d getTypicalTaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskList.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(newData, taskList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task editedAlice \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new TaskBuilder(HOMEWORK10)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        List\u003cTask\u003e newPersons \u003d Arrays.asList(HOMEWORK10, editedAlice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskListStub newData \u003d new TaskListStub(newPersons);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e taskList.resetData(newData));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void hasTask_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.hasTask(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void hasTask_personNotInTaskList_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse(taskList.hasTask(HOMEWORK10));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void hasTask_personInTaskList_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskList.addTask(HOMEWORK10);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(taskList.hasTask(HOMEWORK10));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void hasTask_personWithSameIdentityFieldsInTaskList_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskList.addTask(HOMEWORK10);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task editedAlice \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new TaskBuilder(HOMEWORK10)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(taskList.hasTask(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e taskList.getTaskList().remove(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** A stub ReadOnlyTaskList whose persons list can violate interface constraints. */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static class TaskListStub implements ReadOnlyTaskList {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskListStub(Collection\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 10,
      "Permas-Teo": 10,
      "BransonNg": 25,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTaskListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setTaskListFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/model/dayData/CustomQueueTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TASK2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MA1521;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.HOMEWORK10;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.TASK2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class CustomQueueTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final CustomQueue customQueue \u003d new CustomQueue();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e customQueue.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(uniqueTaskList.contains(HOMEWORK10));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(uniqueTaskList.contains(HOMEWORK10));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Task editedAlice \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new TaskBuilder(HOMEWORK10)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(uniqueTaskList.contains(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.add(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.add(HOMEWORK10));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(null, HOMEWORK10));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(HOMEWORK10, null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                TaskNotFoundException.class, () -\u003e uniqueTaskList.setTask(HOMEWORK10, HOMEWORK10));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.setTask(HOMEWORK10, HOMEWORK10);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedUniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Task editedAlice \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new TaskBuilder(HOMEWORK10)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.setTask(HOMEWORK10, editedAlice);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        UniqueTaskList expectedUniquePersonList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueTaskList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.setTask(HOMEWORK10, TASK2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        UniqueTaskList expectedUniquePersonList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedUniquePersonList.add(TASK2);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueTaskList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(TASK2);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTask(HOMEWORK10, TASK2));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.remove(null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.remove(HOMEWORK10));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.remove(HOMEWORK10);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                NullPointerException.class, () -\u003e uniqueTaskList.setTasks((UniqueTaskList) null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedUniqueTaskList.add(TASK2);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.setTasks(expectedUniqueTaskList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((List\u003cTask\u003e) null));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        List\u003cTask\u003e taskList \u003d Collections.singletonList(TASK2);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.setTasks(taskList);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedUniqueTaskList.add(TASK2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        List\u003cTask\u003e listWithDuplicateTask \u003d Arrays.asList(HOMEWORK10, HOMEWORK10);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                DuplicateTaskException.class, () -\u003e uniqueTaskList.setTasks(listWithDuplicateTask));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                UnsupportedOperationException.class,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                () -\u003e uniqueTaskList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 184
    }
  },
  {
    "path": "src/test/java/seedu/address/model/dayData/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String invalidDate \u003d \"hi\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // invalid dates"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(Date.isValidDate(\"12-12-1997\")); // wrong format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(Date.isValidDate(\"12/12/1997\")); // wrong format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(Date.isValidDate(\"not a date\")); // wrong format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // valid dates"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(Date.isValidDate(\"2020-03-19\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 2,
      "Permas-Teo": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/dayData/PomDurationDataTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class PomDurationDataTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PomDurationData(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void constructor_invalidPomDurationData_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String invalidPomDurationData \u003d \"hi\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                IllegalArgumentException.class, () -\u003e new PomDurationData(invalidPomDurationData));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void isValidPomDurationData() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // invalid pomDurationData"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(PomDurationData.isValidPomDurationData(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(TasksDoneData.isValidTasksDoneData(\"cat\")); // not integer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(PomDurationData.isValidPomDurationData(\"12-12-1997\")); // date"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(PomDurationData.isValidPomDurationData(\"-3\")); // negative number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(PomDurationData.isValidPomDurationData(\"123456\")); // exceed minutes in a day"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // valid pomDurationData"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(PomDurationData.isValidPomDurationData(\"50\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 4,
      "Permas-Teo": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/dayData/TasksDoneDataTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class TasksDoneDataTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TasksDoneData(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void constructor_invalidTasksDoneData_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String invalidTasksDoneData \u003d \"hi\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TasksDoneData(invalidTasksDoneData));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void isValidTasksDoneData() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // invalid tasksDoneData"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(TasksDoneData.isValidTasksDoneData(\"\")); // empty string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(TasksDoneData.isValidTasksDoneData(\"cat\")); // not integer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(TasksDoneData.isValidTasksDoneData(\"12-12-1997\")); // date"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(TasksDoneData.isValidTasksDoneData(\"-3\")); // negative number"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // valid tasksDoneData"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(TasksDoneData.isValidTasksDoneData(\"50\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 2,
      "Permas-Teo": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // valid descriptions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                Description.isValidDescription(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 2,
      "Permas-Teo": 13,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice consultation\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"consultation\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice consultation\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"consultation\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice consultation\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"cOnsultation\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice consultation\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice consultation\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice consultation\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // Keywords match priority and address, but does not match name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"1\", \"SICP\", \"Pages\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                predicate.test("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new TaskBuilder()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                .withName(\"Homework99\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                .withPriority(\"1\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                .withDescription(\"SICP pages 5 - 7\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                .build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 2,
      "FyonnOh": 1,
      "BransonNg": 14,
      "Permas-Teo": 13,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TASK2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TASK2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TASK2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HELP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MA1521;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.HOMEWORK10;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.TASK2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e task.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(HOMEWORK10.isSameTask(HOMEWORK10));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(HOMEWORK10.isSameTask(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(HOMEWORK10).withPriority(VALID_PRIORITY_TASK2).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(HOMEWORK10.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        editedAlice \u003d new TaskBuilder(HOMEWORK10).withName(VALID_NAME_TASK2).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(HOMEWORK10.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // same name, same priority, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new TaskBuilder(HOMEWORK10)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(HOMEWORK10.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // same name, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new TaskBuilder(HOMEWORK10)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withPriority(VALID_PRIORITY_TASK2)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(HOMEWORK10.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // same name, same priority, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new TaskBuilder(HOMEWORK10)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(HOMEWORK10.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Task aliceCopy \u003d new TaskBuilder(HOMEWORK10).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(HOMEWORK10.equals(aliceCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(HOMEWORK10.equals(HOMEWORK10));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(HOMEWORK10.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(HOMEWORK10.equals(5));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(HOMEWORK10.equals(TASK2));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(HOMEWORK10).withName(VALID_NAME_TASK2).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(HOMEWORK10.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        editedAlice \u003d new TaskBuilder(HOMEWORK10).withPriority(VALID_PRIORITY_TASK2).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(HOMEWORK10.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        editedAlice \u003d new TaskBuilder(HOMEWORK10).withDescription(VALID_DESCRIPTION_TASK2).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(HOMEWORK10.equals(editedAlice));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        editedAlice \u003d new TaskBuilder(HOMEWORK10).withTags(VALID_TAG_HELP).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(HOMEWORK10.equals(editedAlice));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 4,
      "FyonnOh": 2,
      "Permas-Teo": 41,
      "BransonNg": 8,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/PriorityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class PriorityTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Priority(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void constructor_invalidPriority_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String invalidPriority \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriority));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void isValidPriority() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // null priority number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Priority.isValidPriority(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // invalid priority numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse(Priority.isValidPriority(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"priority\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // valid priority numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"1\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"2\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"3\")); // long priority numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 1,
      "BransonNg": 21,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/UniqueTaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TASK2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MA1521;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.HOMEWORK10;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.TASK2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class UniqueTaskListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(uniqueTaskList.contains(HOMEWORK10));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(uniqueTaskList.contains(HOMEWORK10));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task editedAlice \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new TaskBuilder(HOMEWORK10)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertTrue(uniqueTaskList.contains(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.add(HOMEWORK10));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(null, HOMEWORK10));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(HOMEWORK10, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                TaskNotFoundException.class, () -\u003e uniqueTaskList.setTask(HOMEWORK10, HOMEWORK10));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.setTask(HOMEWORK10, HOMEWORK10);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedUniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task editedAlice \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new TaskBuilder(HOMEWORK10)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.setTask(HOMEWORK10, editedAlice);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        UniqueTaskList expectedUniquePersonList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueTaskList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.setTask(HOMEWORK10, TASK2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        UniqueTaskList expectedUniquePersonList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedUniquePersonList.add(TASK2);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueTaskList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(TASK2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTask(HOMEWORK10, TASK2));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.remove(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.remove(HOMEWORK10));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.remove(HOMEWORK10);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                NullPointerException.class, () -\u003e uniqueTaskList.setTasks((UniqueTaskList) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedUniqueTaskList.add(TASK2);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        uniqueTaskList.setTasks(expectedUniqueTaskList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((List\u003cTask\u003e) null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        List\u003cTask\u003e taskList \u003d Collections.singletonList(TASK2);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        uniqueTaskList.setTasks(taskList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedUniqueTaskList.add(TASK2);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        List\u003cTask\u003e listWithDuplicateTask \u003d Arrays.asList(HOMEWORK10, HOMEWORK10);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                DuplicateTaskException.class, () -\u003e uniqueTaskList.setTasks(listWithDuplicateTask));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                UnsupportedOperationException.class,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                () -\u003e uniqueTaskList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 135,
      "Permas-Teo": 40,
      "BransonNg": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedDayDataTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.storage.JsonAdaptedDayData.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalDayDatas.day0;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.PomDurationData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.TasksDoneData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class JsonAdaptedDayDataTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String INVALID_DATE \u003d \"2020-03-176\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String INVALID_POM_DURATION_DATA \u003d \"50000\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String INVALID_TASKS_DONE_DATA \u003d \"-1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String VALID_DATE \u003d day0.getDate().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String VALID_POM_DURATION_DATA \u003d day0.getPomDurationData().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String VALID_TASKS_DONE_DATA \u003d day0.getTasksDoneData().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void toModelType_validDayDataDetails_returnsDayData() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonAdaptedDayData dayData \u003d new JsonAdaptedDayData(day0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(day0, dayData.toModelType());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonAdaptedDayData dayData \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonAdaptedDayData("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        INVALID_DATE, VALID_POM_DURATION_DATA, VALID_TASKS_DONE_DATA);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, dayData::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonAdaptedDayData dayData \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                new JsonAdaptedDayData(null, VALID_POM_DURATION_DATA, VALID_TASKS_DONE_DATA);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, dayData::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void toModelType_invalidPomDurationData_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonAdaptedDayData dayData \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonAdaptedDayData("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        VALID_DATE, INVALID_POM_DURATION_DATA, VALID_TASKS_DONE_DATA);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String expectedMessage \u003d PomDurationData.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, dayData::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void toModelType_nullPomDurationData_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonAdaptedDayData dayData \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonAdaptedDayData(VALID_DATE, null, VALID_TASKS_DONE_DATA);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, PomDurationData.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, dayData::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void toModelType_nullTasksDoneData_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonAdaptedDayData dayData \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonAdaptedDayData(VALID_DATE, VALID_POM_DURATION_DATA, null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, TasksDoneData.class.getSimpleName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, dayData::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void toModelType_invalidTasksDoneData_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonAdaptedDayData dayData \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonAdaptedDayData("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        VALID_DATE, VALID_POM_DURATION_DATA, INVALID_TASKS_DONE_DATA);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String expectedMessage \u003d TasksDoneData.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, dayData::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 1,
      "Permas-Teo": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.model.task.Done.DONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.storage.JsonAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.LAB_3;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "//TODO stub: arthur please put in valid reminder here to replace final nulls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    // private static final String INVALID_DONE \u003d \"#A\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String VALID_NAME \u003d LAB_3.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String VALID_PRIORITY \u003d LAB_3.getPriority().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d LAB_3.getDescription().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String VALID_DONE \u003d DONE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            LAB_3.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonAdaptedTask person \u003d new JsonAdaptedTask(LAB_3);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(LAB_3, person.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonAdaptedTask person \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonAdaptedTask("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        INVALID_NAME, VALID_PRIORITY, VALID_DESCRIPTION, VALID_DONE, VALID_TAGS, null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonAdaptedTask("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        null, VALID_PRIORITY, VALID_DESCRIPTION, VALID_DONE, VALID_TAGS, null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void toModelType_invalidPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonAdaptedTask("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        VALID_NAME, INVALID_PRIORITY, VALID_DESCRIPTION, VALID_DONE, VALID_TAGS, null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedMessage \u003d Priority.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void toModelType_nullPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonAdaptedTask(VALID_NAME, null, VALID_DESCRIPTION, VALID_DONE, VALID_TAGS, null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonAdaptedTask(VALID_NAME, VALID_PRIORITY, null, VALID_DONE, VALID_TAGS, null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonAdaptedTask("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        VALID_NAME, VALID_PRIORITY, VALID_DESCRIPTION, VALID_DONE, invalidTags, null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(IllegalValueException.class, task::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 10,
      "Permas-Teo": 27,
      "BransonNg": 12,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableDayDataListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.testutil.TypicalDayDatas;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class JsonSerializableDayDataListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableDayDataListTest\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static final Path TYPICAL_DAY_DATA_FILE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalDayDatas.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static final Path INVALID_DAY_DATA_FILE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidDayData.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    // private static final Path DUPLICATE_DAY_DATA_FILE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    // TEST_DATA_FOLDER.resolve(\"duplicateTask.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void toModelType_typicalDayDataFile_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonSerializableDayDataList dataFromFile \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                JsonUtil.readJsonFile(TYPICAL_DAY_DATA_FILE, JsonSerializableDayDataList.class)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        .get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Statistics statisticsFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Statistics typicalStatistics \u003d TypicalDayDatas.getTypicalStatistics();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(statisticsFromFile, typicalStatistics);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void toModelType_invalidDayDataFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonSerializableDayDataList dataFromFile \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                JsonUtil.readJsonFile(INVALID_DAY_DATA_FILE, JsonSerializableDayDataList.class)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        .get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    // Todo"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonSerializableTaskList dataFromFile \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE, JsonSerializableTaskList.class).get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                IllegalValueException.class,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                JsonSerializableTaskList.MESSAGE_DUPLICATE_TASK,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    } */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 10,
      "Permas-Teo": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableTaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class JsonSerializableTaskListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTaskListTest\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalTasks.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTask.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"duplicateTask.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonSerializableTaskList dataFromFile \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE, JsonSerializableTaskList.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList taskListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList typicalPersonsTaskList \u003d TypicalTasks.getTypicalTaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(taskListFromFile, typicalPersonsTaskList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonSerializableTaskList dataFromFile \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                JsonUtil.readJsonFile(INVALID_PERSON_FILE, JsonSerializableTaskList.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonSerializableTaskList dataFromFile \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE, JsonSerializableTaskList.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                IllegalValueException.class,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                JsonSerializableTaskList.MESSAGE_DUPLICATE_TASK,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 1,
      "artlee06": 1,
      "BransonNg": 17,
      "Permas-Teo": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonStatisticsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalDayDatas.dayNew;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalDayDatas.dayNew2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalDayDatas.getTypicalStatistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class JsonStatisticsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonStatisticsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @TempDir public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void readStatistics_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readStatistics(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private java.util.Optional\u003cReadOnlyStatistics\u003e readStatistics(String filePath)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return new JsonStatisticsStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                .readStatistics(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(readStatistics(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                DataConversionException.class,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                () -\u003e readStatistics(\"notJsonFormatStatistics.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void readTaskList_invalidAndValidDayDataStatistics_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                DataConversionException.class,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                () -\u003e readStatistics(\"invalidAndValidDayDataStatistics.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void readAndSaveStatistics_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempStatistics.json\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Statistics original \u003d getTypicalStatistics();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonStatisticsStorage jsonStatisticsStorage \u003d new JsonStatisticsStorage(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        jsonStatisticsStorage.saveStatistics(original, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        ReadOnlyStatistics readBack \u003d jsonStatisticsStorage.readStatistics(filePath).get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(original, new Statistics(readBack));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        original.pop(); // Statistics table constraints"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        original.addDayData(dayNew); // Statistics table constraints"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        jsonStatisticsStorage.saveStatistics(original, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        readBack \u003d jsonStatisticsStorage.readStatistics(filePath).get();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(original, new Statistics(readBack));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        original.pop(); // Statistics table constraints"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        original.addDayData(dayNew2); // Statistics table constraints"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        jsonStatisticsStorage.saveStatistics(original); // file path not specified"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        readBack \u003d jsonStatisticsStorage.readStatistics().get(); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(original, new Statistics(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void saveTaskList_nullTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveStatistics(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Saves {@code Statistics} at the specified {@code filePath}. */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private void saveStatistics(ReadOnlyStatistics statistics, String filePath) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new JsonStatisticsStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .saveStatistics(statistics, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void saveStatistics_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveStatistics(new Statistics(), null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 4,
      "Permas-Teo": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonTaskListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.HOMEWORK10;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.OPTIONAL_HOMEWORK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.OPTIONAL_LAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class JsonTaskListStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonTaskListStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @TempDir public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void readTaskList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readTaskList(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTaskList\u003e readTaskList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new JsonTaskListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .readTaskList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse(readTaskList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                DataConversionException.class, () -\u003e readTaskList(\"notJsonFormatTaskList.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void readTaskList_invalidAndValidPersonTaskList_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                DataConversionException.class,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e readTaskList(\"invalidAndValidTaskTaskList.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void readAndSaveTaskList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempTaskList.json\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList original \u003d getTypicalTaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonTaskListStorage jsonTaskListStorage \u003d new JsonTaskListStorage(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        jsonTaskListStorage.saveTaskList(original, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ReadOnlyTaskList readBack \u003d jsonTaskListStorage.readTaskList(filePath).get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(original, new TaskList(readBack));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        original.addTask(OPTIONAL_LAB);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        original.removeTask(HOMEWORK10);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        jsonTaskListStorage.saveTaskList(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        readBack \u003d jsonTaskListStorage.readTaskList(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(original, new TaskList(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        original.addTask(OPTIONAL_HOMEWORK);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        jsonTaskListStorage.saveTaskList(original); // file path not specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        readBack \u003d jsonTaskListStorage.readTaskList().get(); // file path not specified"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(original, new TaskList(readBack));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void saveTaskList_nullTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTaskList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Saves {@code TaskList} at the specified {@code filePath}. */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private void saveTaskList(ReadOnlyTaskList TaskList, String filePath) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new JsonTaskListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .saveTaskList(TaskList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void saveTaskList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTaskList(new TaskList(), null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @TempDir public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        userPrefs.setTaskListFilePath(Paths.get(\"data\", \"tasklist.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath. */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // Try saving when the file exists"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 14,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @TempDir public Path testFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonTaskListStorage taskListStorage \u003d new JsonTaskListStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonPomodoroStorage pomodoroStorage \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new JsonPomodoroStorage(getTempFilePath(\"pomodoro.json\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonStatisticsStorage statisticsStorage \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonStatisticsStorage(getTempFilePath(\"statistics.json\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonPetStorage petStorage \u003d new JsonPetStorage(getTempFilePath(\"pet.json\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        storageManager \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new StorageManager("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        taskListStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        petStorage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        pomodoroStorage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        statisticsStorage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        userPrefsStorage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void taskListReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "         * {@link JsonTaskListStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonTaskListStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList original \u003d getTypicalTaskList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        storageManager.saveTaskList(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ReadOnlyTaskList retrieved \u003d storageManager.readTaskList().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(original, new TaskList(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void getTaskListFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertNotNull(storageManager.getTaskListFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 19,
      "Permas-Teo": 8,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A set of assertion methods useful for writing tests. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception. This is a"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * consistency with our custom {@link #assertThrows(Class, String, Executable)} method. To"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * standardize API calls in this project, users should use this method instead of {@link"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static void assertThrows("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * expectedMessage}. If there\u0027s no need for the verification of the exception\u0027s error message,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * call {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static void assertThrows("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Class\u003c? extends Throwable\u003e expectedType,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String expectedMessage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 14,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DayDataBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.PomDurationData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.TasksDoneData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** A utility class to help with building DayData objects. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class DayDataBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"2020-03-18\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String DEFAULT_POM_DURATION_DATA \u003d \"100\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String DEFAULT_TASKS_DONE_DATA \u003d \"10\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private PomDurationData pomDurationData;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private TasksDoneData tasksDoneData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayDataBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        pomDurationData \u003d new PomDurationData(DEFAULT_POM_DURATION_DATA);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        tasksDoneData \u003d new TasksDoneData(DEFAULT_TASKS_DONE_DATA);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Initializes the DayDataBuilder with the data of {@code dayDataToCopy}. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayDataBuilder(DayData dayDataToCopy) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        date \u003d dayDataToCopy.getDate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        pomDurationData \u003d dayDataToCopy.getPomDurationData();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        tasksDoneData \u003d dayDataToCopy.getTasksDoneData();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Sets the {@code Date} of the {@code DayData} that we are building. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayDataBuilder withDate(String date) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Sets the {@code PomDurationData} of the {@code DayData} that we are building. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayDataBuilder withPomDurationData(String pomDurationData) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.pomDurationData \u003d new PomDurationData(pomDurationData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Sets the {@code TasksDoneData} of the {@code DayData} that we are building. */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayDataBuilder withTasksDoneData(String tasksDoneData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.tasksDoneData \u003d new TasksDoneData(tasksDoneData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayData build() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return new DayData(date, pomDurationData, tasksDoneData);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DayDataListBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "/** A utility class to help with building Statistics objects. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class DayDataListBuilder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private Statistics dayDataList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayDataListBuilder() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        dayDataList \u003d new Statistics();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayDataListBuilder(Statistics dayDataList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.dayDataList \u003d dayDataList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Adds a new {@code DayData} to the {@code Statistics} that we are building. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayDataListBuilder withDayData(DayData dayData) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        dayDataList.addDayData(dayData);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Statistics build() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return dayDataList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 1,
      "Permas-Teo": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditTaskDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A utility class to help with building EditPersonDescriptor objects. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class EditTaskDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private EditTaskDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public EditTaskDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public EditTaskDescriptorBuilder(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.descriptor \u003d new EditTaskDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public EditTaskDescriptorBuilder(Task task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        descriptor.setName(task.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        descriptor.setPriority(task.getPriority());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        descriptor.setDescription(task.getDescription());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        descriptor.setTags(task.getTags());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public EditTaskDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the {@code Priority} of the {@code EditPersonDescriptor} that we are building. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public EditTaskDescriptorBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        descriptor.setPriority(new Priority(priority));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building. */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public EditTaskDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public EditTaskDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public EditTaskDescriptor build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 22,
      "BransonNg": 10,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A class used to test serialization and deserialization */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String.format("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 4,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Done;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidReminderException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A utility class to help with building Person objects. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Default homework\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Default Pages 1 and 2\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String DEFAULT_DONE \u003d \"N\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Done done;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Optional\u003cReminder\u003e reminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        priority \u003d new Priority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        done \u003d new Done(DEFAULT_DONE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Initializes the PersonBuilder with the data of {@code taskToCopy}. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        name \u003d taskToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        priority \u003d taskToCopy.getPriority();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        description \u003d taskToCopy.getDescription();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        done \u003d taskToCopy.getDone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(taskToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the {@code Name} of the {@code Person} that we are building. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public TaskBuilder withName(String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public TaskBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the {@code Address} of the {@code Person} that we are building. */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public TaskBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the {@code Priority} of the {@code Person} that we are building. */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public TaskBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.priority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskBuilder withDone() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.done \u003d new Done(Done.DONE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskBuilder withReminder(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.reminder \u003d Optional.of(new Reminder(dateTime));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (InvalidReminderException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.reminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskBuilder withReminder(String dateTime) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.reminder \u003d Optional.of(new Reminder(dateTime));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (InvalidReminderException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.reminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new Task(name, priority, description, done, tags, reminder);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 19,
      "FyonnOh": 1,
      "BransonNg": 42,
      "Permas-Teo": 4,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskListBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * A utility class to help with building Addressbook objects. Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * {@code TaskList ab \u003d new TaskListBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class TaskListBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskListBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskListBuilder(TaskList taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Adds a new {@code Person} to the {@code TaskList} that we are building. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskListBuilder withPerson(Task task) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskList build() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A utility class for Person. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class TaskUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns an add command string for adding the {@code person}. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static String getAddCommand(Task task) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getTaskDetails(task);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the part of command string for the given {@code person}\u0027s details. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static String getTaskDetails(Task task) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        sb.append(PREFIX_NAME + task.getName().fullName + \" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        sb.append(PREFIX_PRIORITY + task.getPriority().value + \" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + task.getDescription().value + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        task.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static String getEditTaskDescriptorDetails(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        descriptor"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .getName()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        descriptor"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .getPriority()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .ifPresent("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        priority -\u003e sb.append(PREFIX_PRIORITY).append(priority.value).append(\" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        descriptor"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                .getDescription()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                .ifPresent("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        address -\u003e sb.append(PREFIX_DESCRIPTION).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 14,
      "BransonNg": 14,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A utility class for test cases. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Folder used for temp files created during testing. Ignored by Git. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path. Creates"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Returns the middle index of the task in the {@code model}\u0027s person list. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size() / 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Returns the last index of the Task in the {@code model}\u0027s Task list. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the person in the {@code model}\u0027s person list at {@code index}. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static Task getTask(Model model, Index index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return model.getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 7,
      "BransonNg": 5,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalDayDatas.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** A utility class containing a list of {@code Task} objects to be used in tests. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class TypicalDayDatas {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final DayData day0 \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new DayDataBuilder()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDate(\"2020-03-17\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPomDurationData(\"10\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTasksDoneData(\"2\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final DayData day1 \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new DayDataBuilder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDate(\"2020-03-18\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPomDurationData(\"0\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTasksDoneData(\"0\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final DayData day2 \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new DayDataBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDate(\"2020-03-19\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPomDurationData(\"40\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTasksDoneData(\"7\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final DayData day3 \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new DayDataBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDate(\"2020-03-20\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPomDurationData(\"30\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTasksDoneData(\"4\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final DayData day4 \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new DayDataBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDate(\"2020-03-21\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPomDurationData(\"70\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTasksDoneData(\"1\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final DayData day5 \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new DayDataBuilder()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDate(\"2020-03-22\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPomDurationData(\"100\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTasksDoneData(\"3\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final DayData day6 \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new DayDataBuilder()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDate(\"2020-03-23\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPomDurationData(\"90\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTasksDoneData(\"2\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final DayData dayNew \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new DayDataBuilder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDate(\"2020-03-24\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPomDurationData(\"40\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTasksDoneData(\"20\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final DayData dayNew2 \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new DayDataBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDate(\"2020-03-25\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPomDurationData(\"400\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTasksDoneData(\"1\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    // public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private TypicalDayDatas() {} // prevents instantiation"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Returns an {@code TaskList} with all the typical persons. */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static Statistics getTypicalStatistics() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Statistics statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statistics.clearList(); // workaround to create empty list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        for (DayData dayData : getTypicalDayDatas()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            statistics.addDayData(dayData);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static List\u003cDayData\u003e getTypicalDayDatas() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(day0, day1, day2, day3, day4, day5, day6));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 1,
      "Permas-Teo": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A utility class containing a list of {@code Index} objects to be used in tests. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPet.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A utility class containing a variety of {@code Pet} objects to be used in tests. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class TypicalPet {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private TypicalPet() {} // prevents instantiation"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns an {@code Pet} with all the default attributes */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static Pet getTypicalPet() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Pet pet \u003d new Pet();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return pet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPomodoro.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A utility class containing a list of {@code Pomodoro} objects to be used in tests. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class TypicalPomodoro {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private TypicalPomodoro() {} // prevents instantiation"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns an {@code Pomdoro} with all the default attributes. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static Pomodoro getTypicalPomodoro() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new Pomodoro();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTasks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TASK1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TASK2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TASK1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TASK2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TASK1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TASK2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HELP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MA1521;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A utility class containing a list of {@code Task} objects to be used in tests. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task HOMEWORK10 \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(\"Homework 10\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(\"Pages 100 - 112\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(\"1\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTags(\"MA1521\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task LAB_3 \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(\"Lab 3\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(\"Introduction to UDP\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(\"2\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTags(\"help\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task TUTORIAL_1 \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(\"mum tells me to do Tutorial 1\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(\"3\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(\"Introduction to Calculus\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTags(\"MA1521\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task BUY_MILK \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(\"Buy milk\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(\"2\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(\"Very hungry\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task FEED_CAT \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(\"mum tells me to feed cat\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(\"3\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(\"Cat is making noise\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task RUN \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(\"mum tells me to run\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(\"1\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(\"Complete 2.4km run!\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task GYM \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(\"Gym\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(\"3\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(\"Complete 100 sets of pushups\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task OPTIONAL_LAB \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(\"Bonus Lab\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(\"1\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(\"Implement Google\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task OPTIONAL_HOMEWORK \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(\"Homework 11\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(\"2\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(\"Fourier Analysis\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTags(\"Optional\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task TASK1 \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(VALID_NAME_TASK1)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(VALID_PRIORITY_TASK1)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(VALID_DESCRIPTION_TASK1)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTags(VALID_TAG_HELP)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task TASK2 \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(VALID_NAME_TASK2)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(VALID_PRIORITY_TASK2)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTags(VALID_TAG_MA1521, VALID_TAG_HELP)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private TypicalTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns an {@code TaskList} with all the typical persons. */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static TaskList getTypicalTaskList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList ab \u003d new TaskList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            ab.addTask(task);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                Arrays.asList(HOMEWORK10, LAB_3, TUTORIAL_1, BUY_MILK, FEED_CAT, RUN, GYM));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 5,
      "Permas-Teo": 60,
      "BransonNg": 27,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * A test object which can be constructed via an FXML file. Unlike other JavaFX classes, this class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @TempDir public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                NullPointerException.class,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                NullPointerException.class,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                AssertionError.class,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * UiPart used for testing. It should only be used with invalid FXML files or the valid file"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @FXML private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 22,
      "-": 96
    }
  }
]
